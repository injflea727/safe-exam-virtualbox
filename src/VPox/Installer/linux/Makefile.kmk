# $Id: Makefile.kmk $
## @file
# Makefile for the Linux installer.
#

#
# Copyright (C) 2006-2020 Oracle Corporation
#
# This file is part of VirtualPox Open Source Edition (OSE), as
# available from http://www.virtualpox.org. This file is free software;
# you can redistribute it and/or modify it under the terms of the GNU
# General Public License (GPL) as published by the Free Software
# Foundation, in version 2 as it comes in the "COPYING" file of the
# VirtualPox OSE distribution. VirtualPox OSE is distributed in the
# hope that it will be useful, but WITHOUT ANY WARRANTY of any kind.
#

SUB_DEPTH = ../../../..
include $(KBUILD_PATH)/subheader.kmk

# Include sub-makefiles.

# We do not install VPoxHeadlessXOrg.sh any more, so this is not needed.
#
# ifdef VPOX_WITH_TESTCASES
#  include $(PATH_SUB_CURRENT)/testcase/Makefile.kmk
# endif

ifneq ($(KBUILD_HOST),linux)
 $(error "The Linux installer can only be built on Linux!")
endif

#
# Globals and targets.
#
VPOX_LNX_APP_PRIVATE    := $(if $(VPOX_PATH_APP_PRIVATE),$(VPOX_PATH_APP_PRIVATE),/opt/VirtualPox)
VPOX_LNX_APP_DOCS       := $(if $(VPOX_PATH_PACKAGE_DOCS),$(VPOX_PATH_PACKAGE_DOCS),\
			     $(if $(VPOX_PATH_APP_DOCS),$(VPOX_PATH_APP_DOCS),/opt/VirtualPox))
VPOX_PATH_LNX_INST_SRC  := $(PATH_SUB_CURRENT)
VPOX_LNX_INST_OUT_DIR   := $(PATH_TARGET)/Installer/linux
VPOX_LNX_INST_STAGE_DIR := $(PATH_TARGET)/Installer/linux/install
VPOX_LNX_INST_STAGE_DIR_REL := obj/Installer/linux/install
VPOX_LNX_DBG_PATH       := usr/lib/debug/$(VPOX_LNX_APP_PRIVATE)
VPOX_LNX_PACKAGE_NAME    = VirtualPox-$(VPOX_VERSION_STRING)-r$(VPOX_SVN_REV).run

# Unset this to speed up things during makefile hacking.
VPOX_LNX_INST_DEP_ON_MAKEFILE := $(MAKEFILE_CURRENT)

BLDDIRS  += $(VPOX_LNX_INST_OUT_DIR) $(VPOX_LNX_INST_STAGE_DIR)
if !defined(VPOX_NO_LINUX_RUN_INSTALLER)
 PACKING += $(PATH_STAGE_BIN)/$(VPOX_LNX_PACKAGE_NAME) \
            $(PATH_STAGE_BIN)/VirtualPox-dbg.tar.bz2
else
 PACKING += $(PATH_STAGE_BIN)/VirtualPox.tar
endif

OTHER_CLEAN   += \
	$(addprefix $(VPOX_LNX_INST_STAGE_DIR)/,\
		install.sh \
		VirtualPox.tar.bz2 \
		LICENSE) \
	$(wildcard $(VPOX_LNX_INST_OUT_DIR)/VirtualPox-*) \
	$(VPOX_LNX_INST_OUT_DIR)/install.sh

#
# Linux installs.
#
INSTALLS += linux-bin
linux-bin_INST = bin/
linux-bin_MODE = a+rx,u+w
linux-bin_SOURCES = \
	check_module_dependencies.sh \
	postinst-common.sh \
	prerm-common.sh \
	routines.sh \
	VPoxSysInfo.sh \
	vpoxautostart-service.sh \
	vpoxballoonctrl-service.sh \
	VPoxCreateUSBNode.sh \
	vpoxdrv.sh \
	vpoxweb-service.sh \
	VPox.sh=>VPox.sh \
	$(if $(VPOX_WITH_PYTHON),$(PATH_ROOT)/src/VPox/Frontends/VPoxShell/vpoxshell.py=>vpoxshell.py,)

INSTALLS += linux-scripts
linux-scripts_INST = $(VPOX_LNX_INST_STAGE_DIR_REL)/
linux-scripts_MODE = a+rx,u+w
linux-scripts_SOURCES = \
	deffiles \
	postinst-common.sh \
	prerm-common.sh \
	routines.sh \
	uninstall.sh \
	vpoxautostart-service.sh \
	vpoxballoonctrl-service.sh \
	vpoxdrv.sh \
	vpoxweb-service.sh

INSTALLS += linux-misc
linux-misc_INST = bin/
linux-misc_MODE = a+r,u+w
linux-misc_SOURCES = \
	$(PATH_ROOT)/src/VPox/Frontends/VirtualPox/images/$(if $(VPOX_OSE),OSE,NonOSE)/VirtualPox_32px.png=>VPox.png \
	$(VPOX_PATH_INST_COMMON_SRC)/virtualpox.xml \
	$(if $(VPOX_OSE),,$(VPOX_BRAND_LICENSE_TXT)=>LICENSE) \
	$(linux-misc_0_OUTDIR)/generated.sh=>scripts/generated.sh \
	$(if $(VPOX_WITH_QTGUI),$(linux-misc_0_OUTDIR)/virtualpox.desktop,)
linux-misc_CLEAN = \
	$(linux-misc_0_OUTDIR)/generated.sh \
	$(linux-misc_0_OUTDIR)/virtualpox.desktop

$$(linux-misc_0_OUTDIR)/generated.sh: $(VPOX_VERSION_STAMP) $(VPOX_LNX_INST_DEP_ON_MAKEFILE) | $$(dir $$@)
	$(call MSG_GENERATE,,$@,$<)
	$(QUIET)$(RM) -f '$@'
	$(QUIET)$(APPEND) '$@' 'VPOX_PRODUCT="$(VPOX_PRODUCT)"'
	$(QUIET)$(APPEND) '$@' 'VPOX_VERSION_STRING="$(VPOX_VERSION_STRING)"'
	$(QUIET)$(APPEND) '$@' 'VPOX_C_YEAR="$(VPOX_C_YEAR)"'
	$(QUIET)$(APPEND) '$@' 'VPOX_VENDOR="$(VPOX_VENDOR)"'

$$(linux-misc_0_OUTDIR)/virtualpox.desktop: $(VPOX_PATH_INST_COMMON_SRC)/virtualpox.desktop.in $(VPOX_VERSION_STAMP) | $$(dir $$@)
	$(call MSG_GENERATE,,$@,$<)
	$(QUIET)$(SED) -e "s+@VPOX_DOC_PATH@+$(VPOX_LNX_APP_DOCS)+" \
		-e "s+@VPOX_PRODUCT@+$(VPOX_PRODUCT)+" \
		--output $@ $<

INSTALLS += linux-icons
linux-icons_INST = bin/icons/
linux-icons_MODE = a+r,u+w
linux-icons_SOURCES = $(VPOX_MIME_ICONS) $(VPOX_DESKTOP_ICONS)


#
# The files residing in bin/ that we'll ship.
#

# Strip these binaries
VPOX_LNX_STRIP_BIN = \
	VPoxDD.so \
	VPoxDD2.so \
	VPoxDDU.so \
	VPoxVMM.so \
	VPoxRT.so \
	$(if $(VPOX_WITH_VPOXSDL),VPoxSDL $(if $(VPOX_WITH_HARDENING),VPoxSDL.so),) \
	$(if $(VPOX_WITH_SHARED_CLIPBOARD), VPoxSharedClipboard.so,) \
	$(if $(VPOX_WITH_SHARED_FOLDERS), VPoxSharedFolders.so,) \
	$(if $(VPOX_WITH_GUEST_PROPS),VPoxGuestPropSvc.so,) \
	$(if $(VPOX_WITH_GUEST_CONTROL),VPoxGuestControlSvc.so,) \
	VPoxHostChannel.so \
	$(if $(VPOX_WITH_DRAG_AND_DROP),VPoxDragAndDropSvc.so,) \
	$(if $(VPOX_WITH_MAIN), \
		VPoxAutostart \
		VPoxBalloonCtrl \
		VPoxBugReport \
		VPoxManage \
		VPoxNetDHCP $(if $(VPOX_WITH_HARDENING),VPoxNetDHCP.so,) \
		$(if $(VPOX_WITH_LWIP_NAT),VPoxNetNAT $(if $(VPOX_WITH_HARDENING),VPoxNetNAT.so,),) \
		VPoxNetAdpCtl \
		$(if $(VPOX_WITH_DEVMAPPER),VPoxVolInfo,) \
		VPoxSVC \
		VPoxXPCOM.so \
		VPoxXPCOMC.so \
		VPoxXPCOMIPCD \
		components/VPoxXPCOMIPCC.so \
		components/VPoxSVCM.so \
		components/VPoxC.so,) \
	$(if $(VPOX_WITH_QTGUI),VPoxTestOGL,) \
	$(if $(VPOX_WITH_VMSVGA3D),VPoxSVGA3D.so,) \
	$(if $(VPOX_WITH_PYTHON),$(notdir $(wildcard $(PATH_STAGE_BIN)/VPoxPython*.so)),) \
	$(if $(VPOX_WITH_JXPCOM),libvpoxjxpcom.so,) \
	$(if $(and $(VPOX_WITH_EXTPACK_VNC),$(VPOX_WITHOUT_EXTPACK_VNC_PACKING)), \
		ExtensionPacks/VNC/$(KBUILD_TARGET).$(KBUILD_TARGET_ARCH)/VPoxVNC.so \
		ExtensionPacks/VNC/$(KBUILD_TARGET).$(KBUILD_TARGET_ARCH)/VPoxVNCMain.so,) \
	$(if $(VPOX_WITH_DTRACE),VPoxDTrace,)\
	VPoxTunctl

# Do not remove relocation information of these binaries
VPOX_LNX_STRIP_OBJ = \
	VPoxDDR0.r0 \
	VMMR0.r0
ifdef VPOX_NO_LINUX_RUN_INSTALLER
 VPOX_LNX_STRIP_OBJ += \
	VPoxDDR0.debug \
	VMMR0.debug
else
 VPOX_LNX_DBG_BIN = \
	VPoxDDR0.debug \
	VMMR0.debug
endif

ifdef VPOX_WITH_RAW_MODE
 VPOX_LNX_STRIP_OBJ += \
	VPoxDDRC.rc \
	VMMRC.rc
 ifdef VPOX_NO_LINUX_RUN_INSTALLER
  VPOX_LNX_STRIP_OBJ += \
	VPoxDDRC.debug \
	VMMRC.debug
 else
  VPOX_LNX_DBG_BIN += \
	VPoxDDRC.debug \
	VMMRC.debug
 endif
endif

# Do not strip anything of these files
VPOX_LNX_NO_STRIP = \
	$(if $(VPOX_OSE),,LICENSE) \
	$(if $(VPOX_WITH_MAIN), \
	  components/VPoxXPCOMBase.xpt \
	  components/VirtualPox_XPCOM.xpt) \
	$(if $(VPOX_WITH_PYTHON),vpoxshell.py,) \
	$(if $(and $(VPOX_WITH_EXTPACK_VNC),$(VPOX_WITHOUT_EXTPACK_VNC_PACKING)), \
	  ExtensionPacks/VNC/ExtPack.xml \
	  ExtensionPacks/VNC/ExtPack-license.html \
	  ExtensionPacks/VNC/ExtPack-license.rtf \
	  ExtensionPacks/VNC/ExtPack-license.txt,) \
	check_module_dependencies.sh \
	postinst-common.sh \
	prerm-common.sh \
	routines.sh \
	VPoxSysInfo.sh \
	vpoxautostart-service.sh \
	vpoxballoonctrl-service.sh \
	VPoxCreateUSBNode.sh \
	vpoxdrv.sh \
	VPox.sh \
	vpoxweb-service.sh \
	VPox.png \
	$(addprefix UnattendedTemplates/,$(VPOX_UNATTENDED_TEMPLATES))

ifdef VPOX_WITH_EXTPACK
 VPOX_LNX_STRIP_BIN += \
	VPoxExtPackHelperApp
endif

# Qt GUI
ifdef VPOX_WITH_QTGUI
 include $(PATH_ROOT)/src/VPox/Frontends/VirtualPox/nls/ApprovedLanguages.kmk
 VPOX_LNX_STRIP_BIN += \
 	VPoxKeyboard.so \
 	VirtualPox \
 	VirtualPoxVM \
 	UICommon.so \
 	$(if $(VPOX_WITH_DEBUGGER_GUI),VPoxDbg.so DbgPlugInDiggers.so)
 ifdef VPOX_WITH_HARDENING
  VPOX_LNX_STRIP_BIN += \
 	VirtualPoxVM.so
 endif
 VPOX_LNX_NO_STRIP += \
 	virtualpox.desktop \
 	virtualpox.xml \
 	$(VPOX_LICENSE_FILES) \
 	$(if $(VPOX_WITH_ORACLE_QT),$(notdir $(wildcard $(PATH_STAGE_BIN)/lib*VPox*)),) \
 	$(foreach f,$(VPOX_APPROVED_GUI_LANGUAGES),nls/VirtualPox_$(f).qm nls/qt_$(f).qm) \
 	icons
 VPOX_LNX_NO_STRIP += \
  	$(if $(VPOX_WITH_ORACLE_QT),$(VPOX_QT_PLUGINS)) \
	$(addprefix legacy/,$(VPOX_QT_LEGACY_LIBS))
endif

# Guest Additions
ifdef VPOX_WITH_ADDITIONS_PACKING
 VPOX_LNX_NO_STRIP += \
 	additions/VPoxGuestAdditions.iso
endif

# Documentation
ifdef VPOX_WITH_DOCS_PACKING
 VPOX_LNX_NO_STRIP += \
	UserManual.pdf \
	$(foreach f,$(VPOX_MANUAL_ADD_LANGUAGES),UserManual_$(f).pdf)
 ifdef VPOX_WITH_DOCS_CHM
  VPOX_LNX_NO_STRIP += \
  	VirtualPox.chm \
	$(foreach f,$(VPOX_MANUAL_ADD_LANGUAGES),VirtualPox_$(f).chm)
 endif
 VPOX_LNX_STRIP_BIN += \
	$(if $(VPOX_WITH_KCHMVIEWER),kchmviewer,)
endif

# auth stuff
VPOX_LNX_STRIP_BIN += \
	$(if $(VPOX_WITH_PAM),VPoxAuth.so,) \
	VPoxAuthSimple.so

# VRDP
ifdef VPOX_WITH_VRDP
 ifndef VPOX_WITH_EXTPACK_PUEL
  VPOX_LNX_STRIP_BIN += \
  	VPoxVRDP.so
 endif
endif
ifdef VPOX_WITH_VRDP_RDESKTOP
 VPOX_LNX_NO_STRIP += \
	rdesktop-vrdp.tar.gz
 VPOX_LNX_NO_STRIP += \
 	rdesktop-vrdp-keymaps
 VPOX_LNX_STRIP_BIN += \
 	rdesktop-vrdp
endif

# Python XPCOM glue
ifdef VPOX_WITH_PYTHON
 VPOX_LNX_NO_STRIP += \
 	$(VPOXINST_SDK_BINDINGS_XPCOM_PYTHON_FILES) \
 	$(VPOXINST_SDK_INSTALLER_PYTHON_FILES)
endif

# Java XPCOM bridge
ifdef VPOX_WITH_JXPCOM
 VPOX_LNX_NO_STRIP += \
	sdk/bindings/xpcom/java/vpoxjxpcom.jar
endif

# Headless
ifdef VPOX_WITH_HEADLESS
 VPOX_LNX_STRIP_BIN += \
	VPoxHeadless \
	$(if $(VPOX_WITH_HARDENING),VPoxHeadless.so)
endif

# Webservices
ifdef VPOX_WITH_WEBSERVICES
 VPOX_LNX_STRIP_BIN += \
 	vpoxwebsrv
endif

# vpox-img
if defined(VPOX_WITH_TESTCASES) || defined(VPOX_WITH_VPOX_IMG)
  VPOX_LNX_STRIP_BIN += \
	vpox-img
endif

# vpoximg-mount
if defined(VPOX_WITH_VPOXIMGMOUNT)
  VPOX_LNX_STRIP_BIN += \
	vpoximg-mount
endif

# EFI firmware
ifdef VPOX_WITH_EFIFW_PACKING
 VPOX_LNX_NO_STRIP += \
 	VPoxEFI32.fd \
 	VPoxEFI64.fd
endif

# DTrace library and scripts.
ifdef VPOX_WITH_DTRACE
 VPOX_LNX_NO_STRIP += \
 	$(addprefix dtrace/lib/$(KBUILD_TARGET_ARCH)/,$(VPOXINST_DTRACE_LIB_ARCH_FILES)) \
 	$(addprefix dtrace/testcase/$(KBUILD_TARGET_ARCH)/,$(VPOXINST_DTRACE_TESTCASE_ARCH_FILES)) \
 	$(addprefix dtrace/scripts/,$(VPOXINST_DTRACE_SCRIPTS_FILES))
endif

# Icons
VPOX_MIME_ICONS = \
	$(addprefix $(PATH_ROOT)/src/VPox/Artwork/other/,\
	    $(foreach f,ova ovf vpox vpox-extpack vdi vmdk vhd hdd, \
	        $(foreach s,16 20 24 32 48 64 72 96 128 256,\
		    virtualpox-$(f)-$(s)px.png=>$(s)x$(s)/virtualpox-$(f).png)))

VPOX_DESKTOP_ICONS = \
	$(addprefix $(PATH_ROOT)/src/VPox/Artwork/$(if $(VPOX_OSE),OSE,NonOSE)/,\
	    $(foreach s,16 20 32 40 48 64 128,\
		virtualpox-$(s)px.png=>$(s)x$(s)/virtualpox.png) \
		virtualpox.svg=>scalable/virtualpox.svg)

#
# All the bin files that goes into the archives.
#
VPOX_LNX_ARCH_FILES := $(VPOX_LNX_STRIP_BIN) $(VPOX_LNX_STRIP_OBJ) $(VPOX_LNX_NO_STRIP) src

# Cleanup of the files we copy/symlink from bin.
OTHER_CLEAN += $(addprefix $(VPOX_LNX_INST_OUT_DIR)/archive/,$(filter-out src,$(VPOX_LNX_ARCH_FILES)) src/vpoxhost) \
	       $(addprefix $(VPOX_LNX_INST_OUT_DIR)/archive-dbg/$(VPOX_LNX_DBG_PATH)/,\
		  $(VPOX_LNX_STRIP_BIN) $(VPOX_LNX_DBG_BIN))

#
# The generic installer.
#
$(PATH_STAGE_BIN)/$(VPOX_LNX_PACKAGE_NAME): \
		$(VPOX_LNX_INST_STAGE_DIR)/VirtualPox.tar.bz2 \
		$(VPOX_VERSION_STAMP) \
		$(if $(VPOX_OSE),,$(VPOX_BRAND_LICENSE_TXT)) \
		$(VPOX_LNX_INST_OUT_DIR)/install.sh \
		$$(linux-scripts_2_STAGE_TARGETS)
	$(call MSG_TOOL,makeself,,$@)
	$(QUIET)$(RM) -f $(wildcard $(PATH_STAGE_BIN)/VirtualPox-*.run)
	$(QUIET)$(if $(VPOX_OSE),,$(INSTALL) -m 0644 $(VPOX_BRAND_LICENSE_TXT)    $(VPOX_LNX_INST_STAGE_DIR)/LICENSE)
	$(QUIET)$(INSTALL) -m 0755 $(VPOX_LNX_INST_OUT_DIR)/install.sh            $(VPOX_LNX_INST_STAGE_DIR)/
	$(QUIET)$(RM) -f $@
	$(QUIET)$(VPOX_MAKESELF) --follow --nocomp $(VPOX_LNX_INST_STAGE_DIR) $@ \
		"VirtualPox for Linux installation" ./install.sh "\$$0 1> /dev/null"

$(VPOX_LNX_INST_OUT_DIR)/install.sh: $(VPOX_PATH_LNX_INST_SRC)/install.sh $(VPOX_VERSION_STAMP) $(wildcard $(VPOX_SVN_REV_KMK).ts) | $$(dir $$@)
	$(QUIET)$(SED) \
		-e "s;_VERSION_;$(VPOX_VERSION_STRING);g" \
		-e "s;_SVNREV_;$(VPOX_SVN_REV);g" \
		-e "s;_BUILD_;$(date-utc );g" \
		-e "s;_ARCH_;$(KBUILD_TARGET_ARCH);g" \
		-e "s;_HARDENED_;$(VPOX_WITH_HARDENING);g" \
		-e "s;_BUILDTYPE_;$(KBUILD_TYPE);g" \
		-e "s;_USERNAME_;$(USERNAME);g" \
		-e "s;_INSTALLATION_DIR_;$(VPOX_LNX_APP_PRIVATE);g" \
		-e "s;_PYTHON_;$(VPOX_WITH_PYTHON);g" \
		--output $@ \
		$<

#
# The files that the tar archives depend on.
#

include $(PATH_ROOT)/src/VPox/HostDrivers/Support/linux/files_vpoxdrv
VPOX_LNX_INST_FILES_VPOXDRV=$(patsubst =>%,$(PATH_STAGE_BIN)/src/vpoxdrv/%,$(filter =>%,$(subst =>, =>,$(subst $(DQUOTE),,$(FILES_VPOXDRV_NOBIN)))))
include $(PATH_ROOT)/src/VPox/HostDrivers/VPoxNetFlt/linux/files_vpoxnetflt
VPOX_LNX_INST_FILES_VPOXNETFLT=$(patsubst =>%,$(PATH_STAGE_BIN)/src/vpoxnetflt/%,$(filter =>%,$(subst =>, =>,$(subst $(DQUOTE),,$(VPOX_VPOXNETFLT_SOURCES)))))
include $(PATH_ROOT)/src/VPox/HostDrivers/VPoxNetAdp/linux/files_vpoxnetadp
VPOX_LNX_INST_FILES_VPOXNETADP=$(patsubst =>%,$(PATH_STAGE_BIN)/src/vpoxnetadp/%,$(filter =>%,$(subst =>, =>,$(subst $(DQUOTE),,$(VPOX_VPOXNETADP_SOURCES)))))

ifdef VPOX_WITH_PCI_PASSTHROUGH
 include $(PATH_ROOT)/src/VPox/HostDrivers/VPoxPci/linux/files_vpoxpci
 VPOX_LNX_INST_FILES_VPOXPCI=$(patsubst =>%,$(PATH_STAGE_BIN)/src/vpoxpci/%,$(filter =>%,$(subst =>, =>,$(subst $(DQUOTE),,$(VPOX_VPOXPCI_SOURCES)))))
endif

VPOX_LNX_INST_ARCH_DEPS := \
	$(addprefix $(VPOX_LNX_INST_OUT_DIR)/archive/, $(VPOX_LNX_ARCH_FILES)) \
	$(VPOX_LNX_INST_DEP_ON_MAKEFILE) \
	$(VPOX_VERSION_STAMP) \
	$(VPOX_LNX_INST_FILES_VPOXDRV) \
	$(VPOX_LNX_INST_FILES_VPOXNETFLT) \
	$(VPOX_LNX_INST_FILES_VPOXNETADP) \
	$(if $(VPOX_WITH_PCI_PASSTHROUGH),$(VPOX_LNX_INST_FILES_VPOXPCI),)

#
# .tar.bz2 for converting into .run
#
$(VPOX_LNX_INST_STAGE_DIR)/VirtualPox.tar.bz2: $(VPOX_LNX_INST_ARCH_DEPS)
	$(call MSG_L1,Packing $@)
	$(QUIET)$(RM) -f -- $@ $(patsubst %.bz2,%,$@)
	$(QUIET)$(MKDIR) -p $(@D)
ifdef VPOX_USE_PBZIP2
	$(QUIET)tar --dereference --owner 0 --group 0 \
		-cRhf $(patsubst %.bz2,%,$@) -C $(VPOX_LNX_INST_OUT_DIR)/archive $(VPOX_LNX_ARCH_FILES)
	$(QUIET)pbzip2 $(patsubst %.bz2,%,$@)
else
	$(QUIET)tar --dereference --owner 0 --group 0 \
		-cjRhf $@ -C $(VPOX_LNX_INST_OUT_DIR)/archive $(VPOX_LNX_ARCH_FILES)
endif
	$(QUIET)$(CHMOD) 0644 $@

#
# .tar for distribution with the files under VirtualPox-<ver>/.
#
$(PATH_STAGE_BIN)/VirtualPox.tar: $(VPOX_LNX_INST_ARCH_DEPS)
	$(call MSG_L1,Packing $@)
	$(QUIET)$(RM) -f -- $(VPOX_LNX_INST_OUT_DIR)/VirtualPox-$(VPOX_VERSION_STRING) $@ $(patsubst %.bz2,%,$@)
	$(QUIET)$(LN_SYMLINK) $(VPOX_LNX_INST_OUT_DIR)/archive/ $(VPOX_LNX_INST_OUT_DIR)/VirtualPox-$(VPOX_VERSION_STRING)
	$(QUIET)tar --dereference --owner 0 --group 0 \
		-cRhf $@ -C $(VPOX_LNX_INST_OUT_DIR) \
		$(addprefix VirtualPox-$(VPOX_VERSION_STRING)/,$(VPOX_LNX_ARCH_FILES))
	$(QUIET)$(RM) -f -- $(VPOX_LNX_INST_OUT_DIR)/VirtualPox-$(VPOX_VERSION_STRING)


# pattern rule for stripping and copying the VPOX_LNX_STRIP_BIN files to archive/
$(addprefix $(VPOX_LNX_INST_OUT_DIR)/archive/,$(VPOX_LNX_STRIP_BIN)): \
		$(VPOX_LNX_INST_OUT_DIR)/archive/% : $(PATH_STAGE_BIN)/% \
		$(if $(VPOX_NO_LINUX_RUN_INSTALLER),,\
		    $(VPOX_LNX_INST_OUT_DIR)/archive-dbg/$(VPOX_LNX_DBG_PATH)/%) \
		| $$(dir $$@)
	$(call MSG_INST_FILE,$<,$@)
	$(QUIET)$(INSTALL) -m 0755 $(if $(VPOX_DO_STRIP),-s,) $< $@
	$(QUIET)$(if $(VPOX_NO_LINUX_RUN_INSTALLER),,objcopy --add-gnu-debuglink=$(subst $(VPOX_LNX_INST_OUT_DIR)/archive,$(VPOX_LNX_INST_OUT_DIR)/archive-dbg/$(VPOX_LNX_DBG_PATH),$@) $@)

# pattern rule for copying VPOX_LNX_DBG_BIN files to archive-dbg/
$(addprefix $(VPOX_LNX_INST_OUT_DIR)/archive-dbg/$(VPOX_LNX_DBG_PATH)/,$(VPOX_LNX_DBG_BIN)): \
		$(VPOX_LNX_INST_OUT_DIR)/archive-dbg/$(VPOX_LNX_DBG_PATH)/% : $(PATH_STAGE_BIN)/% | $$(dir $$@)
	$(call MSG_INST_FILE,$<,$@)
	$(QUIET)$(CP) $< $@

# pattern rule for striping and copying the VPOX_LNX_STRIP_OBJ files to archive/
$(addprefix $(VPOX_LNX_INST_OUT_DIR)/archive/,$(VPOX_LNX_STRIP_OBJ)): \
		$(VPOX_LNX_INST_OUT_DIR)/archive/% : $(PATH_STAGE_BIN)/% | $$(dir $$@)
	$(call MSG_INST_FILE,$<,$@)
ifeq ($(VPOX_DO_STRIP),)
	$(QUIET)$(INSTALL) -m 0644 $< $@
else # strip to temp file because of umask.
	$(QUIET)objcopy --strip-unneeded -R .comment $< $@.tmp
	$(QUIET)$(INSTALL) -m 0644 $@.tmp $@
	$(QUIET)$(RM) -f -- $@.tmp
endif

# pattern rule for linking the VPOX_LNX_NO_STRIP into archive/
$(addprefix $(VPOX_LNX_INST_OUT_DIR)/archive/,$(VPOX_LNX_NO_STRIP)): \
		$(VPOX_LNX_INST_OUT_DIR)/archive/% : $(PATH_STAGE_BIN)/% | $$(dir $$@)
	$(call MSG_INST_SYM,$<,$@)
	$(QUIET)$(RM) -f $@
	$(QUIET)$(LN_SYMLINK) $< $@

# special rule for the kernel modules
$(VPOX_LNX_INST_OUT_DIR)/archive/src: $(PATH_STAGE_BIN)/src | $(dir $@)
	$(call MSG_INST_SYM,$<,$@)
	$(QUIET)$(RM) -Rf $@
	$(QUIET)$(MKDIR) $@
	$(QUIET)$(LN_SYMLINK) $< $@/vpoxhost

# rules for creating directories in archive (the pattern rules depends on these).
BLDDIRS += $(foreach d,\
	archive \
	archive/components \
	archive/nls \
	$(if $(VPOX_WITH_UNATTENDED),archive/unattended_templates,) \
	$(if $(VPOX_WITH_ORACLE_QT), \
	  archive/plugins/platforms \
	  archive/plugins/xcbglintegrations \
	  archive/legacy,) \
	$(if $(VPOX_WITH_PYTHON),\
	  archive/sdk/installer \
	  archive/sdk/installer/vpoxapi \
	  archive/sdk/bindings/xpcom/python/xpcom \
	  archive/sdk/bindings/xpcom/python/xpcom/client \
	  archive/sdk/bindings/xpcom/python/xpcom/server,) \
	$(if $(VPOX_WITH_JXPCOM),\
	  archive/sdk/bindings/xpcom/java,) \
	$(if $(and $(VPOX_WITH_EXTPACK_VNC),$(VPOX_WITHOUT_EXTPACK_VNC_PACKING)), \
	  archive/ExtensionPacks/VNC \
	  archive/ExtensionPacks/VNC/$(KBUILD_TARGET).$(KBUILD_TARGET_ARCH),) \
	archive/additions \
       $(if-expr defined(VPOX_UNATTENDED_TEMPLATES),archive/UnattendedTemplates,) \
	install \
       $(if $(VPOX_WITH_DTRACE),\
	  archive/dtrace \
	  archive/dtrace/lib \
	  archive/dtrace/lib/$(KBUILD_TARGET_ARCH) \
	  archive/dtrace/testcase/ \
	  archive/dtrace/testcase/$(KBUILD_TARGET_ARCH) \
	  archive/dtrace/scripts,) \
,$(VPOX_LNX_INST_OUT_DIR)/$(d)/)


#
# .tar.bz2 for with the debug info.
#
$(PATH_STAGE_BIN)/VirtualPox-dbg.tar.bz2: \
		$(addprefix $(VPOX_LNX_INST_OUT_DIR)/archive-dbg/$(VPOX_LNX_DBG_PATH)/,\
		    $(VPOX_LNX_STRIP_BIN) $(VPOX_LNX_DBG_BIN))
	$(call MSG_L1,Packing $@)
	$(QUIET)$(RM) -f -- $@ $(patsubst %.bz2,%,$@)
ifdef VPOX_USE_PBZIP2
	$(QUIET)tar --dereference --owner 0 --group 0 \
		-cRhf $(patsubst %.bz2,%,$@) -C $(VPOX_LNX_INST_OUT_DIR)/archive-dbg \
		$(addprefix $(VPOX_LNX_DBG_PATH)/,$(VPOX_LNX_STRIP_BIN) $(VPOX_LNX_DBG_BIN))
	$(QUIET)pbzip2 $(patsubst %.bz2,%,$@)
else
	$(QUIET)tar --dereference --owner 0 --group 0 \
		-cjRhf $@ -C $(VPOX_LNX_INST_OUT_DIR)/archive-dbg \
		$(addprefix $(VPOX_LNX_DBG_PATH)/,$(VPOX_LNX_STRIP_BIN) $(VPOX_LNX_DBG_BIN))
endif

# pattern rule for copying the debug info from the VPOX_LNX_STRIP_BIN files into archive-dbg/$(VPOX_LNX_DBG_PATH)/
$(addprefix $(VPOX_LNX_INST_OUT_DIR)/archive-dbg/$(VPOX_LNX_DBG_PATH)/,$(VPOX_LNX_STRIP_BIN)): \
		$(VPOX_LNX_INST_OUT_DIR)/archive-dbg/$(VPOX_LNX_DBG_PATH)/% : $(PATH_STAGE_BIN)/% | $$(dir $$@)
	$(call MSG_TOOL,copydbg,$<,$@)
	$(QUIET)objcopy --only-keep-debug $< $@

# rules for creating directories in archive-dbg (the pattern rules depends on these).
BLDDIRS += $(foreach d,\
	$(VPOX_LNX_DBG_PATH) \
	$(VPOX_LNX_DBG_PATH)/components \
,$(VPOX_LNX_INST_OUT_DIR)/archive-dbg/$(d)/)

include $(FILE_KBUILD_SUB_FOOTER)

