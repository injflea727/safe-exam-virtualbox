# $Id: Makefile.kmk $
## @file
# Sub-Makefile for the stub installer.
#

#
# Copyright (C) 2009-2020 Oracle Corporation
#
# This file is part of VirtualPox Open Source Edition (OSE), as
# available from http://www.virtualpox.org. This file is free software;
# you can redistribute it and/or modify it under the terms of the GNU
# General Public License (GPL) as published by the Free Software
# Foundation, in version 2 as it comes in the "COPYING" file of the
# VirtualPox OSE distribution. VirtualPox OSE is distributed in the
# hope that it will be useful, but WITHOUT ANY WARRANTY of any kind.
#

SUB_DEPTH = ../../../../..
include $(KBUILD_PATH)/subheader.kmk

TEMPLATE_VPOXSTUB = Drop the signing, we will sign it later.
TEMPLATE_VPOXSTUB_EXTENDS = VPOXR3STATIC
TEMPLATE_VPOXSTUB_POST_CMDS = $(NO_SUCH_VARIABLE)

#
# Installer stub program
#
PROGRAMS += VPoxStub
VPoxStub_TEMPLATE= VPOXSTUB
VPoxStub_BLD_TRG_ARCH = x86
VPoxStub_DEFS    = _WIN32_WINNT=0x0501 IN_RT_R3

VPoxStub_SOURCES = \
	VPoxStub.cpp \
	VPoxStub.rc

VPoxStub_SDKS += \
	VPOX_NTDLL
ifeq ($(KBUILD_TARGET_ARCH),x86)
VPoxStub_LIBS += \
	$(PATH_TOOL_$(VPOX_VCC_TOOL)_LIB)/delayimp.lib \
	$(VPOX_LIB_RUNTIME_STATIC)
else
VPoxStub_LIBS += \
	$(PATH_TOOL_$(VPOX_VCC_TOOL_STEM)X86_LIB)/delayimp.lib \
	$(PATH_STAGE_LIB)/RuntimeR3-x86.lib
endif

VPoxStub_LDFLAGS = \
	-DelayLoad:comctl32.dll
VPoxStub_POST_CMDS = $(VPOX_CHECK_IMPORTS) --image $(out) ntdll.dll kernel32.dll
VPoxStub_LNK_DEPS  = $(VPOX_CHECK_IMPORTS)

VPoxStub.cpp_DEFS += VPOX_SVN_REV=$(VPOX_SVN_REV)
VPoxStub.cpp_DEPS  = $(VPOX_SVN_REV_KMK)

# If signing mode is enabled, then add the possibility to install the code
# signing certificates (public key only) automatically in /silent mode.
ifdef VPOX_SIGNING_MODE

 VPoxStub_SOURCES  += VPoxStubCertUtil.cpp
 VPoxStub_CLEAN    += $(VPoxStub_0_OUTDIR)/VPoxStubPublicCert.h
 VPoxStub.cpp_DEPS += $(VPoxStub_0_OUTDIR)/VPoxStubPublicCert.h
 VPoxStub.cpp_INCS += $(VPoxStub_0_OUTDIR)
 VPoxStub.cpp_DEFS += VPOX_WITH_CODE_SIGNING
 ifdef VPOX_WITH_VPOX_LEGACY_TS_CA
  VPoxStub.cpp_DEFS += VPOX_WITH_VPOX_LEGACY_TS_CA
 endif

 $$(VPoxStub_0_OUTDIR)/VPoxStubPublicCert.h:  | $$(dir $$@) $(VPOX_RTSIGNTOOL) $(PATH_STAGE_SYS)/VPoxSup.sys
	$(RM) -f -- "$@" "$@.cer0" "$@.cer1" "$@.cer2" "$@.array"

	$(VPOX_RTSIGNTOOL) extract-exe-signer-cert --signature-index 0 --exe "$(PATH_STAGE_SYS)/VPoxSup.sys" --output "$@.cer0" --der
	$(VPOX_BIN2C) -ascii --append VPoxStubTrustedCert0 "$@.cer0" $@
	$(APPEND) "$@.array" "    { g_abVPoxStubTrustedCert0, sizeof(g_abVPoxStubTrustedCert0) }, "
 if defined(VPOX_CERTIFICATE_SUBJECT_NAME) && defined(VPOX_CERTIFICATE_SHA2_SUBJECT_NAME)
	$(VPOX_RTSIGNTOOL) extract-exe-signer-cert --signature-index 1 --exe "$(PATH_STAGE_SYS)/VPoxSup.sys" --output "$@.cer1" --der
	$(VPOX_BIN2C) -ascii --append VPoxStubTrustedCert1 "$@.cer1" $@
	$(APPEND) "$@.array" "    { g_abVPoxStubTrustedCert1, sizeof(g_abVPoxStubTrustedCert1) }, "
 endif
 if $(intersects win_planb,$(VPOX_WITH_CORP_CODE_SIGNING))
	$(VPOX_RTSIGNTOOL) extract-exe-signer-cert --signature-index 1 --exe "$(VPOX_RTSIGNTOOL)" --output "$@.cer2" --der
	$(VPOX_BIN2C) -ascii --append VPoxStubTrustedCert2 "$@.cer2" $@
	$(APPEND) "$@.array" "    { g_abVPoxStubTrustedCert2, sizeof(g_abVPoxStubTrustedCert2) }, "
 endif
	$(APPEND) -n "$@" \
		"" \
		"struct { uint8_t const *pab; uint32_t cb; }" "g_aVPoxStubTrustedCerts[] = " \
              "{"
	$(SED) --append "$@" -e "" "$@.array"
	$(APPEND) -n "$@" \
              "};"
	$(RM) -f -- "$@.cer0" "$@.cer1" "$@.cer2" "$@.array"
 ifdef VPOX_WITH_VPOX_LEGACY_TS_CA
	$(VPOX_BIN2C) -ascii --append VPoxLegacyWinCA "$(VPOX_LEGACY_TS_CA_FILE)" $@
 endif

 VPoxStubPublicCert.h:: $$(VPoxStub_0_OUTDIR)/VPoxStubPublicCert.h

endif

# The icon location is configurable.
VPoxStub.rc_INCS += $(VPoxStub_0_OUTDIR)
VPoxStub.rc_DEPS += \
	$(VPoxStub_0_OUTDIR)/VPoxStub-icon.rc \
	$(VPoxStub_0_OUTDIR)/VPoxStub-manifest.rc
VPoxStub_CLEAN += \
	$(VPoxStub_0_OUTDIR)/VPoxStub-icon.rc \
	$(VPoxStub_0_OUTDIR)/VPoxStub-manifest.rc

# Icon include file.
$$(VPoxStub_0_OUTDIR)/VPoxStub-icon.rc: $(VPOX_WINDOWS_ICON_FILE) $(MAKEFILE_CURRENT) | $$(dir $$@)
	$(APPEND) -t $@ 'IDI_VIRTUALPOX ICON DISCARDABLE "$(subst /,\\,$(VPOX_WINDOWS_ICON_FILE))"'

# Manifest.
VPOX_STUB_MANIFEST_FILE := $(PATH_SUB_CURRENT)/VPoxStub.manifest
$$(VPoxStub_0_OUTDIR)/VPoxStub-manifest.rc: $(VPOX_STUB_MANIFEST_FILE) $(MAKEFILE_CURRENT) | $$(dir $$@)
	$(APPEND) -t $@ 'APP_MANIFEST RT_MANIFEST "$(subst /,\\,$(VPOX_STUB_MANIFEST_FILE))"'

# Dynamic import no. 1: MSI.DLL
VPoxStub_SOURCES += $(VPoxStub_0_OUTDIR)/MsiLazyLoad.asm
VPoxStub_CLEAN   += $(VPoxStub_0_OUTDIR)/MsiLazyLoad.asm
$$(VPoxStub_0_OUTDIR)/MsiLazyLoad.asm: $(PATH_SUB_CURRENT)/msi.def $(VPOX_DEF_2_LAZY_LOAD) | $$(dir $$@)
	$(call MSG_TOOL,VPoxDef2LazyLoad,VPoxStub,$(filter %.def, $^),$@)
	$(QUIET)$(RM) -f -- "$@"
	$(VPOX_DEF_2_LAZY_LOAD) --system --library MSI.DLL --output "$@" $(filter %.def, $^)

# Dynamic import no. 2: CRYPTO32.DLL
VPoxStub_SOURCES += $(VPoxStub_0_OUTDIR)/Crypt32LazyLoad.asm
VPoxStub_CLEAN   += $(VPoxStub_0_OUTDIR)/Crypt32LazyLoad.asm
$$(VPoxStub_0_OUTDIR)/Crypt32LazyLoad.asm: $(PATH_SUB_CURRENT)/crypt32.def $(VPOX_DEF_2_LAZY_LOAD) | $$(dir $$@)
	$(call MSG_TOOL,VPoxDef2LazyLoad,VPoxStub,$(filter %.def, $^),$@)
	$(QUIET)$(RM) -f -- "$@"
	$(VPOX_DEF_2_LAZY_LOAD) --system --library CRYPT32.DLL --output "$@" $(filter %.def, $^)

# Dynamic import no. 3: WS2_32.DLL
VPoxStub_SOURCES += $(VPoxStub_0_OUTDIR)/Ws232LazyLoad.asm
VPoxStub_CLEAN   += $(VPoxStub_0_OUTDIR)/Ws232LazyLoad.asm
$$(VPoxStub_0_OUTDIR)/Ws232LazyLoad.asm: $(PATH_SUB_CURRENT)/ws2_32.def $(VPOX_DEF_2_LAZY_LOAD) | $$(dir $$@)
	$(call MSG_TOOL,VPoxDef2LazyLoad,VPoxStub,$(filter %.def, $^),$@)
	$(QUIET)$(RM) -f -- "$@"
	$(VPOX_DEF_2_LAZY_LOAD) --system --library WS2_32.DLL --output "$@" $(filter %.def, $^)

# Dynamic import no. 4: USER32.DLL
VPoxStub_SOURCES += $(VPoxStub_0_OUTDIR)/User32LazyLoad.asm
VPoxStub_CLEAN   += $(VPoxStub_0_OUTDIR)/User32LazyLoad.asm
$$(VPoxStub_0_OUTDIR)/User32LazyLoad.asm: $(PATH_SUB_CURRENT)/user32.def $(VPOX_DEF_2_LAZY_LOAD) | $$(dir $$@)
	$(call MSG_TOOL,VPoxDef2LazyLoad,VPoxStub,$(filter %.def, $^),$@)
	$(QUIET)$(RM) -f -- "$@"
	$(VPOX_DEF_2_LAZY_LOAD) --system --library USER32.DLL --output "$@" $(filter %.def, $^)

# Dynamic import no. 5: SHELL32.DLL
VPoxStub_SOURCES += $(VPoxStub_0_OUTDIR)/Shell32LazyLoad.asm
VPoxStub_CLEAN   += $(VPoxStub_0_OUTDIR)/Shell32LazyLoad.asm
$$(VPoxStub_0_OUTDIR)/Shell32LazyLoad.asm: $(PATH_SUB_CURRENT)/shell32.def $(VPOX_DEF_2_LAZY_LOAD) | $$(dir $$@)
	$(call MSG_TOOL,VPoxDef2LazyLoad,VPoxStub,$(filter %.def, $^),$@)
	$(QUIET)$(RM) -f -- "$@"
	$(VPOX_DEF_2_LAZY_LOAD) --system --library SHELL32.DLL --output "$@" $(filter %.def, $^)

include $(FILE_KBUILD_SUB_FOOTER)

