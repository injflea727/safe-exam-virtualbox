# $Id: Makefile.kmk $
## @file
# Top-level makefile for the VirtualPox Guest Additions.
#

#
# Copyright (C) 2006-2020 Oracle Corporation
#
# This file is part of VirtualPox Open Source Edition (OSE), as
# available from http://www.virtualpox.org. This file is free software;
# you can redistribute it and/or modify it under the terms of the GNU
# General Public License (GPL) as published by the Free Software
# Foundation, in version 2 as it comes in the "COPYING" file of the
# VirtualPox OSE distribution. VirtualPox OSE is distributed in the
# hope that it will be useful, but WITHOUT ANY WARRANTY of any kind.
#

SUB_DEPTH = ../../..
include $(KBUILD_PATH)/subheader.kmk

#
# Globals
#
VPOX_PATH_ADDITIONS_SRC := $(PATH_SUB_CURRENT)

#
# Cross building of the additions is generally done by remote building
# by means of smbfs, cifs, VPOX_ONLY_ADDITIONS=1 and setting KBUILD_TARGET
# and KBUILD_TARGET_ARCH to the desired target and architecture.
#
# Limited support for cross building the windows additions using wine
# is provided. There are a couple of issues with the approach (lack of
# signing, no VC++ 8 support, ++) that makes it unsuitable for releases.
#
#
# Note! VPOX_WITH_ADDITIONS is checked for by our parent makefile.
#
# Note! VPOX_WITH_X11_ADDITIONS is set in Config.kmk
#
# Note! The additions build box will set the VPOX_WITH_ADDITIONS_ISO.win.x86
#       variables before invoking us from the root makefile.
#
#  ==>  All we have to worry about is what to do on the target we're on.
#
VPOX_WITH_ADDITIONS_ISO.$(KBUILD_TARGET).$(KBUILD_TARGET_ARCH) = 1

# Include sub-makefiles.
include $(PATH_SUB_CURRENT)/common/Makefile.kmk

ifdef VPOX_WITH_X11_ADDITIONS
 include $(PATH_SUB_CURRENT)/x11/Makefile.kmk
endif

ifeq ($(KBUILD_TARGET),freebsd)
 include $(PATH_SUB_CURRENT)/freebsd/Makefile.kmk
endif
ifeq ($(KBUILD_TARGET),linux)
 include $(PATH_SUB_CURRENT)/linux/Makefile.kmk
endif
ifeq ($(KBUILD_TARGET),os2)
 include $(PATH_SUB_CURRENT)/os2/Makefile.kmk
endif
ifeq ($(KBUILD_TARGET),solaris)
 include $(PATH_SUB_CURRENT)/solaris/Makefile.kmk
endif
ifeq ($(KBUILD_TARGET),win)
 ifdef VPOX_WITH_MESA3D
  include $(PATH_SUB_CURRENT)/3D/Makefile.kmk
 endif
 include $(PATH_SUB_CURRENT)/WINNT/Makefile.kmk
endif
ifeq ($(KBUILD_TARGET),darwin)
 include $(PATH_SUB_CURRENT)/darwin/Makefile.kmk
endif
ifeq ($(KBUILD_TARGET),haiku)
 include $(PATH_SUB_CURRENT)/haiku/Makefile.kmk
endif

ifeq ($(KBUILD_TARGET),linux)

 INSTALLS += LnxAddIso-scripts
 LnxAddIso-scripts_INST    = $(INST_ADDITIONS)
 LnxAddIso-scripts_MODE    = a+rx,u+w
 LnxAddIso-scripts_SOURCES = \
 	../Installer/linux/runasroot.sh \
 	linux/installer/autorun.sh

endif # KBUILD_TARGET == linux
ifeq ($(KBUILD_TARGET),win)
 #
 # Inf2Cat requires all the files referenced in the .inf file
 # to be present in the directory, so we have to do this from here,
 # since VPoxGuest.sys is being built from the common sources.
 #
 INSTALLS += VPoxGuest-inf
 VPoxGuest-inf_INST = $(INST_ADDITIONS)
 VPoxGuest-inf_MODE = a+r,u+w
 VPoxGuest-inf_SOURCES = \
 	$(PATH_TARGET)/VPoxGuestCat.dir/VPoxGuest.inf
 VPoxGuest-inf_CLEAN = $(VPoxGuest-inf_SOURCES)
 VPoxGuest-inf_BLDDIRS = $(PATH_TARGET)/VPoxGuestCat.dir

 $(PATH_TARGET)/VPoxGuestCat.dir/VPoxGuest.inf: $(PATH_SUB_CURRENT)/common/VPoxGuest/win/VPoxGuest.inf $(MAKEFILE_CURRENT) | $$(dir $$@)
	$(call MSG_GENERATE,VPoxGuest-inf,$@,$<)
	$(call VPOX_EDIT_INF_FN,$<,$@)

if defined(VPOX_SIGNING_MODE) && defined(VPOX_SIGN_ADDITIONS)
  VPoxGuest-inf_SOURCES += \
 	$(PATH_TARGET)/VPoxGuestCat.dir/VPoxGuest.cat \
 	$(PATH_TARGET)/VPoxGuestCat.dir/VPoxGuest.cat=>VPoxGuest-PreW10.cat \
 	$(PATH_TARGET)/VPoxGuestCat.dir/VPoxGuest.sys \
 	$(PATH_TARGET)/VPoxGuestCat.dir/VPoxControl.exe \
 	$(PATH_TARGET)/VPoxGuestCat.dir/VPoxTray.exe

  $(PATH_TARGET)/VPoxGuestCat.dir/VPoxGuest.sys:   $$(VPoxGuest_1_TARGET) | $$(dir $$@)
	$(INSTALL) -m 644 $< $(@D)

  $(PATH_TARGET)/VPoxGuestCat.dir/VPoxControl.exe: $$(VPoxControl_1_TARGET) | $$(dir $$@)
	$(INSTALL) -m 755 $< $(@D)

  $(PATH_TARGET)/VPoxGuestCat.dir/VPoxTray.exe:    $$(VPoxTray_1_TARGET) | $$(dir $$@)
	$(INSTALL) -m 755 $< $(@D)

  $(PATH_TARGET)/VPoxGuestCat.dir/VPoxGuest.cat: \
 		$(PATH_TARGET)/VPoxGuestCat.dir/VPoxGuest.inf \
 		$(PATH_TARGET)/VPoxGuestCat.dir/VPoxGuest.sys \
 		$(PATH_TARGET)/VPoxGuestCat.dir/VPoxControl.exe \
 		$(PATH_TARGET)/VPoxGuestCat.dir/VPoxTray.exe
	$(call MSG_TOOL,Inf2Cat,VPoxGuest-inf,$@,$<)
	$(call VPOX_MAKE_CAT_FN, $(@D),$@)
 endif # signing
endif # KBUILD_TARGET == win

# The packing target rule, but only if we're on the local build box.
# (VPOX_WITHOUT_ADDITIONS_ISO is used by the additions build box, see the root makefile.)
ifndef VPOX_WITHOUT_ADDITIONS_ISO
 PACKING += $(VPOX_PATH_ADDITIONS_ISO)/VPoxGuestAdditions.iso
endif

include $(FILE_KBUILD_SUB_FOOTER)

#
# File per-OS/arch file specs for the additions iso (alphabetical order).
#
# We test for the VPOX_WITH_ADDITIONS_ISO.os.arch so that we don't have to
# do the $(if )'ing down where the GUESTADDITIONS_FILESPEC.os.arch down
# in the dependency list and RTIsoMaker command.
#

# Darwin / Mac OS X
## @todo Create .pkg files not run files. The build server shall create a combined packaged, goverend by
# the VPOX_WITH_COMBINED_DARWIN_GUEST_PACKAGE macro.
ifdef VPOX_WITH_ADDITIONS_ISO.darwin.x86
VPOX_PATH_ADDITIONS.darwin.x86 = $(PATH_OUT_BASE)/darwin.x86/$(KBUILD_TYPE)/dist/additions
GUESTADDITIONS_FILESPEC.darwin.x86 = \
	VPoxDarwinAdditionsLegacy.pkg=$(VPOX_PATH_ADDITIONS.darwin.x86)/VPoxGuestAdditions.pkg
 ifndef VPOX_WITH_ADDITIONS_ISO.darwin.amd64
GUESTADDITIONS_FILESPEC.darwin.x86 += \
	VPoxDarwinAdditionsUninstall.tool=$(VPOX_PATH_ADDITIONS.darwin.x86)/VPoxDarwinAdditionsUninstall.tool
 endif
endif

ifdef VPOX_WITH_ADDITIONS_ISO.darwin.amd64
VPOX_PATH_ADDITIONS.darwin.amd64 = $(PATH_OUT_BASE)/darwin.amd64/$(KBUILD_TYPE)/dist/additions
GUESTADDITIONS_FILESPEC.darwin.amd64 = \
	VPoxDarwinAdditions.pkg=$(VPOX_PATH_ADDITIONS.darwin.amd64)/VPoxGuestAdditions.pkg
 ifndef VPOX_WITH_ADDITIONS_ISO.darwin.x86
GUESTADDITIONS_FILESPEC.darwin.amd64 += \
	VPoxDarwinAdditionsUninstall.tool=$(VPOX_PATH_ADDITIONS.darwin.amd64)/VPoxDarwinAdditionsUninstall.tool
 endif
endif

# FreeBSD
ifdef VPOX_WITH_ADDITIONS_ISO.freebsd.amd64
 VPOX_PATH_ADDITIONS.freebsd.amd64 = $(PATH_OUT_BASE)/freebsd.amd64/$(KBUILD_TYPE)/bin/additions
 GUESTADDITIONS_FILESPEC.freebsd.amd64 = \
	VPoxFreeBSDAdditions-amd64.tbz=$(VPOX_PATH_ADDITIONS.freebsd.amd64)/VPoxFreeBSDAdditions.tbz
endif
ifdef VPOX_WITH_ADDITIONS_ISO.freebsd.x86
 VPOX_PATH_ADDITIONS.freebsd.x86 = $(PATH_OUT_BASE)/freebsd.x86/$(KBUILD_TYPE)/bin/additions
 GUESTADDITIONS_FILESPEC.freebsd.x86 = \
	VPoxFreeBSDAdditions-x86.tbz=$(VPOX_PATH_ADDITIONS.freebsd.x86)/VPoxFreeBSDAdditions.tbz
endif

# GNU/Linux
ifdef VPOX_WITH_ADDITIONS_ISO.linux.amd64
 VPOX_PATH_ADDITIONS.linux.amd64 = $(PATH_OUT_BASE)/linux.amd64/$(KBUILD_TYPE)/bin/additions
 ifdef VPOX_WITH_COMBINED_LINUX_GUEST_PACKAGE
  VPOX_LNX_ADD_AMD64_RUN_PKG=VPoxLinuxAdditions.run
 else
  VPOX_LNX_ADD_AMD64_RUN_PKG=VPoxLinuxAdditions-amd64.run
 endif
 GUESTADDITIONS_FILESPEC.linux.amd64 = \
	$(VPOX_LNX_ADD_AMD64_RUN_PKG)=$(VPOX_PATH_ADDITIONS.linux.amd64)/VPoxLinuxAdditions.run
endif
ifdef VPOX_WITH_ADDITIONS_ISO.linux.x86
 VPOX_PATH_ADDITIONS.linux.x86 = $(PATH_OUT_BASE)/linux.x86/$(KBUILD_TYPE)/bin/additions
## @todo 64-bit additions: rename this package, update docs (?) and tests (?). create wrapper? create gnome/kde autorun app (xplatform) ?
 ifdef VPOX_WITH_COMBINED_LINUX_GUEST_PACKAGE
  VPOX_LNX_ADD_X86_RUN_PKG=VPoxLinuxAdditions.run
 else
  VPOX_LNX_ADD_X86_RUN_PKG=VPoxLinuxAdditions-x86.run
 endif
 GUESTADDITIONS_FILESPEC.linux.x86 = \
	$(VPOX_LNX_ADD_X86_RUN_PKG)=$(VPOX_PATH_ADDITIONS.linux.x86)/VPoxLinuxAdditions.run \
	runasroot.sh=$(VPOX_PATH_ADDITIONS.linux.x86)/runasroot.sh \
	autorun.sh=$(VPOX_PATH_ADDITIONS.linux.x86)/autorun.sh
endif

# IBM OS/2
ifdef VPOX_WITH_ADDITIONS_ISO.os2.x86
 VPOX_PATH_ADDITIONS.os2.x86 = $(PATH_OUT_BASE)/os2.x86/$(KBUILD_TYPE)/bin/additions
 GUESTADDITIONS_FILESPEC.os2.x86 = \
	OS2/VPoxGuest.sys=$(VPOX_PATH_ADDITIONS.os2.x86)/VPoxGuest.sys \
	OS2/VPoxSF.ifs=$(VPOX_PATH_ADDITIONS.os2.x86)/VPoxSF.ifs\
	OS2/VPoxService.exe=$(VPOX_PATH_ADDITIONS.os2.x86)/VPoxService.exe \
	OS2/VPoxControl.exe=$(VPOX_PATH_ADDITIONS.os2.x86)/VPoxControl.exe \
	OS2/VPoxReplaceDll.exe=$(VPOX_PATH_ADDITIONS.os2.x86)/VPoxReplaceDll.exe \
	OS2/libc06.dll=$(VPOX_PATH_ADDITIONS.os2.x86)/libc06.dll \
	OS2/libc061.dll=$(VPOX_PATH_ADDITIONS.os2.x86)/libc061.dll \
	OS2/libc062.dll=$(VPOX_PATH_ADDITIONS.os2.x86)/libc062.dll \
	OS2/libc063.dll=$(VPOX_PATH_ADDITIONS.os2.x86)/libc063.dll \
	OS2/libc064.dll=$(VPOX_PATH_ADDITIONS.os2.x86)/libc064.dll \
	OS2/libc065.dll=$(VPOX_PATH_ADDITIONS.os2.x86)/libc065.dll \
	OS2/libc066.dll=$(VPOX_PATH_ADDITIONS.os2.x86)/libc066.dll \
	OS2/readme.txt=$(VPOX_PATH_ADDITIONS.os2.x86)/readme.txt \
       \
	OS2/gengradd.dll=$(VPOX_PATH_ADDITIONS.os2.x86)/gengradd.dll \
	OS2/vpoxmouse.sys=$(VPOX_PATH_ADDITIONS.os2.x86)/vpoxmouse.sys
endif

# Oracle Solaris.
ifdef VPOX_WITH_ADDITIONS_ISO.solaris.amd64
 VPOX_PATH_ADDITIONS.solaris.amd64 = $(PATH_OUT_BASE)/solaris.amd64/$(KBUILD_TYPE)/bin/additions
 GUESTADDITIONS_FILESPEC.solaris.amd64 = \
	VPoxSolarisAdditions-amd64.pkg=$(VPOX_PATH_ADDITIONS.solaris.amd64)/VPoxSolarisAdditions.pkg
endif
ifdef VPOX_WITH_ADDITIONS_ISO.solaris.x86
 VPOX_PATH_ADDITIONS.solaris.x86 = $(PATH_OUT_BASE)/solaris.x86/$(KBUILD_TYPE)/bin/additions
 GUESTADDITIONS_FILESPEC.solaris.x86 = \
	VPoxSolarisAdditions-x86.pkg=$(VPOX_PATH_ADDITIONS.solaris.x86)/VPoxSolarisAdditions.pkg
endif
ifdef VPOX_WITH_COMBINED_SOLARIS_GUEST_PACKAGE
 # Build combined 32bit and 64bit solaris additions, not just a single arch.
 # This assumes that the 32bit build directory contains the combined additions
 # for 32bit and 64bit solaris. This just modifies variables set above.
 GUESTADDITIONS_FILESPEC.solaris.x86 = \
	VPoxSolarisAdditions.pkg=$(VPOX_PATH_ADDITIONS.solaris.x86)/VPoxSolarisAdditions.pkg
 GUESTADDITIONS_FILESPEC.solaris.amd64 =
endif

# Microsoft Windows.
ifdef VPOX_WITH_ADDITIONS_ISO.win.amd64
 VPOX_PATH_ADDITIONS.win.amd64 = $(PATH_OUT_BASE)/win.amd64/$(KBUILD_TYPE)/bin/additions
 VPOX_PATH_ADDITIONS.win = $(VPOX_PATH_ADDITIONS.win.amd64)
 GUESTADDITIONS_FILESPEC.win.amd64 = \
	VPoxWindowsAdditions-amd64.exe=$(VPOX_PATH_ADDITIONS.win.amd64)/VPoxWindowsAdditions-amd64.exe
 ifndef VPOX_WITH_ADDITIONS_ISO.win.x86
  GUESTADDITIONS_FILESPEC.win.amd64 += \
	cert/VPoxCertUtil.exe=$(VPOX_PATH_ADDITIONS.win.amd64)/VPoxCertUtil.exe
 endif
endif

ifdef VPOX_WITH_ADDITIONS_ISO.win.x86
 VPOX_PATH_ADDITIONS.win.x86 = $(PATH_OUT_BASE)/win.x86/$(KBUILD_TYPE)/bin/additions
 VPOX_PATH_ADDITIONS.win = $(VPOX_PATH_ADDITIONS.win.x86)
 GUESTADDITIONS_FILESPEC.win.x86 = \
	VPoxWindowsAdditions-x86.exe=$(VPOX_PATH_ADDITIONS.win.x86)/VPoxWindowsAdditions-x86.exe \
	VPoxWindowsAdditions.exe=$(VPOX_PATH_ADDITIONS.win.x86)/VPoxWindowsAdditions.exe \
	AUTORUN.INF=$(VPOX_PATH_ADDITIONS_SRC)/WINNT/Installer/ISO/AUTORUN.INF \
	cert/VPoxCertUtil.exe=$(VPOX_PATH_ADDITIONS.win.x86)/VPoxCertUtil.exe \
	NT3x/Readme.txt=$(VPOX_PATH_ADDITIONS_SRC)/WINNT/Installer/ISO/NT3xReadme.txt \
	NT3x/VPoxGuest.sys=$(VPOX_PATH_ADDITIONS.win.x86)/VPoxGuest.sys \
	$(if-expr defined(VPOX_SIGN_ADDITIONS),NT3x/VPoxGuest.cat=$(VPOX_PATH_ADDITIONS.win.x86)/VPoxGuest.cat,) \
	NT3x/VPoxGuest.inf=$(VPOX_PATH_ADDITIONS.win.x86)/VPoxGuest.inf \
	NT3x/VPoxMouseNT.sys=$(VPOX_PATH_ADDITIONS.win.x86)/VPoxMouseNT.sys \
	NT3x/VPoxMouse.inf=$(VPOX_PATH_ADDITIONS.win.x86)/VPoxMouse.inf \
	$(if-expr defined(VPOX_SIGN_ADDITIONS),NT3x/VPoxMouse.cat=$(VPOX_PATH_ADDITIONS.win.x86)/VPoxMouse.cat,) \
	NT3x/VPoxMouse.sys=$(VPOX_PATH_ADDITIONS.win.x86)/VPoxMouse.sys \
	NT3x/VPoxControl.exe=$(VPOX_PATH_ADDITIONS.win.x86)/VPoxControl.exe \
	NT3x/VPoxService.exe=$(VPOX_PATH_ADDITIONS.win.x86)/VPoxService.exe
endif # win.x86

if defined(VPOX_WITH_ADDITIONS_ISO.win.amd64) || defined(VPOX_WITH_ADDITIONS_ISO.win.x86)
 ifndef VPOX_SIGNING_MODE
  GUESTADDITIONS_FILESPEC.win =
 else if !defined(VPOX_CERTIFICATE_SHA2_SUBJECT_NAME) && !$(intersects win all 1,$(VPOX_WITH_CORP_CODE_SIGNING))
  GUESTADDITIONS_FILESPEC.win = cert/vpox.cer=$(VPOX_PATH_ADDITIONS.win)/vpox.cer
 else
  GUESTADDITIONS_FILESPEC.win = \
  	cert/vpox-sha1.cer=$(VPOX_PATH_ADDITIONS.win)/vpox-sha1.cer \
  	cert/vpox-sha256.cer=$(VPOX_PATH_ADDITIONS.win)/vpox-sha256.cer
  if $(intersects win_planb,$(VPOX_WITH_CORP_CODE_SIGNING))
   GUESTADDITIONS_FILESPEC.win += cert/vpox-sha256-r3.cer=$(VPOX_PATH_ADDITIONS.win)/vpox-sha256-r3.cer
  endif
 endif
 ifdef VPOX_WITH_VPOX_LEGACY_TS_CA
  GUESTADDITIONS_FILESPEC.win += cert/vpox-legacy-timestamp-ca.cer=$(VPOX_PATH_ADDITIONS.win)/vpox-legacy-timestamp-ca.cer
 endif
 GUESTADDITIONS_FILESPEC.win += windows11-bypass.reg=$(VPOX_PATH_ADDITIONS_SRC)/WINNT/tools/windows11-bypass.reg
endif

# haiku
ifdef VPOX_WITH_ADDITIONS_ISO.haiku.x86
 VPOX_PATH_ADDITIONS.haiku.x86 = $(PATH_OUT_BASE)/haiku.x86/$(KBUILD_TYPE)/bin/additions
 # or bfs?
 GUESTADDITIONS_FILESPEC.haiku.x86 = \
	VPoxHaikuAdditions-x86.run=$(VPOX_PATH_ADDITIONS.haiku.x86)/VPoxHaikuAdditions-x86.run
endif

# For the iso rule.
GUESTADDITIONS_FILESPEC_ALL = \
	$(GUESTADDITIONS_FILESPEC.win) \
	$(GUESTADDITIONS_FILESPEC.win.x86) \
	$(GUESTADDITIONS_FILESPEC.win.amd64) \
	$(GUESTADDITIONS_FILESPEC.solaris.x86) \
	$(GUESTADDITIONS_FILESPEC.solaris.amd64) \
	$(GUESTADDITIONS_FILESPEC.os2.x86) \
	$(GUESTADDITIONS_FILESPEC.linux.x86) \
	$(GUESTADDITIONS_FILESPEC.linux.amd64) \
	$(GUESTADDITIONS_FILESPEC.freebsd.x86) \
	$(GUESTADDITIONS_FILESPEC.freebsd.amd64) \
	$(GUESTADDITIONS_FILESPEC.haiku.x86) \
	$(GUESTADDITIONS_FILESPEC.darwin.x86) \
	$(GUESTADDITIONS_FILESPEC.darwin.amd64)

#
# Build the Guest Additions ISO image.
#
ifndef VPOX_WITHOUT_ADDITIONS_ISO
$(VPOX_PATH_ADDITIONS_ISO)/VPoxGuestAdditions.iso: \
		$(filter-out %=deleteme=,$(subst =,=deleteme= , $(GUESTADDITIONS_FILESPEC_ALL))) \
		$(VPOX_SVN_REV_KMK) \
		$(VPOX_PATH_ADDITIONS_SRC)/Makefile.kmk \
		| $(if-expr defined(VPOX_USE_RTISOMAKER),$(VPOX_RTISOMAKER),)
	$(call MSG_TOOL,RTIsoMaker,,$@)
	$(QUIET)$(MKDIR) -p $(@D)
	$(VPOX_RTISOMAKER) \
		--output $@ \
		--iso-level 3 \
		--rock-ridge \
		--joliet \
		--rational-attribs \
		--random-order-verification 2048 \
		$(addprefix /,$(GUESTADDITIONS_FILESPEC_ALL)) \
		$(foreach spec, $(filter %.run %.sh %.tool,$(GUESTADDITIONS_FILESPEC_ALL)) \
			, --chmod a+x:/$(substr $(spec), 1, $(expr $(pos =,$(spec)) - 1))) \
		--volume-id="VPOXADDITIONS_$(VPOX_VERSION_STRING_RAW)_$(VPOX_SVN_REV)" \
		--name-setup=joliet \
		--volume-id="VPox_GAs_$(VPOX_VERSION_STRING_RAW)"

$(VPOX_PATH_ADDITIONS_ISO)/VPoxGuestAdditions.zip: $(VPOX_PATH_ADDITIONS_ISO)/VPoxGuestAdditions.iso
	$(call MSG_L1,Zipping image $@)
	$(QUIET)$(RM) -f $@
	$(QUIET)$(REDIRECT) -C $(VPOX_PATH_ADDITIONS_ISO) -- $(VPOX_ZIP) -9 $@ $(notdir $^)

# Alias for creating the iso.
.PHONY: additions-iso
additions-iso: $(VPOX_PATH_ADDITIONS_ISO)/VPoxGuestAdditions.iso

endif

