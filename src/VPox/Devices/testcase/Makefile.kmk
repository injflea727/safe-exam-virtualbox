# $Id: Makefile.kmk $
## @file
# Sub-Makefile for the device testcases.
#

#
# Copyright (C) 2006-2020 Oracle Corporation
#
# This file is part of VirtualPox Open Source Edition (OSE), as
# available from http://www.virtualpox.org. This file is free software;
# you can redistribute it and/or modify it under the terms of the GNU
# General Public License (GPL) as published by the Free Software
# Foundation, in version 2 as it comes in the "COPYING" file of the
# VirtualPox OSE distribution. VirtualPox OSE is distributed in the
# hope that it will be useful, but WITHOUT ANY WARRANTY of any kind.
#

SUB_DEPTH = ../../../..
include $(KBUILD_PATH)/subheader.kmk

#
# Globals
#
VPOX_PATH_DEVICES_SRC ?= $(PATH_ROOT)/src/VPox/Devices
VPOX_PATH_VMM_DEVICES_SRC ?= $(PATH_ROOT)/src/VPox/VMM/include
VPOX_DEVICES_TEST_OUT_DIR := $(PATH_TARGET)/Devices/testcase
BLDDIRS += $(VPOX_DEVICES_TEST_OUT_DIR)

VPOX_DEVICES_TESTS_FEATURES = \
	$(if $(VPOX_WITH_AHCI),VPOX_WITH_AHCI,) \
	$(if $(VPOX_WITH_BUSLOGIC),VPOX_WITH_BUSLOGIC,) \
	$(if $(VPOX_WITH_E1000),VPOX_WITH_E1000,) \
	$(if $(VPOX_WITH_EHCI_IMPL),VPOX_WITH_EHCI_IMPL,) \
	$(if $(VPOX_WITH_HGSMI),VPOX_WITH_HGSMI,) \
	$(if $(VPOX_WITH_HP_HDA),VPOX_WITH_HP_HDA,) \
	$(if $(VPOX_WITH_INTEL_HDA),VPOX_WITH_INTEL_HDA,) \
	$(if $(VPOX_WITH_NVIDIA_HDA),VPOX_WITH_NVIDIA_HDA,) \
	$(if $(VPOX_WITH_LSILOGIC),VPOX_WITH_LSILOGIC,) \
	$(if $(VPOX_WITH_NVME_IMPL),VPOX_WITH_NVME_IMPL,) \
	$(if $(VPOX_WITH_PCI_PASSTHROUGH_IMPL),VPOX_WITH_PCI_PASSTHROUGH_IMPL,) \
	$(if $(VPOX_WITH_RAW_MODE),VPOX_WITH_RAW_MODE,) \
	$(if $(VPOX_WITH_SCSI),VPOX_WITH_SCSI,) \
	$(if $(VPOX_WITH_USB),VPOX_WITH_USB,) \
	$(if $(VPOX_WITH_VDMA),VPOX_WITH_VDMA,) \
	$(if $(VPOX_WITH_VIDEOHWACCEL),VPOX_WITH_VIDEOHWACCEL,) \
	$(if $(VPOX_WITH_VIRTIO),VPOX_WITH_VIRTIO,) \
	$(if $(VPOX_WITH_VMSVGA),VPOX_WITH_VMSVGA,) \
	$(if $(VPOX_WITH_WDDM),VPOX_WITH_WDDM,) \
	$(if $(VPOX_WITH_XHCI_IMPL),VPOX_WITH_XHCI_IMPL,) \
       $(VPOX_AUDIO_DEFS) \
       $(VMM_COMMON_DEFS)

#
# We setup one 'other' target for executing the structure & alignment
# validation testcases. Perhaps a bit hackish, but extremely useful.
#
ifeq ($(KBUILD_TARGET),$(KBUILD_HOST))
 ifeq ($(filter-out x86.x86 amd64.amd64 x86.amd64, $(KBUILD_TARGET_ARCH).$(KBUILD_HOST_ARCH)),)
  OTHERS += \
	$(VPOX_DEVICES_TEST_OUT_DIR)/tstDeviceStructSize.run
 endif
endif

# The normal testing pass.
TESTING += \
	$(VPOX_DEVICES_TEST_OUT_DIR)/tstDeviceStructSize.run

ifdef VPOX_WITH_RAW_MODE
 #
 # The testcase generator.
 #
 PROGRAMS += tstDeviceStructSizeRC
 tstDeviceStructSizeRC_TEMPLATE  = VPoxRcExe
 tstDeviceStructSizeRC_DEFS      = $(VPOX_DEVICES_TESTS_FEATURES)
 tstDeviceStructSizeRC_SOURCES   = tstDeviceStructSizeRC.cpp
 tstDeviceStructSizeRC_INCS      = \
 	$(VPOX_PATH_DEVICES_SRC)/build \
 	$(VPOX_PATH_DEVICES_SRC)/Bus \
 	$(VPOX_DEVICES_TEST_OUT_DIR) \
 	$(VPOX_GRAPHICS_INCS)
 tstDeviceStructSizeRC_INCS     += $(VPOX_PATH_VMM_DEVICES_SRC)
endif # VPOX_WITH_RAW_MODE

#
# The testcase it self.
#
PROGRAMS += tstDeviceStructSize
tstDeviceStructSize_TEMPLATE = VPOXR3AUTOTST
tstDeviceStructSize_DEFS     = $(VPOX_DEVICES_TESTS_FEATURES)
tstDeviceStructSize_INCS     = \
	$(VPOX_PATH_DEVICES_SRC)/build \
	$(VPOX_PATH_DEVICES_SRC)/Bus \
	$(VPOX_DEVICES_TEST_OUT_DIR) \
	$(VPOX_GRAPHICS_INCS)
tstDeviceStructSize_SOURCES  = tstDeviceStructSize.cpp
tstDeviceStructSize_CLEAN    = \
	$(VPOX_DEVICES_TEST_OUT_DIR)/tstDeviceStructSizeRC.h \
	$(VPOX_DEVICES_TEST_OUT_DIR)/tstDeviceStructSize.run
ifdef VPOX_WITH_RAW_MODE
 tstDeviceStructSize.cpp_DEPS = $(VPOX_DEVICES_TEST_OUT_DIR)/tstDeviceStructSizeRC.h
endif
 tstDeviceStructSize_INCS     += $(VPOX_PATH_VMM_DEVICES_SRC)

#
# Run rule for tstDeviceStructSize.
#

# 1. Dump selected structure in the VMMRC.rc debug info.
# 2. Generate a testcase from the dump
## future

ifdef VPOX_WITH_RAW_MODE
# 1&2. Manually dump selected structures and members.
$(VPOX_DEVICES_TEST_OUT_DIR)/tstDeviceStructSizeRC.h: $$(tstDeviceStructSizeRC_1_STAGE_TARGET) | $$(dir $$@)
	$(call MSG_GENERATE,,$@)
	$(QUIET)$(REDIRECT) -wo $@ -- $^
endif

# 3. run it.
$(VPOX_DEVICES_TEST_OUT_DIR)/tstDeviceStructSize.run: $$(tstDeviceStructSize_1_STAGE_TARGET) | $$(dir $$@)
	$(QUIET)$(RM) -f $@
	$^
	$(QUIET)$(APPEND) "$@" "done"

# alias for the struct test.
run-struct-tests: $(VPOX_DEVICES_TEST_OUT_DIR)/tstDeviceStructSize.run


include $(FILE_KBUILD_SUB_FOOTER)

