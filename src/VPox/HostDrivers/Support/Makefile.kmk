# $Id: Makefile.kmk $
## @file
# Sub-Makefile for the support library and the drivers/modules/kexts it uses.
#

#
# Copyright (C) 2006-2020 Oracle Corporation
#
# This file is part of VirtualPox Open Source Edition (OSE), as
# available from http://www.virtualpox.org. This file is free software;
# you can redistribute it and/or modify it under the terms of the GNU
# General Public License (GPL) as published by the Free Software
# Foundation, in version 2 as it comes in the "COPYING" file of the
# VirtualPox OSE distribution. VirtualPox OSE is distributed in the
# hope that it will be useful, but WITHOUT ANY WARRANTY of any kind.
#
# The contents of this file may alternatively be used under the terms
# of the Common Development and Distribution License Version 1.0
# (CDDL) only, as it comes in the "COPYING.CDDL" file of the
# VirtualPox OSE distribution, in which case the provisions of the
# CDDL are applicable instead of those of the GPL.
#
# You may elect to license modified versions of this file under the
# terms and conditions of either the GPL or the CDDL or both.
#

SUB_DEPTH = ../../../..
include $(KBUILD_PATH)/subheader.kmk

#
# Globals.
#
VPOX_PATH_SUP_SRC            := $(PATH_SUB_CURRENT)
VPOX_PATH_SUPR3_CERTIFICATES := $(PATH_SUB_CURRENT)/Certificates
VPOX_PATH_RUNTIME_SRC        ?= $(PATH_ROOT)/src/VPox/Runtime


#
# Targets
#
LIBRARIES += SUPR3 SUPR3Static
if   defined(VPOX_WITH_HARDENING) \
 && !defined(VPOX_ONLY_VALIDATIONKIT)
 LIBRARIES += SUPR3HardenedStatic
endif
DLLS.win += VPoxSupLib
ifdef VPOX_WITH_32_ON_64_MAIN_API
 LIBRARIES += SUPR3-x86
endif
if !defined(VPOX_ONLY_DOCS)
 if1of ($(VPOX_LDR_FMT), pe lx macho)
  LIBRARIES += SUPR0
 endif
endif
if !defined(VPOX_ONLY_BUILD) && defined(VPOX_WITH_RAW_MODE)
 LIBRARIES += SUPRC
endif
if  !defined(VPOX_ONLY_DOCS) \
 && !defined(VPOX_ONLY_EXTPACKS) \
 && !defined(VPOX_ONLY_VALIDATIONKIT) \
 && "$(intersects $(KBUILD_TARGET_ARCH),$(VPOX_SUPPORTED_HOST_ARCHS))" != ""
 ifdef VPOX_WITH_SUPSVC
  PROGRAMS += VPoxSupSvc
 endif
 ifdef VPOX_WITH_VPOXDRV
  LIBRARIES       += SUPR0IdcClient
  SYSMODS.os2     += VPoxDrv
 endif
 INSTALLS.linux   += vpoxdrv-src
 INSTALLS.freebsd += vpoxdrv-src

 #
 # Include sub-makefile(s).
 #
 include $(PATH_SUB_CURRENT)/testcase/Makefile.kmk

 #
 # Populate FILES_VPOXDRV_NOBIN and FILES_VPOXDRV_BIN
 #
 ifeq ($(KBUILD_TARGET),linux)
  include $(PATH_SUB_CURRENT)/linux/files_vpoxdrv
 endif
 ifeq ($(KBUILD_TARGET),freebsd)
  include $(PATH_SUB_CURRENT)/freebsd/files_vpoxdrv
 endif
endif # !VPOX_ONLY_DOCS && !VPOX_ONLY_EXTPACKS && !VPOX_ONLY_VALIDATIONKIT

#
# Authenticode related trust anchors and certificates -> .cpp
#
VPOX_SUP_WIN_CERTS_FILE = $(SUPR3_0_OUTDIR)/TrustAnchorsAndCerts.cpp
VPOX_SUP_WIN_CERTS := \
       SpcRootMicrosoft0=SpcRoot-MicrosoftAuthenticodeTmRootAuthority-01.taf \
       SpcRootMicrosoft1=SpcRoot-MicrosoftRootAuthority-00c1008b3c3c8811d13ef663ecdf40.taf \
       SpcRootMicrosoft2=SpcRoot-MicrosoftRootCertificateAuthority-79ad16a14aa0a5ad4c7358f407132e65.taf \
       SpcRootMicrosoft3=SpcRoot-MicrosoftRootCertificateAuthority2010-28cc3a25bfba44ac449a9b586b4339aa.taf \
       SpcRootMicrosoft4=SpcRoot-MicrosoftRootCertificateAuthority2011-3f8bc8b5fc9fb29643b569d66c42e144.taf \
       SpcRootMicrosoft5=SpcRoot-MicrosoftDigitalMediaAuthority2005-6eff330eb6e7569740680870104baaba.taf \
       SpcRootMicrosoft6=SpcRoot-MicrosoftDevelopmentRootCertificateAuthority2014-078f0a9d03df119e434e4fec1bf0235a.taf \
       SpcRootMicrosoft7=SpcRoot-MicrosoftTestingRootCertificateAuthority2010-8a334aa8052dd244a647306a76b8178fa215f344.taf \
       NtRootMicrosoft8=NtRoot-MicrosoftCodeVerificationRoot-729404101f3e0ca347837fca175a8438.taf \
       TimeRootMicrosoft0=Timestamp-CopyrightC1997MicrosoftCorp-01.taf \
       TimeRootOracle0=Timestamp-VPoxLegacyWinCA.taf \
       TrustedCertVPox0=Trusted-OracleCorporationVirtualPox-05308b76ac2e15b29720fb4395f65f38.taf \
       AppleRoot0=AppleRoot-2bd06947947609fef46b8d2e40a6f7474d7f085e.taf \
       AppleRoot1=AppleRoot-G2-c499136c1803c27bc0a3a00d7f72807a1c77268d.taf
# Hack Alert! Because the DigiCert cross signing certificate we use expired 2020-04-15, we add it as a trusted NT kernel
#             signing root instead, so we can bypass the expiry check in IPRT.  NtRootMicrosoft8 is the one found in the
#             6.1.20 extpack, NtRootMicrosoft9 is the one bird uses at home.
VPOX_SUP_WIN_CERTS += NtRootDigiCert8=NtRoot-CrossSign-DigiCertAssuredIDRootCA-589567a6c1944d68f11ff3d86576092b.taf
VPOX_SUP_WIN_CERTS += NtRootDigiCert9=NtRoot-CrossSign-DigiCertHighAssuranceEVRootCA-f4a38dbe86386c554d25f1ce2557a4fe.taf

VPOX_SUP_WIN_CERT_NAMES := $(foreach cert,$(VPOX_SUP_WIN_CERTS),$(firstword $(subst =,$(SPACE) ,$(cert))))

# 1=name, 2=filter, 3=buildcert?.
if "$(KBUILD_TARGET)" == "win" && defined(VPOX_WITH_HARDENING)
 VPOX_SUP_GEN_CERT_MACRO = 'SUPTAENTRY const g_aSUP$(1)TAs[] =' '{' \
       $(if-expr "$(3)" == "",,'    SUPTAENTRY_GEN(g_abSUPBuildCert),') \
	$(foreach certnm,$(filter $(2),$(VPOX_SUP_WIN_CERT_NAMES)), '    SUPTAENTRY_GEN(g_abSUP$(certnm)),') \
	'};' 'unsigned const g_cSUP$(1)TAs = RT_ELEMENTS(g_aSUP$(1)TAs);' '' ''
else
 VPOX_SUP_GEN_CERT_MACRO = 'SUPTAENTRY const g_aSUP$(1)TAs[] =' '{' \
	$(foreach certnm,$(filter $(2),$(VPOX_SUP_WIN_CERT_NAMES)), '    SUPTAENTRY_GEN(g_abSUP$(certnm)),') \
	'};' 'unsigned const g_cSUP$(1)TAs = RT_ELEMENTS(g_aSUP$(1)TAs);' '' ''
endif

if  ("$(KBUILD_TARGET)" == "win"    && defined(VPOX_SIGNING_MODE)) \
 || ("$(KBUILD_TARGET)" == "darwin" && defined(VPOX_WITH_DARWIN_R0_DARWIN_IMAGE_VERIFICATION) && defined(VPOX_SIGNING_MODE))
 BLDPROGS += bldSUPSignedDummy
 bldSUPSignedDummy_TEMPLATE         = VPoxBldProg
 bldSUPSignedDummy_SOURCES          = bldSUPSignedDummy.cpp
 bldSUPSignedDummy_ORDERDEPS.win    = $(VPOX_SIGN_IMAGE_ORDERDEPS)
 bldSUPSignedDummy_POST_CMDS.win    = $(call VPOX_SIGN_IMAGE_FN,$(out),,2)
 bldSUPSignedDummy_POST_CMDS.darwin = $(call VPOX_SIGN_MACHO_FN,$(out),org.virtualpox.org.bldtool.$(target))
endif

$$(VPOX_SUP_WIN_CERTS_FILE): $(MAKEFILE_CURRENT) \
		$(foreach cert,$(VPOX_SUP_WIN_CERTS),$(VPOX_PATH_SUPR3_CERTIFICATES)/$(lastword $(subst =,$(SPACE) ,$(cert)))) \
		$(VPOX_BIN2C) \
		$(if-expr defined(bldSUPSignedDummy_SOURCES),$(VPOX_RTSIGNTOOL) $$(bldSUPSignedDummy_1_TARGET),) \
		| $$(dir $$@)
	$(QUIET)$(RM) -f -- $@ $@.cer
	$(QUIET)$(APPEND) -n "$@" \
       	'' \
       	'#include <VPox/sup.h>' \
               ''
	$(foreach cert,$(VPOX_SUP_WIN_CERTS), $(NLTAB)$(VPOX_BIN2C) -ascii --append --static --no-size \
		"SUP$(firstword $(subst =,$(SP) ,$(cert)))" \
		"$(VPOX_PATH_SUPR3_CERTIFICATES)/$(lastword $(subst =,$(SP) ,$(cert)))" \
		"$@")
# The build certificate.
ifdef bldSUPSignedDummy_SOURCES
	$(VPOX_RTSIGNTOOL) extract-exe-signer-cert --exe "$(bldSUPSignedDummy_1_TARGET)" --output "$@.cer" --der
	$(VPOX_BIN2C) -ascii --append SUPBuildCert "$@.cer" $@
	$(QUIET)$(RM) -f -- $@.cer
endif
# Generate certificate lists.
	$(QUIET)$(APPEND) -n "$@" '' \
		$(call VPOX_SUP_GEN_CERT_MACRO,All,%,build) \
		$(call VPOX_SUP_GEN_CERT_MACRO,SpcRoot,SpcRoot%) \
		$(call VPOX_SUP_GEN_CERT_MACRO,NtKernelRoot,NtRoot%) \
		$(call VPOX_SUP_GEN_CERT_MACRO,Timestamp,TimeRoot%) \
		$(call VPOX_SUP_GEN_CERT_MACRO,AppleRoot,AppleRoot%) \
		$(call VPOX_SUP_GEN_CERT_MACRO,Trusted,TrustedCert%,build)

OTHER_CLEAN += $(VPOX_SUP_WIN_CERTS_FILE)

tst: $(VPOX_SUP_WIN_CERTS_FILE)


#
# The Ring-3 Support Library (this is linked into the IPRT dll, VPoxRT).
#
SUPR3_TEMPLATE      = VPOXR3
SUPR3_DEFS          = \
	IN_SUP_R3 IN_RT_R3 \
	$(if $(VPOX_WITH_SUPSVC),VPOX_WITH_SUPSVC) \
	$(if $(VPOX_WITH_MAIN),VPOX_WITH_MAIN,) \
	$(if $(VPOX_WITH_RAW_MODE),VPOX_WITH_RAW_MODE,) \
	VPOX_PERMIT_MORE \
	VPOX_PERMIT_EVEN_MORE
SUPR3_INCS         := $(PATH_SUB_CURRENT)
SUPR3_SOURCES       = \
	SUPLib.cpp \
	SUPLibLdr.cpp \
	SUPLibSem.cpp \
	SUPLibTracerA.asm \
	SUPLibAll.cpp \
	SUPR3HardenedIPRT.cpp \
	SUPR3HardenedVerify.cpp \
	$(KBUILD_TARGET)/SUPLib-$(KBUILD_TARGET).cpp \
 	$(VPOX_SUP_WIN_CERTS_FILE)
ifdef VPOX_WITH_HARDENING
 SUPR3_SOURCES.win  = \
 	win/SUPHardenedVerifyImage-win.cpp
endif

SUPR3-x86_TEMPLATE = VPoxR3Dll-x86
SUPR3-x86_EXTENDS  = SUPR3


#
# Static version of SUPR3.  This is more of a stub than anything else in a
# hardened build, at least on windows.
#
SUPR3Static_TEMPLATE = VPOXR3STATIC
SUPR3Static_EXTENDS = SUPR3
SUPR3Static_DEFS = $(SUPR3_DEFS) IN_SUP_R3_STATIC
SUPR3Static_SOURCES.win = $(filter-out win/SUPHardenedVerifyImage-win.cpp, $(SUPR3_SOURCES.win))


#
# The static part of the hardened support library (ring-3).
#
SUPR3HardenedStatic_TEMPLATE = VPOXR3HARDENEDLIB
SUPR3HardenedStatic_DEFS     = IN_SUP_HARDENED_R3
SUPR3HardenedStatic_DEFS    += \
	$(if $(VPOX_WITH_SUPSVC),VPOX_WITH_SUPSVC,) \
	$(if $(VPOX_WITH_MAIN),VPOX_WITH_MAIN,) \
	$(if $(VPOX_WITH_RAW_MODE),VPOX_WITH_RAW_MODE,) \
	$(if $(VPOX_WITHOUT_DEBUGGER_CHECKS),VPOX_WITHOUT_DEBUGGER_CHECKS,) \
	$(if $(VPOX_PERMIT_VISUAL_STUDIO_PROFILING),VPOX_PERMIT_VISUAL_STUDIO_PROFILING,) \
	VPOX_PERMIT_MORE \
	VPOX_PERMIT_EVEN_MORE
ifdef VPOX_WITH_VISTA_NO_SP
 SUPR3HardenedStatic_DEFS.win += VPOX_WITH_VISTA_NO_SP
endif
SUPR3HardenedStatic_INCS     = .
SUPR3HardenedStatic_SOURCES  = \
	SUPR3HardenedMain.cpp \
	SUPR3HardenedVerify.cpp \
	SUPR3HardenedNoCrt.cpp \
	$(KBUILD_TARGET)/SUPLib-$(KBUILD_TARGET).cpp
SUPR3HardenedStatic_SOURCES.win = \
	win/SUPR3HardenedMain-win.cpp \
	win/SUPR3HardenedMainA-win.asm \
	win/SUPR3HardenedMainImports-win.cpp \
	win/SUPHardenedVerifyProcess-win.cpp \
	win/SUPHardenedVerifyImage-win.cpp \
	$(VPOX_SUP_WIN_CERTS_FILE)
SUPR3HardenedStatic_SOURCES.x86 += \
	$(VPOX_PATH_RUNTIME_SRC)/common/asm/ASMMemFirstMismatchingU8.asm
SUPR3HardenedStatic_SOURCES.amd64 += \
	$(VPOX_PATH_RUNTIME_SRC)/common/asm/ASMMemFirstMismatchingU8.asm


if "$(KBUILD_TARGET)" == "win" && defined(VPOX_WITH_HARDENING) ## @todo some of this move up.
 SUPR3HardenedStatic_DEFS += \
 	IN_RT_R3 \
 	IN_RT_STATIC \
 	IN_DIS \
	IN_DIS_STATIC \
 	DIS_CORE_ONLY \
  	IPRT_NO_CRT \
 	RT_WITH_NOCRT_ALIASES \
 	LOG_DISABLED \
 	IPRT_NO_ERROR_DATA \
       IPRT_WITHOUT_DIGEST_MD4
 SUPR3HardenedStatic_DEFS.win += LDR_ONLY_PE __STRALIGN_H_

 SUPR3HardenedStatic_INCS += $(PATH_ROOT)/include/iprt/nocrt  $(VPOX_PATH_RUNTIME_SRC)/include

 SUPR3HardenedStatic_SOURCES += \
	$(VPOX_PATH_RUNTIME_SRC)/common/ldr/ldr.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/ldr/ldrEx.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/ldr/ldrPE.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/alloc/heapsimple.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/asn1/asn1-basics.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/asn1/asn1-cursor.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/asn1/asn1-default-allocator.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/asn1/asn1-safer-allocator.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/asn1/asn1-dump.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/asn1/asn1-encode.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/asn1/asn1-ut-bitstring.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/asn1/asn1-ut-bitstring-decode.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/asn1/asn1-ut-boolean.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/asn1/asn1-ut-boolean-decode.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/asn1/asn1-ut-core.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/asn1/asn1-ut-core-decode.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/asn1/asn1-ut-dyntype.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/asn1/asn1-ut-dyntype-decode.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/asn1/asn1-ut-integer.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/asn1/asn1-ut-integer-decode.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/asn1/asn1-ut-null.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/asn1/asn1-ut-null-decode.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/asn1/asn1-ut-objid.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/asn1/asn1-ut-objid-decode.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/asn1/asn1-ut-octetstring.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/asn1/asn1-ut-octetstring-decode.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/asn1/asn1-ut-string.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/asn1/asn1-ut-string-decode.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/asn1/asn1-ut-time.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/asn1/asn1-ut-time-decode.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/crypto/digest-core.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/crypto/digest-builtin.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/crypto/key.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/crypto/pkcs7-asn1-decoder.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/crypto/pkcs7-core.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/crypto/pkcs7-init.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/crypto/pkcs7-sanity.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/crypto/pkcs7-verify.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/crypto/pkix-signature-builtin.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/crypto/pkix-signature-core.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/crypto/pkix-signature-rsa.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/crypto/pkix-verify.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/crypto/pkix-util.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/crypto/rsa-asn1-decoder.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/crypto/rsa-core.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/crypto/rsa-init.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/crypto/rsa-sanity.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/crypto/spc-asn1-decoder.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/crypto/spc-core.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/crypto/spc-init.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/crypto/spc-sanity.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/crypto/x509-asn1-decoder.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/crypto/x509-certpaths.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/crypto/x509-core.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/crypto/x509-init.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/crypto/x509-sanity.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/crypto/x509-verify.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/crypto/store.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/crypto/store-inmem.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/crypto/taf-asn1-decoder.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/crypto/taf-core.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/crypto/taf-init.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/crypto/taf-sanity.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/crypto/tsp-asn1-decoder.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/crypto/tsp-core.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/crypto/tsp-init.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/crypto/tsp-sanity.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/checksum/alt-md2.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/checksum/alt-md5.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/checksum/alt-sha1.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/checksum/alt-sha256.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/checksum/alt-sha512.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/checksum/alt-sha3.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/checksum/md2str.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/checksum/md5str.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/checksum/sha1str.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/checksum/sha256str.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/checksum/sha512str.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/err/errinfo.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/path/RTPathChangeToUnixSlashes.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/path/RTPathExt.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/string/RTUtf16PrintHexBytes.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/string/RTUtf16ICmpAscii.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/string/RTUtf16NICmpAscii.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/string/RTUtf16CatAscii.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/string/RTUtf16CopyAscii.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/string/RTUtf16End.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/string/strstrip.cpp \
       \
	$(VPOX_PATH_RUNTIME_SRC)/common/err/errmsg.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/math/bignum.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/math/bignum-amd64-x86.asm \
	$(VPOX_PATH_RUNTIME_SRC)/common/misc/RTAssertMsg1Weak.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/misc/RTAssertMsg2.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/misc/RTAssertMsg2Weak.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/misc/RTAssertMsg2WeakV.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/misc/zero.asm \
	$(VPOX_PATH_RUNTIME_SRC)/common/path/RTPathAbsEx.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/path/RTPathFilename.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/path/RTPathParse.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/path/RTPathParsedReassemble.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/string/memchr.asm \
	$(VPOX_PATH_RUNTIME_SRC)/common/string/memcmp.asm \
	$(VPOX_PATH_RUNTIME_SRC)/common/string/memcpy.asm \
	$(VPOX_PATH_RUNTIME_SRC)/common/string/memmove.asm \
	$(VPOX_PATH_RUNTIME_SRC)/common/string/mempcpy.asm \
	$(VPOX_PATH_RUNTIME_SRC)/common/string/memset.asm \
	$(VPOX_PATH_RUNTIME_SRC)/common/string/strversion.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/string/RTStrPrintHexBytes.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/string/RTStrCat.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/string/RTStrCmp.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/string/RTStrCopy.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/string/RTStrICmpAscii.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/string/RTStrNCmp.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/string/RTStrNLen.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/string/RTUtf16Copy.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/string/RTUtf16NLenEx.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/string/strchr.asm \
	$(VPOX_PATH_RUNTIME_SRC)/common/string/strcmp.asm \
	$(VPOX_PATH_RUNTIME_SRC)/common/string/strcpy.asm \
	$(VPOX_PATH_RUNTIME_SRC)/common/string/strformat.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/string/RTStrFormat.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/string/strformatrt.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/string/strformattype.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/string/strformatnum.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/string/stringalloc.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/string/strlen.asm \
	$(VPOX_PATH_RUNTIME_SRC)/common/string/strncmp.asm \
	$(VPOX_PATH_RUNTIME_SRC)/common/string/strncpy.asm \
	$(VPOX_PATH_RUNTIME_SRC)/common/string/strprintf.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/string/strprintf-ellipsis.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/string/strtonum.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/string/utf-16.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/string/utf-8.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/string/utf-8-case.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/string/unidata-upper.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/string/unidata-lower.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/common/time/time.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/generic/RTAssertShouldPanic-generic.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/generic/RTPathGetCurrentDrive-generic.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/generic/RTPathGetCurrentOnDrive-generic.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/generic/rtStrFormatKernelAddress-generic.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/generic/memsafer-generic.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/generic/uuid-generic.cpp \
       \
	../../Disassembler/DisasmCore.cpp \
	../../Disassembler/DisasmTables.cpp \
	../../Disassembler/DisasmTablesX64.cpp \
	../../Disassembler/DisasmReg.cpp

 SUPR3HardenedStatic_SOURCES.amd64 += \
 	$(VPOX_PATH_RUNTIME_SRC)/common/math/RTUInt128MulByU64.asm \
 	$(VPOX_PATH_RUNTIME_SRC)/win/amd64/ASMGetCS.asm \
 	$(VPOX_PATH_RUNTIME_SRC)/win/amd64/ASMGetSS.asm

 SUPR3HardenedStatic_SOURCES.win += \
 	win/SUPR3HardenedNoCrt-win.cpp \
 	$(VPOX_PATH_RUNTIME_SRC)/nt/RTErrConvertFromNtStatus.cpp \
 	$(VPOX_PATH_RUNTIME_SRC)/nt/RTNtPathFindPossible8dot3Name.cpp \
 	$(VPOX_PATH_RUNTIME_SRC)/nt/RTNtPathExpand8dot3Path.cpp \
 	$(VPOX_PATH_RUNTIME_SRC)/nt/RTNtPathExpand8dot3PathA.cpp \
 	$(VPOX_PATH_RUNTIME_SRC)/r3/nt/pathint-nt.cpp \
 	$(VPOX_PATH_RUNTIME_SRC)/win/RTErrConvertFromWin32.cpp \
	$(VPOX_PATH_RUNTIME_SRC)/win/errmsgwin.cpp

 # Add necessary compiler specific files from libcmt.lib and the lib dir.
 ifeq ($(KBUILD_TARGET),win)
   SUPR3HardenedStatic_VPOX_LIBC_OBJS = chkstk.obj
   ifeq ($(KBUILD_TARGET_ARCH),x86)
    SUPR3HardenedStatic_VPOX_LIBC_OBJS += \
    	alloca16.obj \
    	ulldiv.obj \
    	ulldvrm.obj \
    	ullrem.obj \
    	ullshr.obj \
    	lldiv.obj \
    	lldvrm.obj \
    	llmul.obj \
    	llrem.obj \
    	llshl.obj \
    	llshr.obj \
    	rotl.obj \
    	rotr.obj
   endif
  SUPR3HardenedStatic_SOURCES.win += $(addprefix $(SUPR3HardenedStatic_0_OUTDIR)/,$(SUPR3HardenedStatic_VPOX_LIBC_OBJS))

  $(addprefix $$(SUPR3HardenedStatic_0_OUTDIR)/,$(SUPR3HardenedStatic_VPOX_LIBC_OBJS)): \
		$$(PATH_TOOL_$(TEMPLATE_VPOXR3EXE_TOOL.win.$(KBUILD_TARGET_ARCH))_LIB)/libcmt.lib | $$(dir $$@)
	$(TOOL_$(TEMPLATE_VPOXR3HARDENEDEXE_TOOL.win.$(KBUILD_TARGET_ARCH))_AR) "$<" \
		/EXTRACT:`$(TOOL_$(TEMPLATE_VPOXR3HARDENEDEXE_TOOL.win.$(KBUILD_TARGET_ARCH))_AR) "$<" /LIST \
		          | $(SED_EXT) -n -e '/[\\/:]$(notdir $@)/p'` \
		"/OUT:$@"
 endif
endif

# macOS specifics.
ifeq ($(KBUILD_TARGET),darwin)
 SUPR3HardenedStatic_DEFS += \
 	LOG_DISABLED

 SUPR3HardenedStatic_INCS += $(VPOX_PATH_RUNTIME_SRC)/include

 SUPR3HardenedStatic_SOURCES += \
 	darwin/SUPR3HardenedMain-darwin.cpp \
       \
 	$(VPOX_PATH_RUNTIME_SRC)/common/misc/RTAssertMsg1Weak.cpp \
 	$(VPOX_PATH_RUNTIME_SRC)/common/misc/RTAssertMsg2.cpp \
 	$(VPOX_PATH_RUNTIME_SRC)/common/misc/RTAssertMsg2Weak.cpp \
 	$(VPOX_PATH_RUNTIME_SRC)/common/misc/RTAssertMsg2WeakV.cpp \
 	$(VPOX_PATH_RUNTIME_SRC)/generic/RTAssertShouldPanic-generic.cpp
endif

# Things specific to the rest of the posix crowd.
if1of ($(KBUILD_TARGET), linux solaris)
 SUPR3HardenedStatic_DEFS += \
 	IN_DIS \
	IN_DIS_STATIC \
 	DIS_CORE_ONLY \
 	LOG_DISABLED
 SUPR3HardenedStatic_DEFS.linux += \
 	SUP_HARDENED_WITH_DLMOPEN
 SUPR3HardenedStatic_DEFS.solaris += \
 	SUP_HARDENED_WITH_DLMOPEN

 SUPR3HardenedStatic_INCS += $(VPOX_PATH_RUNTIME_SRC)/include

 SUPR3HardenedStatic_SOURCES += \
 	posix/SUPR3HardenedMain-posix.cpp \
	posix/SUPR3HardenedMainA-posix.asm \
       \
 	$(VPOX_PATH_RUNTIME_SRC)/common/misc/RTAssertMsg1Weak.cpp \
 	$(VPOX_PATH_RUNTIME_SRC)/common/misc/RTAssertMsg2.cpp \
 	$(VPOX_PATH_RUNTIME_SRC)/common/misc/RTAssertMsg2Weak.cpp \
 	$(VPOX_PATH_RUNTIME_SRC)/common/misc/RTAssertMsg2WeakV.cpp \
 	$(VPOX_PATH_RUNTIME_SRC)/generic/RTAssertShouldPanic-generic.cpp \
       \
 	../../Disassembler/DisasmCore.cpp \
 	../../Disassembler/DisasmTables.cpp \
 	../../Disassembler/DisasmTablesX64.cpp \
 	../../Disassembler/DisasmReg.cpp
endif

SUPR3HardenedMain.cpp_DEFS = VPOX_SVN_REV=$(VPOX_SVN_REV)


#
# VPoxSupLib - Windows DLL for catching thread creation and termination.
#
VPoxSupLib_TEMPLATE = $(if-expr "$(KBUILD_TARGET)" == "win" && defined(VPOX_WITH_HARDENING),VPOXR3HARDENEDLIB,VPOXR3)
VPoxSupLib_SDKS.win = VPOX_NTDLL
VPoxSupLib_LDFLAGS.win.amd64 = -Entry:DllMainEntrypoint
VPoxSupLib_LDFLAGS.win.x86   = -Entry:DllMainEntrypoint
VPoxSupLib_DEFS = \
	$(if $(VPOX_WITHOUT_DEBUGGER_CHECKS),VPOX_WITHOUT_DEBUGGER_CHECKS,)
VPoxSupLib_SOURCES = \
	$(KBUILD_TARGET)/VPoxSupLib-$(KBUILD_TARGET).cpp
VPoxSupLib_SOURCES.win = \
	win/VPoxSupLib.rc
VPoxSupLib_LIBS.win.x86 = \
 	$(PATH_TOOL_$(TEMPLATE_VPOXR3STATIC_TOOL.win.x86)_LIB)/libcmt.lib   # for __chkstk
VPoxSupLib_LIBS.win.amd64 = \
 	$(PATH_TOOL_$(TEMPLATE_VPOXR3STATIC_TOOL.win.amd64)_LIB)/libcmt.lib # for __chkstk


#
# VPoxSupSvc - The system wide service/daemon.
#
VPoxSupSvc_TEMPLATE = VPOXR3EXE
VPoxSupSvc_SOURCES = \
	SUPSvc.cpp \
	SUPSvcGlobal.cpp \
	$(KBUILD_TARGET)/SUPSvc-$(KBUILD_TARGET).cpp
if1of ($(KBUILD_TARGET), win)
 VPoxSupSvc_SOURCES += \
	SUPSvcGrant.cpp
endif
ifn1of ($(KBUILD_TARGET), win)
 VPoxSupSvc_SOURCES += \
 	SUPSvcMain-posix.cpp
endif
VPoxSupSvc_LIBS = \
	$(LIB_RUNTIME)


#
# SUPR0 - The Ring-0 Import library.
#
SUPR0_TEMPLATE      = VPoxR0
if1of ($(VPOX_LDR_FMT), pe lx)
 SUPR0_SOURCES       = $(SUPR0_0_OUTDIR)/SUPR0.def
 SUPR0_CLEAN         = $(SUPR0_0_OUTDIR)/SUPR0.def
$$(SUPR0_0_OUTDIR)/SUPR0.def: \
		$(PATH_SUB_CURRENT)/SUPDrv.cpp \
		$(PATH_SUB_CURRENT)/SUPR0-def-$(VPOX_LDR_FMT).sed \
		| $$(dir $$@)
	$(SED) \
		-f $(dir $<)/SUPR0-def-$(VPOX_LDR_FMT).sed \
		--output $@ \
		$<
 # Experiment: Let's see how blunt the ones messing our NULL_THUNK_DATA entries on W10 are.
 ifeq ($(KBUILD_TARGET),win)
  ifdef KLIBTWEAKER_EXT
   SUPR0_POST_CMDS = $(KLIBTWEAKER_EXT) --clear-timestamps --fill-null_thunk_data $(out)
  endif
 endif

else ifeq ($(VPOX_LDR_FMT),macho)
 $(call KB_FN_DO_PASS0_ON_TARGET,SUPR0) # Defines SUPR0_0_OUTDIR so we can use it in SUPR0_VPOX_FILES w/o needing $$.
 SUPR0_VPOX_KMK_FILE = $(SUPR0_0_OUTDIR)/files.kmk
 include $(SUPR0_VPOX_KMK_FILE)
 SUPR0_SOURCES       = $(SUPR0_VPOX_FILES)
 SUPR0_CLEAN         = $(SUPR0_VPOX_FILES) $(SUPR0_0_OUTDIR)/SUPR0.asm $(SUPR0_VPOX_KMK_FILE) $(SUPR0_VPOX_KMK_FILE).ts

 # Generate a make include file which lists the wrapper source files.
# $ (call KB_FN_AUTO_CMD_DEPS,$(SUPR0_VPOX_KMK_FILE).ts)
 $(SUPR0_VPOX_KMK_FILE).ts \
 +| $(SUPR0_VPOX_KMK_FILE): \
		$(PATH_SUB_CURRENT)/SUPDrv.cpp \
		$(PATH_SUB_CURRENT)/SUPR0-asm-files.sed
#	$(call KB_FN_AUTO_CMD_DEPS_COMMANDS)
	$(call MSG_GENERATE,,$(SUPR0_VPOX_KMK_FILE))
	$(QUIET)$(RM) -f -- "$@"
	$(QUIET)$(MKDIR) -p -- "$(@D)"
	$(QUIET)$(SED) --output "$@" -f "$(VPOX_PATH_SUP_SRC)/SUPR0-asm-files.sed" "$(VPOX_PATH_SUP_SRC)/SUPDrv.cpp"
	$(QUIET)$(CP) --changed -fv "$@" $(SUPR0_VPOX_KMK_FILE)

 $(SUPR0_0_OUTDIR)/SUPR0.asm +| $(SUPR0_VPOX_FILES): \
		$(PATH_SUB_CURRENT)/SUPDrv.cpp \
		$(PATH_SUB_CURRENT)/SUPR0-asm.sed \
               | $$(dir $$@) $(VPOX_FILESPLIT)
#	$(call KB_FN_AUTO_CMD_DEPS_COMMANDS)
	$(call MSG_GENERATE,,SUPR0.asm and friends)
	$(QUIET)$(RM) -f -- "$@"
	$(QUIET)$(SED) --output "$@" -f "$(VPOX_PATH_SUP_SRC)/SUPR0-asm.sed" "$(VPOX_PATH_SUP_SRC)/SUPDrv.cpp"
	$(VPOX_FILESPLIT) "$@" "$(dir $@)"

endif


#
# SUPRC - The raw-mode context library.
#
SUPRC_TEMPLATE := VPoxRc
SUPRC_DEFS     := IN_SUP_RC IN_RT_RC IN_VMM_RC
SUPRC_SOURCES  := SUPLibAll.cpp


#
# SUPR0IdcClient - The Ring-0 IDC client driver library.
#
SUPR0IdcClient_TEMPLATE = VPoxR0DrvLib
SUPR0IdcClient_DEFS = IN_RT_R0 IN_SUP_R0 IN_SUP_STATIC
SUPR0IdcClient_SDKS.win = ReorderCompilerIncs $(VPOX_WINDDK) $(VPOX_WINPSDK)INCS
SUPR0IdcClient_SOURCES.$(KBUILD_TARGET) = \
	$(KBUILD_TARGET)/SUPR0IdcClient-$(KBUILD_TARGET).c
SUPR0IdcClient_SOURCES = \
	SUPR0IdcClient.c \
	SUPR0IdcClientComponent.c \
	SUPR0IdcClientStubs.c



if  !defined(VPOX_ONLY_DOCS) \
 && !defined(VPOX_ONLY_EXTPACKS) \
 && !defined(VPOX_ONLY_VALIDATIONKIT)

ifeq ($(KBUILD_TARGET),os2)

#
# VPoxDrv.sys - The OS/2 driver.
#
VPoxDrv_TEMPLATE      = VPOXR0DRV
VPoxDrv_DEFS          = IN_RT_R0 IN_SUP_R0
VPoxDrv_INCS         := $(PATH_SUB_CURRENT)
#VPoxDrv_LDFLAGS       = -s -t -v
VPoxDrv_SOURCES       = \
	os2/SUPDrvA-os2.asm \
	os2/SUPDrv-os2.def
VPoxDrv_LIBS          = \
	$(VPoxDrvLib_1_TARGET) \
	$(PATH_STAGE_LIB)/RuntimeR0Drv$(VPOX_SUFF_LIB) \
	$(VPOX_GCC_LIBGCC) \
	end

# temp hack to ensure that SUPDrvA-os2.asm is first in the link.
LIBRARIES += VPoxDrvLib
VPoxDrvLib_TEMPLATE   = VPOXR0DRV
VPoxDrvLib_INSTTYPE   = none
VPoxDrvLib_DEFS       = IN_RT_R0 IN_SUP_R0
VPoxDrvLib_INCS      := \
	. \
	$(PATH_ROOT)/src/VPox/Runtime/include
VPoxDrvLib_SOURCES    = \
	os2/SUPDrv-os2.cpp \
	SUPDrv.cpp \
	SUPDrvGip.cpp \
	SUPDrvSem.cpp \
	SUPLibAll.cpp

endif # os2


#
# New VPoxDrv target. TODO: Convert all the above to use this!
#
if1of ($(KBUILD_TARGET), darwin freebsd solaris win)
 ifdef VPOX_WITH_VPOXDRV
  SYSMODS += VPoxDrv
 endif
 VPoxDrv_TEMPLATE         = VPOXR0DRV
 VPoxDrv_NAME.freebsd     = vpoxdrv
 VPoxDrv_NAME.solaris     = vpoxdrv
 VPoxDrv_NAME.win         = VPoxSup
 ifdef VPOX_SIGNING_MODE
  VPoxDrv_INSTTYPE.win    = none
  VPoxDrv_DEBUG_INSTTYPE.win = both
 endif
 VPoxDrv_INST.darwin      = $(INST_VPOXDRV)Contents/MacOS/
 VPoxDrv_DEBUG_INST.darwin= $(patsubst %/,%,$(INST_VPOXDRV))
 VPoxDrv_SDKS.win         = ReorderCompilerIncs $(VPOX_WINDDK) $(VPOX_WINPSDK)INCS

 VPoxDrv_DEFS            := IN_RT_R0 IN_SUP_R0 SUPDRV_WITH_RELEASE_LOGGER VPOX_SVN_REV=$(VPOX_SVN_REV)
 ifdef VPOX_WITH_DTRACE_R0DRV
  VPoxDrv_DEFS           += VPOX_WITH_DTRACE VPOX_WITH_DTRACE_R0DRV
 endif
 ifdef VPOX_WITHOUT_DEBUGGER_CHECKS
  VPoxDrv_DEFS           += VPOX_WITHOUT_DEBUGGER_CHECKS
 endif
 ifdef VPOX_PERMIT_VISUAL_STUDIO_PROFILING
  VPoxDrv_DEFS           += VPOX_PERMIT_VISUAL_STUDIO_PROFILING
 endif
 VPoxDrv_DEFS            += VPOX_PERMIT_MORE VPOX_PERMIT_EVEN_MORE
 #VPoxDrv_DEFS.debug      += DEBUG_DARWIN_GIP
 VPoxDrv_DEFS.darwin     := VPOX_WITH_HOST_VMX
 ifdef VPOX_WITH_RAW_MODE
  VPoxDrv_DEFS.darwin    += VPOX_WITH_RAW_MODE
 endif
 if defined(VPOX_WITH_DARWIN_R0_DARWIN_IMAGE_VERIFICATION) && defined(VPOX_SIGNING_MODE)
  VPoxDrv_DEFS.darwin    += VPOX_WITH_DARWIN_R0_DARWIN_IMAGE_VERIFICATION
 endif
 ifdef VPOX_WITH_NETFLT
  VPoxDrv_DEFS.solaris   += VPOX_WITH_NETFLT
 endif
 ifdef VPOX_WITH_NATIVE_SOLARIS_LOADING
  VPoxDrv_DEFS.solaris   += VPOX_WITH_NATIVE_SOLARIS_LOADING
 endif
 ifdef VPOX_WITHOUT_NATIVE_R0_LOADER
  VPoxDrv_DEFS.win       += VPOX_WITHOUT_NATIVE_R0_LOADER
 endif
 ifdef VPOX_WITH_VISTA_NO_SP
  VPoxDrv_DEFS.win       += VPOX_WITH_VISTA_NO_SP
 endif
 ifdef VPOX_WITH_HARDENING
  VPoxDrv_ASDEFS         += VPOX_WITH_HARDENING
 endif
 ifdef VPOX_WITH_RAM_IN_KERNEL
  VPoxDrv_DEFS           += VPOX_WITHOUT_EFLAGS_AC_SET_IN_VPOXDRV IPRT_WITHOUT_EFLAGS_AC_PRESERVING
 else if ($(VPOX_VERSION_BUILD) % 2) == 1
  VPoxDrv_DEFS           += VPOX_WITH_EFLAGS_AC_SET_IN_VPOXDRV IPRT_WITH_EFLAGS_AC_PRESERVING
 endif

 VPoxDrv_INCS             = . $(VPoxDrv_0_OUTDIR)
 VPoxDrv_INCS.darwin      = ./darwin

 VPoxDrv_LIBS             = $(PATH_STAGE_LIB)/RuntimeR0Drv$(VPOX_SUFF_LIB)
 VPoxDrv_LIBS.win         = \
 	$(PATH_STAGE_LIB)/RuntimeR0Drv$(VPOX_SUFF_LIB) \
 	$(PATH_SDK_$(VPOX_WINDDK)_LIB)/ntoskrnl.lib \
 	$(PATH_SDK_$(VPOX_WINDDK)_LIB)/hal.lib

 #VPoxDrv_LDFLAGS.darwin   = -Wl,-sectcreate,__TEXT,__info_plist,$(VPoxDrv.kext_0_OUTDIR)/Info.plist
 #VPoxDrv_LDFLAGS.darwin   = -v -Wl,-whyload -Wl,-v -Wl,-whatsloaded
 VPoxDrv_LDFLAGS.solaris += -N misc/ctf
 ifdef VPOX_WITH_NATIVE_DTRACE
  VPoxDrv_LDFLAGS.solaris += -N drv/dtrace
 endif
 VPoxDrv_LDFLAGS.win.x86  = -Entry:DriverEntry@8
 VPoxDrv_LDFLAGS.win.amd64= -Entry:DriverEntry

 VPoxDrv_SOURCES.darwin   = \
	darwin/SUPDrv-darwin.cpp
 ifdef VPOX_WITH_DARWIN_R0_DARWIN_IMAGE_VERIFICATION
  VPoxDrv_SOURCES.darwin += \
  	$(VPOX_SUP_WIN_CERTS_FILE)
 endif
 VPoxDrv_SOURCES.solaris  = \
	solaris/SUPDrv-solaris.c
 VPoxDrv_SOURCES.win      = \
	win/SUPDrv-win.cpp \
	win/SUPDrvA-win.asm \
	win/VPoxDrv.rc
 ifdef VPOX_WITH_HARDENING
  VPoxDrv_SOURCES.win    += \
 	win/SUPHardenedVerifyImage-win.cpp \
 	win/SUPHardenedVerifyProcess-win.cpp \
 	$(VPOX_SUP_WIN_CERTS_FILE)
 endif
 VPoxDrv_SOURCES          = \
 	SUPDrv.d \
 	SUPDrv.cpp \
 	SUPDrvGip.cpp \
 	SUPDrvSem.cpp \
  	SUPDrvTracer.cpp \
	SUPLibAll.cpp
 ifdef VPOX_WITH_NATIVE_DTRACE
  VPoxDrv_SOURCES        += \
  	SUPDrv-dtrace.cpp
  SUPDrv-dtrace.cpp_DEFS.darwin += VPOX_PATH_MACOSX_DTRACE_H=\"$(VPOX_PATH_MACOSX_SDK)/usr/include/sys/dtrace.h\"
 endif
 ifn1of ($(KBUILD_TARGET), linux freebsd)
  VPoxDrv_SOURCES        += \
 	SUPDrvTracerA.asm
 endif

 linux/SUPDrv-linux.c_DEPS = $(VPOX_SVN_REV_HEADER)

endif



if1of ($(KBUILD_TARGET), darwin)
 # Files necessary to make a darwin kernel extension bundle.
 INSTALLS.darwin += VPoxDrv.kext
 VPoxDrv.kext_INST     = $(INST_VPOXDRV)Contents/
 VPoxDrv.kext_SOURCES  = $(VPoxDrv.kext_0_OUTDIR)/Contents/Info.plist
 VPoxDrv.kext_CLEAN    = $(VPoxDrv.kext_0_OUTDIR)/Contents/Info.plist
 VPoxDrv.kext_BLDDIRS  = $(VPoxDrv.kext_0_OUTDIR)/Contents/

 $$(VPoxDrv.kext_0_OUTDIR)/Contents/Info.plist: \
		$(PATH_SUB_CURRENT)/darwin/Info.plist \
		$(VPOX_VERSION_MK) | $$(dir $$@)
	$(call MSG_GENERATE,VPoxDrv,$@,$<)
	$(QUIET)$(RM) -f $@
	$(QUIET)$(SED) \
		-e 's/@VPOX_VERSION_STRING@/$(if !defined(VPOX_MAVERICS_CODE_SIGNING_HACK),$(VPOX_VERSION_STRING),4.2.51)/g' \
		-e 's/@VPOX_VERSION_MAJOR@/$(if  !defined(VPOX_MAVERICS_CODE_SIGNING_HACK),$(VPOX_VERSION_MAJOR),4)/g' \
		-e 's/@VPOX_VERSION_MINOR@/$(if  !defined(VPOX_MAVERICS_CODE_SIGNING_HACK),$(VPOX_VERSION_MINOR),2)/g' \
		-e 's/@VPOX_VERSION_BUILD@/$(if  !defined(VPOX_MAVERICS_CODE_SIGNING_HACK),$(VPOX_VERSION_BUILD),51)/g' \
		-e 's/@VPOX_VENDOR@/$(VPOX_VENDOR)/g' \
		-e 's/@VPOX_PRODUCT@/$(VPOX_PRODUCT)/g' \
		-e 's/@VPOX_C_YEAR@/$(VPOX_C_YEAR)/g' \
		--output $@ \
		$<

 $(evalcall2 VPOX_TEST_SIGN_KEXT,VPoxDrv)
endif


if1of ($(KBUILD_TARGET), darwin solaris)
 # Common manual loader script.
 INSTALLS += SUPDrvScripts
 SUPDrvScripts_INST = $(INST_DIST)
 SUPDrvScripts_EXEC_SOURCES  = \
	$(KBUILD_TARGET)/load.sh
endif


if1of ($(KBUILD_TARGET), linux freebsd)
 if1of ($(KBUILD_TARGET_ARCH), $(VPOX_SUPPORTED_HOST_ARCHS))
 #
 # Targets for installing the linux sources.
 #
 vpoxdrv-src_INST    = bin/src/vpoxdrv/
 vpoxdrv-src_SOURCES = \
 	$(subst $(DQUOTE),,$(FILES_VPOXDRV_NOBIN)) \
 	$(vpoxdrv-src_0_OUTDIR)/Makefile
 vpoxdrv-src_EXEC_SOURCES  = \
 	$(subst $(DQUOTE),,$(FILES_VPOXDRV_BIN))
 vpoxdrv-src_CLEAN   = \
 	$(vpoxdrv-src_0_OUTDIR)/Makefile \
 	$(PATH_TARGET)/vpoxdrv-src-1.dep \

 # Scripts needed for building the kernel modules
 includedep $(PATH_TARGET)/vpoxdrv-src-1.dep
 $$(vpoxdrv-src_0_OUTDIR)/Makefile: \
		$(PATH_SUB_CURRENT)/$(KBUILD_TARGET)/Makefile \
		$$(if $$(eq $$(Support/$(KBUILD_TARGET)/Makefile_VPOX_HARDENED),$$(VPOX_WITH_HARDENING)),,FORCE) \
		$$(if $$(eq $$(Support/$(KBUILD_TARGET)/Makefile_VPOX_RAM_IN_KERNEL),$$(VPOX_WITH_RAM_IN_KERNEL)),,FORCE) \
		| $$(dir $$@)
	$(call MSG_TOOL,Creating,,$@)
	$(QUIET)$(SED) -e "" \
		$(if-expr !defined(VPOX_WITH_HARDENING)   ,-e "s;VPOX_WITH_HARDENING;;g",) \
		$(if-expr ($(VPOX_VERSION_BUILD) % 2) == 0 || defined(VPOX_WITH_RAM_IN_KERNEL) \
		 , -e "s;VPOX_WITH_EFLAGS_AC_SET_IN_VPOXDRV;;g" -e "s;IPRT_WITH_EFLAGS_AC_PRESERVING;;g",) \
		$(if-expr !defined(VPOX_WITH_RAM_IN_KERNEL) \
		 , -e 's;VPOX_WITHOUT_EFLAGS_AC_SET_IN_VPOXDRV;;g' -e 's;IPRT_WITHOUT_EFLAGS_AC_PRESERVING;;g',) \
		--output $@ $<
	%$(QUIET2)$(APPEND) -t '$(PATH_TARGET)/vpoxdrv-src-1.dep' \
		'Support/$(KBUILD_TARGET)/Makefile_VPOX_HARDENED=$(VPOX_WITH_HARDENING)' \
		'Support/$(KBUILD_TARGET)/Makefile_VPOX_RAM_IN_KERNEL=$(VPOX_WITH_RAM_IN_KERNEL)'

 #
 # Build test for the linux host kernel modules.
 #
 $(evalcall2 VPOX_LINUX_KMOD_TEST_BUILD_RULE_FN,vpoxdrv-src,,save_symvers)
 endif # supported host arch
endif # linux freebsd


ifeq ($(KBUILD_TARGET), win)
 INSTALLS.win += VPoxSup-inf
 VPoxSup-inf_TEMPLATE = VPoxR0DrvInfCat
 VPoxSup-inf_SOURCES = \
 	$(PATH_TARGET)/VPoxSupCat.dir/VPoxSup.inf
 VPoxSup-inf_CLEAN = $(VPoxSup-inf_SOURCES)
 VPoxSup-inf_BLDDIRS = $(PATH_TARGET)/VPoxSupCat.dir

 $(PATH_TARGET)/VPoxSupCat.dir/VPoxSup.inf: $(PATH_SUB_CURRENT)/win/VPoxSup.inf $(MAKEFILE_CURRENT) | $$(dir $$@)
	$(call MSG_GENERATE,VPoxSup-inf,$@,$<)
	$(call VPOX_EDIT_INF_FN,$<,$@)

 ifdef VPOX_SIGNING_MODE
  VPoxSup-inf_SOURCES += \
  	$(PATH_TARGET)/VPoxSupCat.dir/VPoxSup.sys \
  	$(PATH_TARGET)/VPoxSupCat.dir/VPoxSup.cat \
  	$(PATH_TARGET)/VPoxSupCat.dir/VPoxSup.cat=>VPoxSup-PreW10.cat

  $(PATH_TARGET)/VPoxSupCat.dir/VPoxSup.sys: $$(VPoxDrv_1_TARGET) | $$(dir $$@)
	$(INSTALL) -m 644 -- "$<" "$(@D)"

  $(PATH_TARGET)/VPoxSupCat.dir/VPoxSup.cat: \
		$(PATH_TARGET)/VPoxSupCat.dir/VPoxSup.inf \
		$(PATH_TARGET)/VPoxSupCat.dir/VPoxSup.sys
	$(call MSG_TOOL,Inf2Cat,VPoxSup-inf,$@,$<)
	$(call VPOX_MAKE_CAT_FN, $(@D),$@)
 endif # signing
endif # win


endif # !VPOX_ONLY_DOCS && !VPOX_ONLY_EXTPACKS && !VPOX_ONLY_VALIDATIONKIT
include $(FILE_KBUILD_SUB_FOOTER)

