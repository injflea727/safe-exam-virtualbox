# $Id: Makefile.kmk $
## @file
# Sub-Makefile for the Skeleton Extension Pack Sample.
#

#
# Copyright (C) 2010-2020 Oracle Corporation
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following
# conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#

SUB_DEPTH = ../../../..
include $(KBUILD_PATH)/subheader.kmk

#
# Extend the extension pack templates.
#
TEMPLATE_VPoxR3ExtPackSkeleton          = For the ring-3 context modules in the Skeleton extension pack.
TEMPLATE_VPoxR3ExtPackSkeleton_EXTENDS  = VPoxR3ExtPack
TEMPLATE_VPoxR3ExtPackSkeleton_INST     = $(INST_EXTPACK)Skeleton/$(KBUILD_TARGET).$(KBUILD_TARGET_ARCH)/

TEMPLATE_VPoxR0ExtPackSkeleton          = For the ring-0 context modules in the Skeleton extension pack.
TEMPLATE_VPoxR0ExtPackSkeleton_EXTENDS  = VPoxR0ExtPack
TEMPLATE_VPoxR0ExtPackSkeleton_INST     = $(INST_EXTPACK)Skeleton/$(KBUILD_TARGET).$(KBUILD_TARGET_ARCH)/

TEMPLATE_VPoxRcExtPackSkeleton          = For the raw-mode context modules in the Skeleton extension pack.
TEMPLATE_VPoxRcExtPackSkeleton_EXTENDS  = VPoxRcExtPack
TEMPLATE_VPoxRcExtPackSkeleton_INST     = $(INST_EXTPACK)Skeleton/$(KBUILD_TARGET).$(KBUILD_TARGET_ARCH)/

TEMPLATE_VPoxInsExtPackSkeleton         = For the install targets of an extension pack.
TEMPLATE_VPoxInsExtPackSkeleton_EXTENDS = VPoxR0ExtPack
TEMPLATE_VPoxInsExtPackSkeleton_INST    = $(INST_EXTPACK)Skeleton/

#
# Globals.
#
VPOX_SKELETON_NAME         = Skeleton
VPOX_SKELETON_MANGLED_NAME = Skeleton
VPOX_PATH_EXTPACK_SKELETON = $(PATH_STAGE)/$(INST_EXTPACK)Skeleton


#
# VPoxSkeletonMain - The module which the VirtualPox Main API talks to.
#
DLLS += VPoxSkeletonMain
VPoxSkeletonMain_TEMPLATE = VPoxR3ExtPackSkeleton
VPoxSkeletonMain_SOURCES = VPoxSkeletonMain.cpp
VPoxSkeletonMain_DEFS =

#
# VPoxSkeletonMainVM - The module in a VM which the VirtualPox Main API talks to.
#
DLLS += VPoxSkeletonMainVM
VPoxSkeletonMainVM_TEMPLATE = VPoxR3ExtPackSkeleton
VPoxSkeletonMainVM_SOURCES = VPoxSkeletonMainVM.cpp
VPoxSkeletonMainVM_DEFS =

#
# Install the description.
#
INSTALLS += VPoxSkeletonIns
VPoxSkeletonIns_TEMPLATE = VPoxInsExtPackSkeleton
VPoxSkeletonIns_SOURCES = \
	$(VPoxSkeletonIns_0_OUTDIR)/ExtPack.xml
$(call VPOX_EDIT_VERSION_RULE_FN,VPoxSkeletonIns,ExtPack.xml)


#
# Packing.
#
ifndef VPOX_WITHOUT_EXTPACK_SKELETON_PACKING
 PACKING += $(VPOX_PATH_PACKAGES)/$(VPOX_SKELETON_MANGLED_NAME)-$(VPOX_VERSION_STRING)r$(VPOX_SVN_REV).vpox-extpack
endif

ifndef VPOX_WITH_EXTPACK_OS_ARCHS
 ifeq ($(USER),bird) # for now
  VPOX_WITH_EXTPACK_OS_ARCHS = $(KBUILD_TARGET).$(KBUILD_TARGET_ARCH)
 endif
endif

# Build the file list.  The macro takes 1=darwin.x86, 2=dist/VirtualPox.app/Contents/MacOS, 3=dylib
VPOX_SKELETON_FILES_MACRO = \
	$(PATH_OUT_BASE)/$(1)/$(KBUILD_TYPE)/$(2)/ExtensionPacks/$(VPOX_SKELETON_MANGLED_NAME)/$(1)/VPoxSkeletonMain.$(3)=>$(1)/VPoxSkeletonMain.$(3) \
	$(PATH_OUT_BASE)/$(1)/$(KBUILD_TYPE)/$(2)/ExtensionPacks/$(VPOX_SKELETON_MANGLED_NAME)/$(1)/VPoxSkeletonMainVM.$(3)=>$(1)/VPoxSkeletonMainVM.$(3)

VPOX_SKELETON_FILES := \
	$(VPOX_PATH_EXTPACK_SKELETON)/ExtPack.xml=>ExtPack.xml

if1of (darwin.amd64, $(VPOX_WITH_EXTPACK_OS_ARCHS))
 VPOX_SKELETON_FILES += $(call VPOX_SKELETON_FILES_MACRO,darwin.amd64,dist/VirtualPox.app/Contents/MacOS,dylib)
endif
if1of (darwin.x86, $(VPOX_WITH_EXTPACK_OS_ARCHS))
 VPOX_SKELETON_FILES += $(call VPOX_SKELETON_FILES_MACRO,darwin.x86,dist/VirtualPox.app/Contents/MacOS,dylib)
endif
if1of (freebsd.amd64, $(VPOX_WITH_EXTPACK_OS_ARCHS))
 VPOX_SKELETON_FILES += $(call VPOX_SKELETON_FILES_MACRO,freebsd.amd64,bin,so)
endif
if1of (freebsd.x86, $(VPOX_WITH_EXTPACK_OS_ARCHS))
 VPOX_SKELETON_FILES += $(call VPOX_SKELETON_FILES_MACRO,freebsd.x86,bin,so)
endif
if1of (linux.amd64, $(VPOX_WITH_EXTPACK_OS_ARCHS))
 VPOX_SKELETON_FILES += $(call VPOX_SKELETON_FILES_MACRO,linux.amd64,bin,so)
endif
if1of (linux.x86, $(VPOX_WITH_EXTPACK_OS_ARCHS))
 VPOX_SKELETON_FILES += $(call VPOX_SKELETON_FILES_MACRO,linux.x86,bin,so)
endif
if1of (os2.x86, $(VPOX_WITH_EXTPACK_OS_ARCHS))
 VPOX_SKELETON_FILES += $(call VPOX_SKELETON_FILES_MACRO,os2.x86,bin,so)
endif
if1of (solaris.amd64, $(VPOX_WITH_EXTPACK_OS_ARCHS))
 VPOX_SKELETON_FILES += $(call VPOX_SKELETON_FILES_MACRO,solaris.amd64,bin,so)
endif
if1of (solaris.x86, $(VPOX_WITH_EXTPACK_OS_ARCHS))
 VPOX_SKELETON_FILES += $(call VPOX_SKELETON_FILES_MACRO,solaris.x86,bin,so)
endif
if1of (win.amd64, $(VPOX_WITH_EXTPACK_OS_ARCHS))
 VPOX_SKELETON_FILES += $(call VPOX_SKELETON_FILES_MACRO,win.amd64,bin,dll)
endif
if1of (win.x86, $(VPOX_WITH_EXTPACK_OS_ARCHS))
 VPOX_SKELETON_FILES += $(call VPOX_SKELETON_FILES_MACRO,win.x86,bin,dll)
endif

# Pack it all up using a temporary staging directory.
$(VPOX_PATH_PACKAGES)/$(VPOX_SKELETON_MANGLED_NAME)-$(VPOX_VERSION_STRING)r$(VPOX_SVN_REV).vpox-extpack: \
		$$(foreach file, $$(VPOX_SKELETON_FILES), $$(firstword $$(subst =>,$$(SP),$$(file)))) \
		| $(VPOX_PATH_PACKAGES)/
	$(RM) -f $(wildcard $(VPOX_PATH_PACKAGES)/$(VPOX_SKELETON_MANGLED_NAME)-*.vpox-extpack) \
		$(VPoxSkeletonIns_0_OUTDIR)/ExtPack.manifest \
		$(VPoxSkeletonIns_0_OUTDIR)/ExtPack.signature
# Stage all the files
	$(RM) -Rf $(VPoxSkeletonIns_0_OUTDIR)/Stage/
	$(foreach file, $(VPOX_SKELETON_FILES),\
		$(NLTAB)$(MKDIR) -p $(dir $(lastword $(subst =>,$(SP)$(VPoxSkeletonIns_0_OUTDIR)/Stage/,$(file)))) \
		$(NLTAB)$(CP) $(subst =>,$(SP)$(VPoxSkeletonIns_0_OUTDIR)/Stage/,$(file)) )
# Create the manifest
	$(VPOX_RTMANIFEST) \
		--manifest $(VPoxSkeletonIns_0_OUTDIR)/Stage/ExtPack.manifest \
		--chdir $(VPoxSkeletonIns_0_OUTDIR)/Stage/ \
		$(foreach file, $(VPOX_SKELETON_FILES), $(lastword $(subst =>,$(SP),$(file))))
	$(APPEND) $(VPoxSkeletonIns_0_OUTDIR)/Stage/ExtPack.signature "todo"
	$(CHMOD) a+r \
		$(VPoxSkeletonIns_0_OUTDIR)/Stage/ExtPack.manifest \
		$(VPoxSkeletonIns_0_OUTDIR)/Stage/ExtPack.signature
# Tar it up.
	tar -cvf - -C $(VPoxSkeletonIns_0_OUTDIR)/Stage/ . | gzip -9c > $@
# Clean up
	$(RM) -Rf $(VPoxSkeletonIns_0_OUTDIR)/Stage/

BLDDIRS += $(VPOX_PATH_PACKAGES)/

include $(FILE_KBUILD_SUB_FOOTER)

