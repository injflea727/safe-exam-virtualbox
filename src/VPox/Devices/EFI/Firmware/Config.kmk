# $Id: Config.kmk $
## @file
# kBuild configuration for the VPox EFI firmware.
#
# Note! kBuild is only used for the build tools, the rest is handled by the
#       very custom EFI build system.
#

#
# Copyright (C) 2013-2020 Oracle Corporation
#
# This file is part of VirtualPox Open Source Edition (OSE), as
# available from http://www.virtualpox.org. This file is free software;
# you can redistribute it and/or modify it under the terms of the GNU
# General Public License (GPL) as published by the Free Software
# Foundation, in version 2 as it comes in the "COPYING" file of the
# VirtualPox OSE distribution. VirtualPox OSE is distributed in the
# hope that it will be useful, but WITHOUT ANY WARRANTY of any kind.
#
# The contents of this file may alternatively be used under the terms
# of the Common Development and Distribution License Version 1.0
# (CDDL) only, as it comes in the "COPYING.CDDL" file of the
# VirtualPox OSE distribution, in which case the provisions of the
# CDDL are applicable instead of those of the GPL.
#
# You may elect to license modified versions of this file under the
# terms and conditions of either the GPL or the CDDL or both.
#

VPOX_EFI_FIRMWARE_CONFIG_KMK_INCLUDED = 1

# Include the next configure file above us.
ifndef VPOX_DEVICES_CONFIG_KMK_INCLUDED
 include $(PATH_ROOT)/src/VPox/Devices/Config.kmk
endif

#
# Globals.
#
VPOX_PATH_EFI_FIRMWARE = $(PATH_ROOT)/src/VPox/Devices/EFI/Firmware
VPOX_PATH_STAGE_EFI_BLDPROGS = $(PATH_STAGE)/EfiBldProgs
VPOX_EFI_BUILD_TARGET  = $(if-expr $(intersects release profile, $(KBUILD_TYPE)),RELEASE,DEBUG)
VPOX_EFI_OUTPUT_SUBDIR = $(VPOX_EFI_BUILD_TARGET)_$(VPOX_EFI_TOOL_CHAIN)

# VPox Yasm command
VPOX_YASMCMD   ?= $(firstword $(wildcard $(KBUILD_DEVTOOLS_HST)/bin/yasm$(HOSTSUFF_EXE)) yasm$(HOSTSUFF_EXE))

# VPox nasm command
include $(KBUILD_PATH)/tools/NASM.kmk
TOOL_VPoxNasm = Our version of the NASM tool
ifndef TOOL_VPoxNasm_PATH
 TOOL_VPoxNasm_PATH   := $(firstword $(rsort $(wildcard $(KBUILD_DEVTOOLS_HST)/nasm/v*.*)))
 if "$(TOOL_VPoxNasm_PATH)" == "" && "$(KBUILD_DEVTOOLS_HST_ALT)" != ""
  TOOL_VPoxNasm_PATH  := $(firstword $(rsort $(wildcard $(KBUILD_DEVTOOLS_HST_ALT)/nasm/v*.*)))
 endif
endif
ifneq ($(TOOL_VPoxNasm_PATH),)
 VPOX_NASMCMD     ?= $(TOOL_VPoxNasm_PATH)/nasm$(HOSTSUFF_EXE)
else
 VPOX_NASMCMD     ?= nasm$(HOSTSUFF_EXE)
endif

# EFI requires python v2.x, so provide a way to select that while using 3.x for the rest of VPox.
ifndef VPOX_BLD_PYTHON_2X
 VPOX_BLD_PYTHON_2X = $(VPOX_BLD_PYTHON)
endif

#
# Decide which tool chain to use for the EFI binaries.
# Note! We're using our own stripped down tools_def.txt: vpox-tools_def.txt.
#
ifeq ($(KBUILD_HOST),win)
 VPOX_EFI_TOOL_CHAIN := VS2010
else
 VPOX_EFI_TOOL_CHAIN = GCC48
endif


#
# Make a build program template of our own.
#
TEMPLATE_VPoxEfiBldProg = EFI build program.
TEMPLATE_VPoxEfiBldProg_EXTENDS = VPoxBldProg
TEMPLATE_VPoxEfiBldProg_INST = EfiBldProgs/
TEMPLATE_VPoxEfiBldProg_INSTTYPE = stage
TEMPLATE_VPoxEfiBldProg_DEFS.win = $(TEMPLATE_VPoxBldProg_DEFS.win) \
	__STDC_VERSION__=199409L
TEMPLATE_VPoxEfiBldProg_CFLAGS.win  = $(TEMPLATE_VPoxBldProg_CFLAGS.win)
TEMPLATE_VPoxEfiBldProg_CFLAGS.win += -wd4100 # warning C4100: '_text' : unreferenced formal parameter
TEMPLATE_VPoxEfiBldProg_CFLAGS.win += -wd4189 # warning C4189: 'zzpf' : local variable is initialized but not referenced
TEMPLATE_VPoxEfiBldProg_CFLAGS.win += -wd4255 # warning C4255: 'AllocateMemory' : no function prototype given: converting '()' to '(void)'
TEMPLATE_VPoxEfiBldProg_CFLAGS.win += -wd4267 # warning C4267: '=' : conversion from 'size_t' to 'UINT32', possible loss of data
TEMPLATE_VPoxEfiBldProg_CFLAGS.win += -wd4287 # warning C4287: '>' : unsigned/negative constant mismatch
TEMPLATE_VPoxEfiBldProg_CFLAGS.win += -wd4334 # warning C4334: '<<' : result of 32-bit shift implicitly converted to 64 bits (was 64-bit shift intended?)
TEMPLATE_VPoxEfiBldProg_CFLAGS.win += -wd4555 # warning C4555: expression has no effect; expected expression with side-effect
TEMPLATE_VPoxEfiBldProg_CFLAGS.win += -wd4701 # warning C4701: potentially uninitialized local variable 'save_line' used
TEMPLATE_VPoxEfiBldProg_CFLAGS.win += -wd4702 # warning C4702: unreachable code
TEMPLATE_VPoxEfiBldProg_CXXFLAGS.win  = $(TEMPLATE_VPoxBldProg_CXXFLAGS.win)
TEMPLATE_VPoxEfiBldProg_CXXFLAGS.win += -wd4018 # warning C4018: '>' : signed/unsigned mismatch
TEMPLATE_VPoxEfiBldProg_CXXFLAGS.win += -wd4101 # warning C4101: 'LineBuf' : unreferenced local variable
TEMPLATE_VPoxEfiBldProg_CXXFLAGS.win += -wd4102 # warning C4102: 'fail' : unreferenced label
TEMPLATE_VPoxEfiBldProg_CXXFLAGS.win += -wd4189 # warning C4189: 'zzpf' : local variable is initialized but not referenced
TEMPLATE_VPoxEfiBldProg_CXXFLAGS.win += -wd4267 # warning C4267: '=' : conversion from 'size_t' to 'UINT32', possible loss of data
TEMPLATE_VPoxEfiBldProg_CXXFLAGS.win += -wd4370 # warning C4370: 'ANTLRParser' : layout of class has changed from a previous version of the compiler due to better packing
TEMPLATE_VPoxEfiBldProg_CXXFLAGS.win += -wd4555 # warning C4555: expression has no effect; expected expression with side-effect
TEMPLATE_VPoxEfiBldProg_CXXFLAGS.win += -wd4625 # warning C4625: 'EfiVfrParser' : copy constructor could not be generated because a base class copy constructor is inaccessible
TEMPLATE_VPoxEfiBldProg_CXXFLAGS.win += -wd4626 # warning C4626: 'EfiVfrParser' : assignment operator could not be generated because a base class assignment operator is inaccessible
TEMPLATE_VPoxEfiBldProg_CXXFLAGS.win += -wd4701 # warning C4701: potentially uninitialized local variable 'save_line' used
TEMPLATE_VPoxEfiBldProg_CXXFLAGS.win += -wd4702 # warning C4702: unreachable code

TEMPLATE_VPoxEfiBldProg_INCS = $(TEMPLATE_VPoxBldProg_INCS) \
	$(VPOX_PATH_EFI_FIRMWARE)/BaseTools/Source/C/Include/IndustryStandard \
	$(VPOX_PATH_EFI_FIRMWARE)/BaseTools/Source/C/Common \
	$(VPOX_PATH_EFI_FIRMWARE)/BaseTools/Source/C/Include \
	$(VPOX_PATH_EFI_FIRMWARE)/BaseTools/Source/C

TEMPLATE_VPoxEfiBldProg_INCS.x86 = $(TEMPLATE_VPoxBldProg_INCS.x86) \
	$(VPOX_PATH_EFI_FIRMWARE)/BaseTools/Source/C/Include/IA32

TEMPLATE_VPoxEfiBldProg_INCS.amd64 = $(TEMPLATE_VPoxBldProg_INCS.amd64) \
	$(VPOX_PATH_EFI_FIRMWARE)/BaseTools/Source/C/Include/X64

TEMPLATE_VPoxEfiBldProg_LIBS = \
	$(VPOX_PATH_STAGE_EFI_BLDPROGS)/EfiBldCommonLib$(VPOX_SUFF_LIB) \
	$(TEMPLATE_VPoxBldProg_LIBS)
ifn1of ($(KBUILD_HOST),win) # This stuff isn't up to our standard at all! :/
 TEMPLATE_VPoxEfiBldProg_CFLAGS = $(filter-out -pedantic,$(TEMPLATE_VPoxBldProg_CFLAGS)) \
 	-Wno-sign-compare -Wno-missing-prototypes -Wno-strict-prototypes \
	-Wno-implicit-function-declaration -Wno-missing-declarations -Wno-shadow -Wno-format \
	-Wno-empty-body -Wno-unused-parameter -Wno-unused-variable -Wno-unused-label
 TEMPLATE_VPoxEfiBldProg_CXXFLAGS = $(filter-out -pedantic,$(TEMPLATE_VPoxBldProg_CXXFLAGS)) \
 	-Wno-all -Wno-shadow -Wno-empty-body -Wno-unused-parameter -Wno-unused-variable \
	-Wno-unused-label
endif


# There isn't a BLDLIBRARIES target group, so we have to override the build
# target for libraries used by build programs and keep them in LIBRARIES.
TEMPLATE_VPoxEfiBldLib = Library for an EFI build program.
TEMPLATE_VPoxEfiBldLib_EXTENDS = VPoxEfiBldProg
TEMPLATE_VPoxEfiBldLib_BLD_TRG      := $(KBUILD_HOST)
TEMPLATE_VPoxEfiBldLib_BLD_TRG_ARCH := $(KBUILD_HOST_ARCH)
TEMPLATE_VPoxEfiBldLib_BLD_TRG_CPU  := $(KBUILD_HOST_CPU)


#
# The debug info suffix.
#
if1of ($(KBUILD_TARGET), win)
 VPOX_EFI_DBG_SUFF := .pdb
else
 VPOX_EFI_DBG_SUFF := .debug
endif

include $(VPOX_PATH_EFI_FIRMWARE)/EfiModules.kmk
