# $Id: Makefile.kmk $
## @file
# Sub-Makefile for the VirtualPox Guest Addition X11 Client.
#

#
# Copyright (C) 2006-2020 Oracle Corporation
#
# This file is part of VirtualPox Open Source Edition (OSE), as
# available from http://www.virtualpox.org. This file is free software;
# you can redistribute it and/or modify it under the terms of the GNU
# General Public License (GPL) as published by the Free Software
# Foundation, in version 2 as it comes in the "COPYING" file of the
# VirtualPox OSE distribution. VirtualPox OSE is distributed in the
# hope that it will be useful, but WITHOUT ANY WARRANTY of any kind.
#

SUB_DEPTH = ../../../../..
include $(KBUILD_PATH)/subheader.kmk

# Use header files from our tree for randr and xinerama. and don't link but rather dlopen libXrand
VPOX_WITH_DISTRO_XRAND_XINERAMA=

#
# VPoxClient - clipboard and seamless.
#
PROGRAMS += VPoxClient
#
# Please make sure that you grep the source tree and modify all occurences accordingly
# if you rename the following program name.
#
PROGRAMS += VPoxDRMClient

VPoxClient_TEMPLATE = NewVPoxGuestR3Exe
VPoxClient_DEFS += VPOX_X11_CLIPBOARD VPOX_WITH_HGCM
VPoxClient_DEFS += VPOX_BUILD_TARGET=\"$(KBUILD_TARGET).$(KBUILD_TARGET_ARCH)\"
ifdef VPOX_WITH_DBUS
 VPoxClient_DEFS += VPOX_WITH_DBUS
endif

VPoxClient_DEFS.linux += _GNU_SOURCE
VPoxClient_INCS = $(VPOX_GRAPHICS_INCS)
VPoxClient_INCS += ../x11include/panoramiXproto-1.1
VPoxClient_INCS += ../x11include/libXrandr-1.5.2
VPoxClient_INCS += ../x11include/randrproto-1.6.0
VPoxClient_SOURCES = \
	main.cpp \
	display.cpp \
	display-svga-x11.cpp \
	seamless.cpp \
	seamless-x11.cpp \
	logging.cpp \
	hostversion.cpp

VPoxDRMClient_TEMPLATE = NewVPoxGuestR3Exe
VPoxDRMClient_DEFS += VPOX_BUILD_TARGET=\"$(KBUILD_TARGET).$(KBUILD_TARGET_ARCH)\"
VPoxDRMClient_SOURCES = \
    display-drm.cpp \
    logging.cpp


VPoxClient_SOURCES.linux = \
	chk_stubs.c
VPoxClient_LIBPATH = \
	$(VPOX_LIBPATH32_X11)
VPoxClient_LIBS.freebsd = \
	iconv
VPoxClient_LIBS.linux = \
	dl
VPoxClient_LIBS.netbsd = \
	crypt
VPoxClient_LIBS.solaris = \
	dl
VPoxClient_LIBS = \
	X11 Xt Xext Xmu
ifdef VPOX_WITH_DISTRO_XRAND_XINERAMA
 VPoxClient_DEFS += WITH_DISTRO_XRAND_XINERAMA
 VPoxClient_LIBS += Xrandr
endif

# XXX: -L comes from the template, but not rpath
VPoxClient_LDFLAGS.netbsd = \
	-Wl,-rpath /usr/X11R7/lib

ifdef VPOX_WITH_DRAG_AND_DROP
 ifdef VPOX_DND_WITH_XTEST
 VPoxClient_DEFS += VPOX_DND_WITH_XTEST
 VPoxClient_LIBS += \
	Xtst
 endif
endif

# This forces the memcpy references in the static libraries to go to
# __wrap_memcpy, which we can wrap around memcpy@GLIBC_2.2.5.  I do not know
# how else to do that without recompiling or implementing our own memcpy.
ifeq ($(KBUILD_TARGET),linux)
VPoxClient_LDFLAGS.amd64 += \
	-Wl,--wrap=memcpy
endif

ifdef VPOX_WITH_GUEST_PROPS
VPoxClient_DEFS += VPOX_WITH_GUEST_PROPS
endif

ifdef VPOX_WITH_DRAG_AND_DROP
VPoxClient_DEFS += \
	VPOX_WITH_DRAG_AND_DROP \
	$(if $(VPOX_WITH_DRAG_AND_DROP_GH),VPOX_WITH_DRAG_AND_DROP_GH,)
VPoxClient_SOURCES += \
	draganddrop.cpp
VPoxClient_LIBS     += \
	$(VPOX_LIB_VBGL_R3) \
	$(PATH_STAGE_LIB)/additions/VPoxDnDGuestR3Lib$(VPOX_SUFF_LIB)
endif

ifdef VPOX_WITH_SHARED_CLIPBOARD
 VPoxClient_DEFS += \
	VPOX_WITH_SHARED_CLIPBOARD \
	$(if $(VPOX_WITH_SHARED_CLIPBOARD_TRANSFERS),VPOX_WITH_SHARED_CLIPBOARD_TRANSFERS,)
 VPoxClient_SOURCES += \
	$(PATH_ROOT)/src/VPox/GuestHost/SharedClipboard/clipboard-common.cpp \
	$(PATH_ROOT)/src/VPox/GuestHost/SharedClipboard/clipboard-x11.cpp \
	clipboard.cpp
 ifdef VPOX_WITH_SHARED_CLIPBOARD_TRANSFERS
  VPoxClient_DEFS    += VPOX_WITH_SHARED_CLIPBOARD_GUEST
  VPoxClient_SOURCES += \
	$(PATH_ROOT)/src/VPox/GuestHost/SharedClipboard/clipboard-transfers.cpp \
	$(PATH_ROOT)/src/VPox/GuestHost/SharedClipboard/ClipboardPath.cpp
  ifdef VPOX_WITH_SHARED_CLIPBOARD_FUSE
   VPoxClient_DEFS    += VPOX_WITH_SHARED_CLIPBOARD_FUSE
   # @todo Make this dynamic loading more generic.
   VPoxClient_SOURCES += \
	$(PATH_ROOT)/src/VPox/ImageMounter/vpoximg-mount/fuse.cpp \
	clipboard-fuse.cpp
   # @todo Ditto.
   VPoxClient_INCS    += \
	$(PATH_ROOT)/src/VPox/ImageMounter/vpoximg-mount
  endif
 endif
endif

if defined(VPOX_WITH_TESTCASES) && !defined(VPOX_ONLY_ADDITIONS) && !defined(VPOX_ONLY_SDK)
 if1of ($(KBUILD_TARGET), freebsd linux netbsd openbsd solaris)

# Set this in LocalConfig.kmk if you are working on the X11 clipboard service
# to automatically run the unit test at build time.
#       OTHERS += $(tstSeamlessX11-auto_0_OUTDIR)/tstSeamlessX11-auto.run

  PROGRAMS += tstSeamlessX11-auto
  tstSeamlessX11-auto_TEMPLATE = VPOXR3TSTEXE
  tstSeamlessX11-auto_SOURCES = \
          testcase/tstSeamlessX11-auto.cpp \
          seamless-x11.cpp
  tstSeamlessX11-auto_DEFS = TESTCASE
  tstSeamlessX11-auto_LIBS = \
          $(LIB_RUNTIME)

  TESTING  += $(tstSeamlessX11-auto_0_OUTDIR)/tstSeamlessX11-auto
$$(tstSeamlessX11-auto_0_OUTDIR)/tstSeamlessX11-auto.run: \
       $$(tstSeamlessX11-auto_1_STAGE_TARGET)
	export VPOX_LOG_DEST=nofile; $(tstSeamlessX11-auto_1_STAGE_TARGET) quiet
	$(QUIET)$(APPEND) -t "$@" "done"

  #
  # Additional testcase designed to be run manually, which initiates and starts the Linux
  # guest client part of the seamless additions in the host, faking seamless events from
  # the host and writing information about guest events to standard output.
  #
  PROGRAMS += tstSeamlessX11
  tstSeamlessX11_TEMPLATE = VPOXR3TSTEXE
  tstSeamlessX11_SOURCES = \
          testcase/tstSeamlessX11.cpp \
          seamless.cpp \
          seamless-x11.cpp
  tstSeamlessX11_LIBPATH = \
          $(VPOX_LIBPATH_X11)
  tstSeamlessX11_LIBS = \
          $(LIB_RUNTIME) \
          Xext \
          Xmu \
          X11
 endif
endif

include $(FILE_KBUILD_SUB_FOOTER)
