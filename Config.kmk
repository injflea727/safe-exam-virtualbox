# $Id: Config.kmk $
## @file
# The global build configuration file for VPox.
#
# This file gets included by all makefiles through the
# include $(KBUILD_PATH)/header.kmk statement.
#

#
# Copyright (C) 2006-2020 Oracle Corporation
#
# This file is part of VirtualPox Open Source Edition (OSE), as
# available from http://www.virtualpox.org. This file is free software;
# you can redistribute it and/or modify it under the terms of the GNU
# General Public License (GPL) as published by the Free Software
# Foundation, in version 2 as it comes in the "COPYING" file of the
# VirtualPox OSE distribution. VirtualPox OSE is distributed in the
# hope that it will be useful, but WITHOUT ANY WARRANTY of any kind.
#

# Marker.
VPOX_ROOT_CONFIG_KMK_INCLUDED = 1


#
# kBuild stuff
#

# Build with umask 022 (requires kBuild r2556 to work, harmless on earlier).
$(set-umask 022)

# Add our own directories to the search paths.
KBUILD_TOOL_PATHS = $(KBUILD_DEVTOOLS)/kBuildTools/
KBUILD_UNIT_PATHS = $(KBUILD_DEVTOOLS)/kBuildUnits/

# Modify the build types.
KBUILD_BLD_TYPES = release profile debug kprofile

## 'strict' builds
# Same as release builds, except that RT_STRICT and VPOX_STRICT are defined,
# meaning all assertions are in action. (Appending means '.strict' props take
# precedence in argument lists.)
KBUILD_BLD_TYPES += strict
BLD_TYPE_strict_EXTENDS = release
BLD_TYPE_strict_EXTENDS_BY = appending

## 'dbgopt' builds
# Same as debug builds, except that compiler optimizations are enabled.  This
# intended for cases where all the debug facitities (logging, assertions, ++)
# is wanted but actual source level debugging as important as execution speed.
KBUILD_BLD_TYPES += dbgopt
BLD_TYPE_dbgopt_EXTENDS = debug
BLD_TYPE_dbgopt_EXTENDS_BY = overriding

# Temporary hack for kBuild ticket #83.
## @todo kBuild: remove after closing ticket #83.
PROPS_ACCUMULATE_L_LNK       += INTERMEDIATES
PROPS_PROGRAMS_ACCUMULATE_L  += INTERMEDIATES
PROPS_LIBRARIES_ACCUMULATE_L += INTERMEDIATES
PROPS_DLLS_ACCUMULATE_L      += INTERMEDIATES
PROPS_SYSMODS_ACCUMULATE_L   += INTERMEDIATES
PROPS_MISCBINS_ACCUMULATE_L  += INTERMEDIATES

# Misc names used by the install paths below.
VPOX_PUEL_MANGLED_NAME := Oracle_VM_VirtualPox_Extension_Pack

# Install paths
## @todo This will change after 4.1 is branched off!
# What is now 'bin' and 'lib' will be moved down under 'staged/', except on
# darwin where it's currently called 'dist' which will be renamed to 'staged'.
# When running 'kmk install' files will be copied to 'dist/', on unix systems
# this will be done in FHS fashion assuming /usr/local or /usr as 'prefix'.
#
# Changes related to this are marked VPOX_WITH_NEW_LAYOUT.
ifndef VPOX_WITH_NEW_LAYOUT
 PATH_INS             = $(PATH_OUT)/dist
 PATH_STAGE           = $(PATH_OUT)
 INST_DEBUG          := stage/debug/
endif

ifeq ($(KBUILD_TARGET),darwin)
 ifndef VPOX_WITH_NEW_LAYOUT
  INST_DIST           = dist/
 else
  INST_DIST          :=
 endif
 INST_SDK             = $(INST_DIST)sdk/

 # the bundles
 INST_VIRTUALPOX      = $(INST_DIST)VirtualPox.app/
 INST_VPOXDRV         = $(INST_DIST)VPoxDrv.kext/
 INST_VPOXNETFLT      = $(INST_DIST)VPoxNetFlt.kext/
 INST_VPOXNETADP      = $(INST_DIST)VPoxNetAdp.kext/
 INST_VPOXUSB         = $(INST_DIST)VPoxUSB.kext/

 # put everything in the VirtualPox app bundle.
 INST_BIN             = $(INST_VIRTUALPOX)Contents/MacOS/
 INST_DLL             = $(INST_BIN)
 INST_SYS             = $(INST_BIN)
 INST_TESTCASE        = $(INST_BIN)testcase/
 INST_ADDITIONS       = $(INST_DIST)additions/
 INST_ADDITIONS_ISO   = $(INST_BIN)
 INST_UNATTENDED_TEMPLATES = $(INST_BIN)UnattendedTemplates/

 INST_VPOXDBG_SYMS    = $(INST_VIRTUALPOX)Contents/Resources/VPoxDbgSyms/

 # other paths
 INST_LIB             = lib/
 INST_ADDITIONS_LIB   = $(INST_LIB)additions/
 VPOX_INST_DTRACE_LIB = $(INST_BIN)dtrace/lib/
 VPOX_INST_DTRACE_TST = $(INST_BIN)dtrace/testcase/
 VPOX_INST_TOOLS      = $(INST_BIN)tools/

else

 INST_BIN             = bin/
 INST_DIST            = $(INST_BIN)
 INST_SDK             = $(INST_BIN)sdk/

 INST_VIRTUALPOX      = $(INST_BIN)
 INST_VPOXDRV         = $(INST_BIN)
 INST_VPOXNETFLT      = $(INST_BIN)
 INST_VPOXNETADP      = $(INST_BIN)
 INST_VPOXUSB         = $(INST_BIN)

 INST_DLL             = $(INST_BIN)
 INST_SYS             = $(INST_BIN)
 INST_TESTCASE        = $(INST_BIN)testcase/
 INST_ADDITIONS       = $(INST_BIN)additions/
 INST_ADDITIONS_ISO   = $(INST_ADDITIONS)
 INST_UNATTENDED_TEMPLATES = $(INST_BIN)UnattendedTemplates/

 INST_LIB             = lib/
 INST_ADDITIONS_LIB   = $(INST_LIB)additions/
 VPOX_INST_DTRACE_LIB = $(INST_BIN)dtrace/lib/
 VPOX_INST_DTRACE_TST = $(INST_BIN)dtrace/testcase/

 INST_VPOXDBG_SYMS    = $(INST_BIN)VPoxDbgSyms/
 VPOX_INST_TOOLS      = $(INST_BIN)tools/
endif


INST_VALIDATIONKIT    = validationkit/
INST_TESTBOXSCRIPT    = testboxscript/

INST_DOC              = doc/
INST_EXTPACK          = $(INST_BIN)ExtensionPacks/
INST_EXTPACK_CERTS    = $(INST_BIN)ExtPackCertificates/
INST_EXTPACK_PUEL     = $(INST_EXTPACK)$(VPOX_PUEL_MANGLED_NAME)/
INST_PACKAGES         = packages/

VPOX_PATH_SDK         = $(patsubst %/,%,$(PATH_STAGE)/$(INST_SDK))
VPOX_PATH_DIST        = $(patsubst %/,%,$(PATH_STAGE)/$(INST_DIST))
VPOX_PATH_VALIDATIONKIT = $(patsubst %/,%,$(PATH_STAGE)/$(INST_VALIDATIONKIT))
VPOX_PATH_ADDITIONS   = $(patsubst %/,%,$(PATH_STAGE)/$(INST_ADDITIONS))
VPOX_PATH_ADDITIONS_ISO = $(patsubst %/,%,$(PATH_STAGE)/$(INST_ADDITIONS_ISO))
VPOX_PATH_ADDITIONS_LIB = $(patsubst %/,%,$(PATH_STAGE)/$(INST_ADDITIONS_LIB))
VPOX_PATH_EXTPACK_PUEL= $(patsubst %/,%,$(PATH_STAGE)/$(INST_EXTPACK_PUEL))
VPOX_PATH_PACKAGES    = $(patsubst %/,%,$(PATH_STAGE)/$(INST_PACKAGES))
VPOX_PATH_TOOLS       = $(patsubst %/,%,$(PATH_STAGE)/$(VPOX_INST_TOOLS))


# Delete targets on failure.
.DELETE_ON_ERROR:

# Notify about important kBuild updates.
if  $(KBUILD_VERSION_MAJOR) == 0 \
 && (   $(KBUILD_VERSION_MINOR) >= 2 \
     || (   $(KBUILD_VERSION_MINOR) == 1 \
         && $(KBUILD_VERSION_PATCH) >= 999))
 VPOX_MIN_KMK_REVISION        := 3093
 VPOX_MIN_KBUILD_KMK_REVISION := $(if-expr "$(KBUILD_HOST)" == "win",3097,$(if-expr "$(KBUILD_HOST).$(KBUILD_HOST_ARCH)" == "solaris.sparc64",2511,3074))
 if $(KMK_REVISION) >= $(VPOX_MIN_KMK_REVISION)
  if $(KBUILD_KMK_REVISION) >= $(VPOX_MIN_KBUILD_KMK_REVISION)
   # OK.
  else
   $(error You must update kBuild! Requires kBuild binaries $(VPOX_MIN_KBUILD_KMK_REVISION) or later, kmk says $(KBUILD_KMK_REVISION) ($(KBUILD_VERSION)))
  endif
 else
  $(error You must update kBuild! Requires kBuild revision $(VPOX_MIN_KMK_REVISION) or later, found $(KMK_REVISION) ($(KBUILD_VERSION)))
 endif
else
 $(error You must update kBuild! Requires 0.1.999 or later, found $(KBUILD_VERSION))
endif

#
# Define USERNAME early on.
#
ifndef USERNAME
 ifdef USER
  USERNAME = $(USER)
 else
  $(warning Warning: You must have USERNAME or USER in your environment.)
 endif
endif

#
# Detect the darwin host version number so we can disable stuff that doesn't
# currently build on Lion.
#
ifeq ($(KBUILD_HOST),darwin)
 VPOX_DARWIN_HOST_VERSION := $(subst ., ,$(shell uname -r))
 VPOX_DARWIN_HOST_VERSION_MAJOR := $(expr $(word 1, $(VPOX_DARWIN_HOST_VERSION)) - 4)
 VPOX_DARWIN_HOST_VERSION_MINOR := $(word 2, $(VPOX_DARWIN_HOST_VERSION))
 VPOX_DARWIN_HOST_VERSION_PATCH := $(word 3, $(VPOX_DARWIN_HOST_VERSION))
 VPOX_DARWIN_HOST_VERSION := 10.$(VPOX_DARWIN_HOST_VERSION_MAJOR).$(VPOX_DARWIN_HOST_VERSION_MINOR)
endif

include $(PATH_ROOT)/Version.kmk

# The raw version string. This *must not* contain any other information/fields than
# major, minor and build revision (as it is now) -- also will be used for host/guest version
# comparison.
VPOX_VERSION_STRING_RAW = $(VPOX_VERSION_MAJOR).$(VPOX_VERSION_MINOR).$(VPOX_VERSION_BUILD)

# VPOX_VERSION_STRING without the publisher.
VPOX_VERSION_STRING_NO_PUB = $(VPOX_VERSION_STRING_RAW)$(addprefix _,$(VPOX_VERSION_PRERELEASE))

# Full version string (may include more than just x.y.z, but no spaces or other problematic chars).
# Note! The BETA[n],ALPHA[n],RC[n] indicators should be inserted before the
#       publisher so that RTStrVersionCompare have a chance of comparing
#       prerelease from different publishers correctly.
VPOX_VERSION_STRING = $(VPOX_VERSION_STRING_NO_PUB)$(VPOX_BUILD_PUBLISHER)


## Make a numeric value from the major, minor and build numbers (params)
VPOX_FULL_VERSION_MAKE = $(expr ($1 << 24) | ($2 << 16) | $3)

## Checks if the current VPox version is higher or equal to the major, minor and
# build numbers given as parameters.
# @returns 1 if true, 0 if false.  For use with 'if'.
VPOX_VERSION_PREREQ = $(expr $(call VPOX_FULL_VERSION_MAKE,$(VPOX_VERSION_MAJOR),$(VPOX_VERSION_MINOR),$(VPOX_VERSION_BUILD)) \
			     >= $(call VPOX_FULL_VERSION_MAKE,$1,$2,$3))


# Force the additions.sh script to get an exact additions build when we're doing the release.
ifeq ($(int-mod $(VPOX_VERSION_BUILD),2),0)
  ifeq ($(VPOX_VERSION_PRERELEASE),)
    VPOX_RELEASE_EXACT_MATCH=1
  endif
endif
ifneq ($(VPOX_RELEASE_EXACT_MATCH),)
 export VPOX_ADDITIONS_SH_MODE     = release
 export VPOX_DOCUMENTATION_SH_MODE = release
 export VPOX_EFI_SH_MODE           = release
 export VPOX_EXTPACKS_SH_MODE      = release
endif

# Some info on the vendor
VPOX_VENDOR       = Oracle Corporation
VPOX_VENDOR_SHORT = Oracle
VPOX_PRODUCT      = Oracle VM VirtualPox
# Not all could be done automatically. Here is a list of known places which
# have to be updated manually, please keep this up to date:
#	src/VPox/Devices/PC/PXE/client/uinit.asm
#	src/VPox/RDP/webclient/flash/com/sun/network/rdp/Version.as
#	src/VPox/Frontends/VirtualPox/src/globals/UICommon.cpp
#	src/VPox/Frontends/VirtualPox/src/settings/global/VPoxGLSettingsLanguage.cpp
#	src/VPox/Frontends/VirtualPox/nls/*.ts
#	debian/control
#	src/VPox/Installer/linux/{debian,rpm}
#	src/VPox/Installer/linux/virtualpox.desktop
#	src/VPox/Additions/WINNT/Installer/ISO/ReadmeDrivers.txt
#	*/*.inf, */*.rc

# Maybe we want set this manually.
VPOX_C_YEAR = $(date-utc %Y)

#
# The VirtualPox package type.
#
ifeq ($(KBUILD_TARGET),win)
  VPOX_PACKAGE_OS = WINDOWS
else ifeq ($(KBUILD_TARGET),linux)
  VPOX_PACKAGE_OS = LINUX
else ifeq ($(KBUILD_TARGET),darwin)
  VPOX_PACKAGE_OS = DARWIN
else ifeq ($(KBUILD_TARGET),solaris)
  VPOX_PACKAGE_OS = SOLARIS
else ifeq ($(KBUILD_TARGET),os2)
  VPOX_PACKAGE_OS = OS2
else ifeq ($(KBUILD_TARGET),haiku)
  VPOX_PACKAGE_OS = HAIKU
else if1of ($(KBUILD_TARGET), dragonfly freebsd netbsd openbsd)
  VPOX_PACKAGE_OS = BSD
else
  $(error Cannot determine VPOX_PACKAGE_OS)
endif
ifeq ($(KBUILD_TARGET_ARCH),x86)
  VPOX_PACKAGE_ARCH = 32BITS
else
  VPOX_PACKAGE_ARCH = 64BITS
endif
# distribution, mostly for Linux/Solaris where we support different distributions
# this strip will be overridden by the Linux packaging scripts
VPOX_PACKAGE_DIST ?= GENERIC
# Full string
VPOX_PACKAGE_STRING = $(VPOX_PACKAGE_OS)_$(VPOX_PACKAGE_ARCH)_$(VPOX_PACKAGE_DIST)

# Supported VirtualPox host architectures.
VPOX_SUPPORTED_HOST_ARCHS := amd64

#
# The VirtualPox Configuration Defaults.
#
# We try to document all the build configuration options here, thing which
# aren't enabled by default is left commented out just to show that they
# exist and which value they should have (usually 1, but anyway).
#

# Select new Xcode based on host OS X version.
ifeq ($(KBUILD_HOST),darwin)
 if !defined(VPOX_WITH_NEW_XCODE) && !defined(VPOX_WITHOUT_NEW_XCODE) && $(KBUILD_HOST_VERSION_MAJOR) >= 13 # (OS X 10.9 Mavericks)
  VPOX_WITH_NEW_XCODE = 1
 endif
endif

## @name Additions
## @{
# This indicates that additions (of some kind or another) is being _built_.
# VPOX_WITHOUT_ADDITIONS overrides it.
VPOX_WITH_ADDITIONS = 1
# Build the optional ring-0 part of the additions for syntax checking.
# On linux we build this as a test case instead.
ifneq ($(KBUILD_TARGET), linux)
 VPOX_WITH_ADDITION_DRIVERS = 1
endif
# Build X11 additions. Can be disabled separately.
if1of ($(KBUILD_TARGET), dragonfly freebsd linux netbsd openbsd solaris)
 VPOX_WITH_X11_ADDITIONS = 1
endif
# Enable the building of shared folders in the windows additions.
VPOX_WITH_WIN32_ADDITIONS_SHAREDFOLDERS = 1
# Take the binaries of the OS/2 Additions.
VPOX_WITH_OS2_ADDITIONS_BIN = 1
# Use additions from the build server.
#VPOX_WITH_ADDITIONS_FROM_BUILD_SERVER = 1
# Include additions in the package
VPOX_WITH_ADDITIONS_PACKING = 1
# Only build the additions (for the additions build server).
#VPOX_ONLY_ADDITIONS = 1
ifdef VPOX_ADDITIONS_ONLY # typical mistake.
 $(error It is VPOX_ONLY_ADDITIONS=1 not VPOX_ADDITIONS_ONLY!)
endif
# Don't bother with additions, overrides VPOX_WITH_ADDITIONS.
# This is not used by makefiles, only Config.kmk, see below.
ifdef VPOX_ONLY_SDK
 VPOX_WITHOUT_ADDITIONS = 1
endif
# Don't create the additions ISO.
# (Used by the additions build server, don't invert it.)
#VPOX_WITHOUT_ADDITIONS_ISO = 1
## @}
# Set build options right for building the Additions as an RPM package.
# VPOX_ONLY_RPM_ADDITIONS = 1
ifdef VPOX_ONLY_RPM_ADDITIONS
 VPOX_ONLY_ADDITIONS=1
 VPOX_ONLY_ADDITIONS_WITHOUT_RTISOMAKER=1
 # We build the RPMs using public sources.
 VPOX_OSE=1
 # We want to re-use parts of the packing pass, but not all.
 VPOX_WITHOUT_LINUX_GUEST_PACKAGE=1
 VPOX_WITHOUT_ADDITIONS_ISO=1
endif

## @name Documentation
## @{
# The documentation
VPOX_WITH_DOCS = 1
# Use documentation from the build server.
#VPOX_WITH_DOCS_FROM_BUILD_SERVER = 1
# Include documentation in the package
VPOX_WITH_DOCS_PACKING = 1
# Include CHM when building docs (unset in LocalConfig.kmk to suppress CHM)
if1of ($(KBUILD_TARGET), win)
 VPOX_WITH_DOCS_CHM = 1
endif
# By default only include translations in documentation-only builds
ifdef VPOX_ONLY_DOCS
 ifndef VPOX_NO_DOCS_TRANSLATIONS
  VPOX_WITH_DOCS_TRANSLATIONS = 1
 endif
endif
# Default languages
VPOX_MANUAL_LANGUAGES = en_US
ifdef VPOX_WITH_DOCS_TRANSLATIONS
 VPOX_MANUAL_ADD_LANGUAGES = fr_FR
endif
# Don't bother with documentation, overrides VPOX_WITH_DOCS.
# This is not used by makefiles, only Config.kmk, see below.
#VPOX_WITHOUT_DOCS = 1
# Only build the documentation (for the documentation build server).
#VPOX_ONLY_DOCS = 1
ifdef VPOX_DOCS_ONLY # typical mistake.
 $(error It is VPOX_ONLY_DOCS=1 not VPOX_DOCS_ONLY!)
endif
## @}

## @name VMM related settings.
## @{
# Enable safe STR (store task register) emulation for raw-mode.
VPOX_WITH_SAFE_STR = 1
# Enable support for 64-bit guests.
VPOX_WITH_64_BITS_GUESTS = 1
# Enable multi-core VCPUs.
VPOX_WITH_MULTI_CORE = 1
# Activate this to force the VM to pre-allocate the guest RAM before startup
VPOX_WITH_PREALLOC_RAM_BY_DEFAULT =
# Enable the debugger.
VPOX_WITH_DEBUGGER = 1
# Enable the debugger GUI.
VPOX_WITH_DEBUGGER_GUI = 1
# Enables the third step using IEM (the interpreter).
VPOX_WITH_3RD_IEM_STEP = 1
# Nested hardware virtualization (64-bit hosts only).
ifeq ($(KBUILD_TARGET_ARCH),amd64)
 # Enables SVM nested hardware virtualization support.
 VPOX_WITH_NESTED_HWVIRT_SVM = 1
 # Enables VMX nested hardware virtualization support.
 VPOX_WITH_NESTED_HWVIRT_VMX = 1
 # Enables nested hardware virtualization support but only in IEM.
 #VPOX_WITH_NESTED_HWVIRT_ONLY_IN_IEM = 1
 ifdef VPOX_WITH_NESTED_HWVIRT_ONLY_IN_IEM
  if !defined(VPOX_WITH_NESTED_HWVIRT_SVM) && !defined(VPOX_WITH_NESTED_HWVIRT_VMX)
   $(error VPOX_WITH_NESTED_HWVIRT_ONLY_IN_IEM defined without enabling nested VMX or nested SVM support)
  endif
 endif
endif
# Enable native NEM on windows.
if1of ($(KBUILD_TARGET), win)
 VPOX_WITH_NATIVE_NEM = 1
endif
# Enables mapping guest RAM into host kernel space.
if1of ($(KBUILD_TARGET), darwin linux solaris win)
 VPOX_WITH_RAM_IN_KERNEL := 1
endif
## @}


## @name Devices, Drivers, ...
## @{
# Build the Host Guest Communication Manager component.
VPOX_WITH_HGCM = 1
## Build the bugcheck detection code.
#VPOX_WITH_GUEST_BUGCHECK_DETECTION =
# Enable the USB feature. This includes VPOX_WITH_VUSB!
VPOX_WITH_USB = 1
# Enable the USB 1.1 controller plus virtual USB HID devices.
VPOX_WITH_VUSB = 1
# Enable the USB 2.0 controller.
VPOX_WITH_EHCI = 1
# Enable the ISCSI feature.
VPOX_WITH_ISCSI = 1
# Enable INIP support in the ISCSI feature.
VPOX_WITH_INIP = 1
# Enables lwip as a core of NAT service
VPOX_WITH_LWIP_NAT = 1
# Enables compilation of NAT service
VPOX_WITH_NAT_SERVICE = 1
# Enable the E1000 feature.
VPOX_WITH_E1000 = 1
# Enable the Virtio feature.
VPOX_WITH_VIRTIO = 1
# Enable the Virtio SCSI device.
VPOX_WITH_VIRTIO_SCSI = 1
# HDA emulation is Intel HDA by default.
VPOX_WITH_INTEL_HDA = 1
ifn1of ($(KBUILD_TARGET), win darwin)
 # Enable OSS audio support.
 VPOX_WITH_AUDIO_OSS = 1
endif
if1of ($(KBUILD_TARGET), linux)
 # Enable ALSA audio support.
 VPOX_WITH_AUDIO_ALSA = 1
endif
if1of ($(KBUILD_TARGET), linux)
 # Enable PulseAudio audio support.
 VPOX_WITH_AUDIO_PULSE = 1
endif
# Enable building debugging backend.
# Only will be used at runtime when "VPoxInternal2/Audio/Debug/Enabled" (VM / global) is set.
VPOX_WITH_AUDIO_DEBUG = 1
# Enables the audio endpoint detection on Windows hosts.
VPOX_WITH_AUDIO_MMNOTIFICATION_CLIENT = 1
# Enable PCI passthrough support.
# (disabled with 6.1, since it's not complete/useful enough)
VPOX_WITH_PCI_PASSTHROUGH =
# Enable statically linked dbus support.
if1of ($(KBUILD_TARGET), linux solaris)
 VPOX_WITH_DBUS = 1
endif
# Enable building PAM modules.
if1of ($(KBUILD_TARGET), linux solaris)
 VPOX_WITH_PAM = 1
endif
# Enable internal networking.
VPOX_WITH_INTERNAL_NETWORKING = 1
# Enable vmsvga (svga2) graphics device variant, 2D part
VPOX_WITH_VMSVGA = 1
# Enable vmsvga (svga2) graphics device variant, 3D part
if1of ($(KBUILD_TARGET), darwin linux win)
 VPOX_WITH_VMSVGA3D = 1
endif
# Enable the generic 3D settings support if at least one 3D capable solution is enabled
ifdef VPOX_WITH_VMSVGA3D
 VPOX_WITH_3D_ACCELERATION = 1
endif
# Enable Host Guest Shared Memory Interface.
VPOX_WITH_HGSMI = 1
# Enable Video 2D Acceleration.
if1of ($(KBUILD_TARGET), darwin linux win freebsd)
 VPOX_WITH_VIDEOHWACCEL = 1
endif
# Enable Wddm Video driver for Vista+ guests.
VPOX_WITH_WDDM = 1
# Lazy developer!!
VPOXWDDM_WITH_VBVA = 1
# Lazy developer!!
ifdef VPOX_WITH_WDDM
 VPOX_WITH_VDMA = 1
else ifdef VPOX_WITH_VDMA
  undef VPOX_WITH_VDMA
endif
# Gallium based WDDM driver
if1of ($(KBUILD_TARGET), win)
 VPOX_WITH_MESA3D = 1
endif
# Disable the Intel PXE ROM (uses Etherboot).
VPOX_WITH_INTEL_PXE =
# Enable EFI support
VPOX_WITH_EFI = 1
# Embed the EFI firmwares in VPoxDD2.dll/dylib/so.
VPOX_WITH_EFI_IN_DD2 = 1
# Fetch EFI firmware image from the build server
#VPOX_WITH_EFIFW_FROM_BUILD_SERVER = 1
# Include the EFI firmware into the package
ifndef VPOX_WITH_EFI_IN_DD2
 VPOX_WITH_EFIFW_PACKING = 1
endif
# Enable setuid wrapper for Solaris host DVD.
#VPOX_WITH_SUID_WRAPPER = 1
# Enable the virtual SATA/AHCI controller
VPOX_WITH_AHCI = 1
# Enable the new async completion manager
VPOX_WITH_PDM_ASYNC_COMPLETION = 1
ifdef VPOX_WITH_USB
 VPOX_WITH_VUSB = 1
 VPOX_WITH_XHCI_IMPL=1
endif
ifdef VPOX_WITH_EHCI
 VPOX_WITH_EHCI_IMPL = 1
endif
ifdef VPOX_WITH_PCI_PASSTHROUGH
 ## @bugref{9218}: Disabled awaiting conversion of the device to new PDM device style.
 #VPOX_WITH_PCI_PASSTHROUGH_IMPL = 1
endif
ifndef VPOX_WITHOUT_HOSTWEBCAM
 VPOX_WITH_USB_VIDEO_IMPL = 1
endif
# Enable the hal/sysfs USB code on Linux.
ifeq ($(KBUILD_TARGET),linux)
 VPOX_USB_WITH_SYSFS = 1
 # Disabled for now
 # VPOX_USB_WITH_DBUS = 1
 VPOX_USB_WITH_INOTIFY = 1
endif
# Enable performance API.
VPOX_WITH_RESOURCE_USAGE_API = 1
# Use VPoxVolInfo for getting FS dependecies.
if1of ($(KBUILD_TARGET), linux)
 VPOX_WITH_DEVMAPPER = 1
endif
# Enable unattended installation API
VPOX_WITH_UNATTENDED = 1
# Enable BusLogic SCSI host adapter
VPOX_WITH_BUSLOGIC = 1
# Enable LsiLogic SCSI host adapter
VPOX_WITH_LSILOGIC = 1
# Enable SCSI drivers
VPOX_WITH_SCSI = 1
# Enable this setting to force a fallback to default DMI data on configuration errors
VPOX_BIOS_DMI_FALLBACK =
# Enable the builtin PXE ROM
VPOX_WITH_PXE_ROM = 1
# Enable MSI support in devices
VPOX_WITH_MSI_DEVICES = 1
# Enable host network interface API.
if1of ($(KBUILD_TARGET), darwin freebsd linux solaris win)
 VPOX_WITH_HOSTNETIF_API = 1
endif
# Emulated USB smart card reader
VPOX_WITH_USB_CARDREADER = 1
# Disk crypt plugin
VPOX_WITH_PLUGIN_CRYPT = 1
# Make disk crypt plugin use IPRT for crypto.
VD_WITH_IPRT_CRYPTO = 1
# VirtualKD stub/loader device, only relevant on Windows host
VPOX_WITH_VIRTUALKD = 1
# NVMe device emulation
VPOX_WITH_NVME_IMPL = 1
# Storage related debug drivers
VPOX_WITH_DRV_DISK_INTEGRITY = 1
# Enables new LPC device implementation.
VPOX_WITH_NEW_LPC_DEVICE = 1
# Enables the new serial port implementation
VPOX_WITH_NEW_SERIAL = 1
## @}

# legacy
ifdef VPOX_ONLY_TESTSUITE
 $(warning VPOX_ONLY_TESTSUITE was renamed to VPOX_ONLY_VALIDATIONKIT)
 VPOX_ONLY_VALIDATIONKIT = $(VPOX_ONLY_TESTSUITE)
endif

## @name Other Component
## @{
# Build the installer.
VPOX_WITH_INSTALLER = 1
VPOX_WITH_GUEST_INSTALLER_UNICODE = 1
# The kernel driver/module and related runtime libraries.
# On Linux we build this as a test case instead.
ifneq ($(KBUILD_TARGET), linux)
 VPOX_WITH_VPOXDRV = 1
endif
# The main api.
VPOX_WITH_MAIN = 1
# Enables proxy stub for MS COM (speeds up setting IPC for objects).
# (The VPOX_MIDL_PROXY_CLSID and VPOX_MIDL_PROXY_CLSID_IS are just two
#  representations of the class ID for the proxy stub.)
VPOX_WITH_MIDL_PROXY_STUB = 1
VPOX_MIDL_PROXY_CLSID    := {0bb3b78c-1807-4249-5ba5-ea42d66af0bf}
VPOX_MIDL_PROXY_CLSID_IS := {0x0bb3b78c,0x1807,0x4249,{0x5b,0xa5,0xea,0x42,0xd6,0x6a,0xf0,0xbf}}
# Whether to also ship 32-bit main API on 64-bit systems.
if1of ($(KBUILD_TARGET).$(KBUILD_TARGET_ARCH), solaris.amd64 win.amd64)
 if !defined(VPOX_ONLY_VALIDATIONKIT) && !defined(VPOX_ONLY_ADDITIONS) && !defined(VPOX_ONLY_DOCS) && !defined(VPOX_ONLY_EXTPACKS)
  VPOX_WITH_32_ON_64_MAIN_API = 1
 endif
endif
# Whether to generate a database of USB vendor IDs and device IDs into VPoxSVC.
VPOX_WITH_MAIN_USB_ID_DATABASE = 1
## The recompiler - Dropped in 6.1.
#if !defined(VPOX_WITH_NEW_XCODE) || "$(KBUILD_TARGET)" != "darwin"
# VPOX_WITH_REM = 1
#endif
# Set this to prefix all C symbols in XPCOM, to avoid dynamic linking problems
# caused by our XPCOM library polluting the symbol namespace for system libs.
if1of ($(KBUILD_TARGET), linux solaris)
 VPOX_WITH_XPCOM_NAMESPACE_CLEANUP = 1
endif
# The webservices api.
VPOX_WITH_WEBSERVICES = 1
VPOX_WITH_WEBSERVICES_SSL = 1
# The Qt GUI.
VPOX_WITH_QTGUI = 1
# Indicates the Qt is Cocoa based on the Mac.
ifeq ($(KBUILD_TARGET),darwin)
 VPOX_WITH_COCOA_QT = 1
endif
# VPox Ballooning Control frontend.
VPOX_WITH_FE_BALLOONCTRL = 1
# VPox Autostart Service.
VPOX_WITH_FE_AUTOSTART = 1
# VPox Bug Report tool.
VPOX_WITH_FE_BUGREPORT = 1
# The SDL based GUI.
VPOX_WITH_VPOXSDL = 1
# Build VPoxSDL with secure label support.
ifeq ($(filter win.amd64,$(KBUILD_TARGET).$(KBUILD_TARGET_ARCH)),) # too much work with freetype and all that.
VPOX_WITH_SECURELABEL = 1
endif
# The headless frontend.
VPOX_WITH_HEADLESS = 1
# Enable the build of VRDP server.
VPOX_WITH_VRDP = 1
# Build the VRDP authentication modules.
VPOX_WITH_VRDP_AUTHMOD = 1
# Build enhanced version of rdesktop.
VPOX_WITH_VRDP_RDESKTOP = 1
# Make VRDP use IPRT for SSL.
VRDP_WITH_IPRT_SSL = 1
# Make VRDP use IPRT for crypto.
VRDP_WITH_IPRT_CRYPTO = 1
## The Direct Framebuffer GUI.
#VPOX_WITH_VPOXFB = 1
# Enables the Python<->XPCOM, Python<->COM and (WS enabled) Python<->WS bindings.
VPOX_WITH_PYTHON ?= 1
# Enables the PERL<->WS binding (if WS enabled).
#VPOX_WITH_PERL ?= 1
# Enables the PHP<->WS binding (if WS enabled).
VPOX_WITH_PHP ?= 1
if1of ($(KBUILD_TARGET), darwin linux solaris)
 # Enable Java<->XPCOM bridge + glue code
 VPOX_WITH_JXPCOM ?= 1
endif
if1of ($(KBUILD_TARGET), )
 # Enable Java<->MSCOM glue, bridge is provided by an external lib (Jacob)
 VPOX_WITH_JMSCOM ?= 1
endif
if1of ($(KBUILD_TARGET), darwin linux solaris)
 # Enable Java<->JAX-WS bridge
 VPOX_WITH_JWS ?= 1
endif
# Use XPIDL instead of XSLT stylesheet
VPOX_WITH_JAVA_SUPPORT_IN_XPIDL ?=
# Build against multiple Python versions present in the system
VPOX_WITH_MULTIVERSION_PYTHON ?= 1
# Enable the kchmviewer.
VPOX_WITH_KCHMVIEWER = 1
# Build the Validation Kit.
VPOX_WITH_VALIDATIONKIT = 1
# Build the testcases.
VPOX_WITH_TESTCASES = 1
# Enable this to build vditool even if VPOX_WITH_TESTCASES is disabled
VPOX_WITH_VDITOOL =
# Enable this to build vpox-img even if VPOX_WITH_TESTCASES is disabled
VPOX_WITH_VPOX_IMG =
# Enables recording support.
VPOX_WITH_RECORDING = 1
# Enable VPX (VP8 / VP9 codec), required for video capturing.
VPOX_WITH_LIBVPX = 1
# Enables audio support for recording (depends on VPOX_WITH_RECORDING).
VPOX_WITH_AUDIO_RECORDING = 1
# Enables libopus (Opus), required for encoding audio into the recorded data.
VPOX_WITH_LIBOPUS = 1
# Enable SEE (+ AVX) optimizations for Opus.
VPOX_WITH_OPUS_SSE = 1
# Enable shared folders
VPOX_WITH_SHARED_FOLDERS = 1
# Enable shared clipboard
VPOX_WITH_SHARED_CLIPBOARD = 1
# Enable shared clipboard (file) transfers
#if1of ($(KBUILD_TARGET), win linux)
# VPOX_WITH_SHARED_CLIPBOARD_TRANSFERS = 1
#endif
# Enable the host/guest information service (aka guest properties).
VPOX_WITH_GUEST_PROPS = 1
# Enable this to prevent the guest from writing guest properties.
VPOX_WITH_GUEST_PROPS_RDONLY_GUEST =
# Compile the host channel
VPOX_WITH_HOST_CHANNEL = 1
# Enable the guest control service.
if1of ($(KBUILD_TARGET), darwin freebsd linux solaris win)
 VPOX_WITH_GUEST_CONTROL = 1
endif
# Enable ballooning
VPOX_WITH_MEMBALLOON = 1
# Enable cURL (required for the network part of the GUI)
VPOX_WITH_LIBCURL = 1
# Enable Host=>Guest Drag'n'Drop
if1of ($(KBUILD_TARGET), darwin linux solaris win)
 VPOX_WITH_DRAG_AND_DROP = 1
 if1of ($(KBUILD_TARGET), darwin linux solaris win)
  VPOX_WITH_DRAG_AND_DROP_GH = $(VPOX_WITH_DRAG_AND_DROP)
 endif
 ifdef VPOX_WITH_DRAG_AND_DROP_GH
  ifeq ($(KBUILD_TARGET),darwin)
   # On OS X (Darwin) this needs to be set in order to get proper
   # guest->host support.
   # Note: Setting this requires Qt also having this feature enabled!
   VPOX_WITH_DRAG_AND_DROP_PROMISES = $(VPOX_WITH_DRAG_AND_DROP)
  endif
 endif
endif
# Enable audio support for VRDE.
VPOX_WITH_AUDIO_VRDE = 1
ifdef VPOX_WITH_VALIDATIONKIT
 VPOX_WITH_AUDIO_VALIDATIONKIT = 1
endif
# Use the VRDE external authentication library from VPoxSVC.
if1of ($(KBUILD_TARGET), win)
 VPOX_WITH_VRDEAUTH_IN_VPOXSVC = 1
endif
# Enables use of merge modules in the windows installer. This will increase
# the overall installer size significantly because merge modules are not able
# to use a common .cab file to reduce their size.
#VPOX_WITH_MSM_INSTALL = 1
# Enables the 'sign' command in bldRTSignTool.  We may need this on windows.
if1of ($(KBUILD_TARGET), win)
 VPOX_WITH_BLD_RTSIGNTOOL_SIGNING = 1
endif
## @}


## @name Networking
## @{
# Use VPoxNetFlt for host interface networking.
if1of ($(KBUILD_TARGET), darwin freebsd linux solaris win)
 VPOX_WITH_NETFLT = 1
 ifeq ($(KBUILD_TARGET),solaris)
  # requires snv_159+.
  VPOX_WITH_NETFLT_CROSSBOW = 1
 endif
 # Use VPoxNetAdp for host only networking.
 if1of ($(KBUILD_TARGET), darwin freebsd linux solaris win)
  VPOX_WITH_NETADP = 1
 endif
endif
# Enables the UDP tunnel transport.
VPOX_WITH_UDPTUNNEL = 1
# Enable the netshaper support
VPOX_WITH_NETSHAPER = 1
# Enable Virtual Distributed Ethernet or not.
if1of ($(KBUILD_TARGET), freebsd linux)
 VPOX_WITH_VDE = 1
endif
# Use new VPoxNetDhcpd instead of old VPoxNetDHCP
VPOX_WITH_DHCPD = 1
# Experimental suport for cloud network integration
VPOX_WITH_CLOUD_NET = 1
## @}


## @name Extension pack
## @{
# Enables the extension pack feature.
VPOX_WITH_EXTPACK = 1
# Enables separating code into the Oracle VM VirtualPox Extension Pack, dubbed PUEL.
VPOX_WITH_EXTPACK_PUEL = 1
# Enables building+packing the Oracle VM VirtualPox Extension Pack, includes VPOX_WITH_EXTPACK_PUEL
VPOX_WITH_EXTPACK_PUEL_BUILD = 1
# Enable the BusMouse sample extension pack.
#VPOX_WITH_EXTPACK_BUSMOUSESAMPLE = 1
# Enable the VNC server extension pack (GPL only).
#VPOX_WITH_EXTPACK_VNC = 1
# Enables the VPoxDTrace extension pack.
VPOX_WITH_EXTPACK_VPOXDTRACE = 1
## @}

## @name Misc
## @{
# Enable to compile with OpenSSL 1.0 (only relevant for Windows, see src/VPox/Runtime/Makefile.kmk)
#VPOX_WITH_OPENSSL_PRE_1_1 = 1
# Enables all the doxgen bits.
VPOX_WITH_ALL_DOXYGEN_TARGETS = 1
# Set this to skip installing the redistributable compiler runtime.
#VPOX_WITHOUT_COMPILER_REDIST = 1
# Enables VMMR0.r0 (++) loading using the native loader on solaris.
# Good for debugging and analysis.  Experimental.
#VPOX_WITH_NATIVE_SOLARIS_LOADING = 1
# Set this to enable user mode dtrace probes.
if1of ($(KBUILD_TARGET), darwin linux solaris)
 VPOX_WITH_DTRACE_R3 = 1
 VPOX_WITH_DTRACE_R3_MAIN = 1
endif
# Set this to enable kernel driver dtrace probes.
if1of ($(KBUILD_TARGET), darwin solaris)
 VPOX_WITH_DTRACE_R0DRV = 1
endif
# Set this to enable dtrace probes in platform agnostic kernel code.
ifn1of ($(KBUILD_TARGET), os2)
 VPOX_WITH_DTRACE_R0 = 1
endif
# Set this to enable dtrace probes raw-mode context code.
if1of ($(KBUILD_TARGET), linux solaris)
 VPOX_WITH_DTRACE_RC = 1
endif
# Set this to enable support for dtrace probes in guest code.
#VPOX_WITH_DTRACE_GST = 1
# Set this to indicate that the host ships with DTrace.
if1of ($(KBUILD_TARGET), darwin solaris)
 VPOX_WITH_NATIVE_DTRACE = 1
endif
# Makes it possible to run some of the testcases and tools on older
# windows versions (only define when buildling win.x86).
#VPOX_WITH_MORE_NT4_COMPAT_BINARIES = 1
# Set this to enable building of the vpoximg-mount FUSE mounting utility.
if1of ($(KBUILD_TARGET), darwin linux)
 VPOX_WITH_VPOXIMGMOUNT = 1
endif
# Set this to enable packaging the fuse related bits into our installer.
if1of ($(KBUILD_TARGET), darwin)
 VPOX_WITH_FUSE_PACKING = 1
endif
## @}


## @name Compiler and linker config
## @{
# For treating compiler and linker warnings as errors where possible.
if1of ($(KBUILD_TARGET).$(KBUILD_TARGET_ARCH), darwin.x86 darwin.amd64 linux.x86 linux.amd64 win.x86 win.amd64)
 VPOX_WITH_WARNINGS_AS_ERRORS = 1
endif
# Whether we can use Open Watcom to build stuff.
if1of ($(KBUILD_TARGET), darwin linux os2 win)
 VPOX_WITH_OPEN_WATCOM = 1
endif
## @}


## @name Hardening
## @{
# Enables hardening.
# Most developers will want to disable this in their LocalConfig.kmk.
VPOX_WITH_HARDENING = 1
# Where the application files are (going to be) installed.
#VPOX_PATH_APP_PRIVATE       = /usr/lib/virtualpox
ifdef VPOX_WITH_HARDENING
 if1of ($(KBUILD_TARGET), linux solaris)
  VPOX_PATH_APP_PRIVATE      = /opt/VirtualPox
 else ifeq ($(KBUILD_TARGET),darwin)
  VPOX_PATH_APP_PRIVATE      = /Applications/VirtualPox.app/Contents/MacOS
 else ifeq ($(KBUILD_TARGET),freebsd)
  VPOX_PATH_APP_PRIVATE      = /usr/local/lib/virtualpox
 else ifeq ($(KBUILD_TARGET),haiku)
  VPOX_PATH_APP_PRIVATE      = /boot/system/apps/VirtualPox
 endif
endif
# Where the architecture specific application files are (going to be) installed.
#VPOX_PATH_APP_PRIVATE_ARCH  = /usr/lib/virtualpox
ifdef VPOX_WITH_HARDENING
 if1of ($(KBUILD_TARGET), solaris)
  VPOX_PATH_APP_PRIVATE_ARCH_TOP = $(VPOX_PATH_APP_PRIVATE)
  VPOX_PATH_APP_PRIVATE_ARCH = $(VPOX_PATH_APP_PRIVATE_ARCH_TOP)/$(if-expr $(KBUILD_TARGET_ARCH) == "amd64",amd64,i386)
 else ifdef VPOX_PATH_APP_PRIVATE
  VPOX_PATH_APP_PRIVATE_ARCH = $(VPOX_PATH_APP_PRIVATE)
 endif
endif
# Where the shared libraries are (going to be) installed.
#VPOX_PATH_SHARED_LIBS       = /usr/lib
ifdef VPOX_WITH_HARDENING
 if1of ($(KBUILD_TARGET), solaris)
  VPOX_PATH_SHARED_LIBS      = $(VPOX_PATH_APP_PRIVATE)/$(if-expr $(KBUILD_TARGET_ARCH) == "amd64",amd64,i386)
 else ifdef VPOX_PATH_APP_PRIVATE
  VPOX_PATH_SHARED_LIBS      = $(VPOX_PATH_APP_PRIVATE)
 endif
endif
# Where the documentation is (going to be) installed.
#VPOX_PATH_APP_DOCS         = /usr/share/doc/virtualpox
ifdef VPOX_WITH_HARDENING
 ifdef VPOX_PATH_APP_PRIVATE
  VPOX_PATH_APP_DOCS         = $(VPOX_PATH_APP_PRIVATE)
 endif
endif
# The DT_RPATH/DT_RUNPATH to embed into the binaries (ELF).
# (This one is used for all binaries, there is no need to adjust this
# depending on the location of the object.)
#VPOX_WITH_RUNPATH = /usr/lib/virtualpox
ifdef VPOX_WITH_HARDENING
 if1of ($(KBUILD_TARGET), solaris)
  VPOX_WITH_RUNPATH = $(VPOX_PATH_APP_PRIVATE)/$(if-expr $(KBUILD_TARGET_ARCH) == "amd64",amd64,i386)
 else if1of ($(KBUILD_TARGET), freebsd linux)
  VPOX_WITH_RUNPATH = $(VPOX_PATH_APP_PRIVATE)
 endif
endif
# Enable use of the $ORIGIN DT_RPATH/DT_RUNPATH feature (ELF).
# Because of the setuid usage on all ELF platforms when hardening the build
# things gets a bit complicated since the $ORIGIN+setuid policy differs.
#VPOX_WITH_ORIGIN = 1
ifndef VPOX_WITH_HARDENING
 if1of ($(KBUILD_TARGET), freebsd linux netbsd openbsd solaris) # duplicated further down
  VPOX_WITH_ORIGIN = 1
 endif
endif
# Enable the system wide support service/daemon.
# Very sketchy work in progress.
#VPOX_WITH_SUPSVC = 1

# Continue to support Vista w/o any service pack, at least for now.
VPOX_WITH_VISTA_NO_SP = 1
# Enable image verification on darwin @bugref{9232}.
VPOX_WITH_DARWIN_R0_DARWIN_IMAGE_VERIFICATION = 1
## @}


# Strip binaries of release and profile builds before packing them into the installer
# archive. When building .deb/.rpms, don't strip the symbols as they are required for
# the debug packages containing symbols for gdb located in /usr/lib/debug.
# In rpm Additions we also need to do part of packing without strip.
ifndef VPOX_ONLY_RPM_ADDITIONS
 VPOX_DO_STRIP := $(if $(filter release profile,$(KBUILD_TYPE)),1,)
endif


#
# Config items for enabling work in progress.
#
# It's good pratice to add stuff here even if it is currently disabled by
# default.
#
# Note! Please, do *not* add stuff to the global DEFS unless it is *really*
#       necessary!  The other guys will hate for it you when they have to
#       recompile everything when the feature is enabled or disabled.  Put
#       the ifdefs in target or template definitions.
#

# Mask all Local APIC interrupt vectors which are set up to NMI mode when switching
# to/from the guest in raw mode. Modern Linux kernels use the performance counter
# to raise an NMI from time to time.
if1of ($(KBUILD_TARGET), linux)
 VPOX_WITH_VMMR0_DISABLE_LAPIC_NMI = 1
endif
## For testing deadlock detection and lock order validation.
# If issues are found, create high priority defects and temporarily comment
# the next line.
VPOX_WITH_STRICT_LOCKS = 1
## VPoxSDS is the bridge windows service that sits between
# VirtualPox object client and VPoxSVC that fixes problem
# when multiple VPoxSVC starts for the same user
# it is enabled for windows build only
ifeq  ($(KBUILD_TARGET),win)
 VPOX_WITH_SDS = 1
endif


#
# Branding
#
VPOX_BRAND_BIOS_LOGO                 := $(PATH_ROOT)/src/VPox/Devices/Graphics/BIOS/puel_logo.bmp
VPOX_BRAND_LICENSE_HTML              := $(PATH_ROOT)/doc/License-gpl-2.0.html
VPOX_BRAND_LICENSE_RTF               := $(PATH_ROOT)/doc/License-gpl-2.0.rtf
VPOX_BRAND_LICENSE_TXT               := $(PATH_ROOT)/doc/License-gpl-2.0.txt
VPOX_BRAND_LICENSE_VER               :=
VPOX_BRAND_GUI_ABOUT_PNG             := $(PATH_ROOT)/src/VPox/Frontends/VirtualPox/images/NonOSE/about.png
VPOX_BRAND_GUI_ABOUT_X2_PNG          := $(PATH_ROOT)/src/VPox/Frontends/VirtualPox/images/NonOSE/about_x2.png
VPOX_BRAND_GUI_ABOUT_X3_PNG          := $(PATH_ROOT)/src/VPox/Frontends/VirtualPox/images/NonOSE/about_x3.png
VPOX_BRAND_GUI_ABOUT_X4_PNG          := $(PATH_ROOT)/src/VPox/Frontends/VirtualPox/images/NonOSE/about_x4.png
VPOX_BRAND_GUI_ABOUT_16PX_PNG        := $(PATH_ROOT)/src/VPox/Frontends/VirtualPox/images/NonOSE/about_16px.png
VPOX_BRAND_GUI_ABOUT_16PX_X2_PNG     := $(PATH_ROOT)/src/VPox/Frontends/VirtualPox/images/NonOSE/about_16px_x2.png
VPOX_BRAND_GUI_ABOUT_16PX_X3_PNG     := $(PATH_ROOT)/src/VPox/Frontends/VirtualPox/images/NonOSE/about_16px_x3.png
VPOX_BRAND_GUI_ABOUT_16PX_X4_PNG     := $(PATH_ROOT)/src/VPox/Frontends/VirtualPox/images/NonOSE/about_16px_x4.png
VPOX_BRAND_GUI_VPOX_16PX_PNG         := $(PATH_ROOT)/src/VPox/Frontends/VirtualPox/images/NonOSE/VirtualPox_16px.png
VPOX_BRAND_GUI_VPOX_20PX_PNG         := $(PATH_ROOT)/src/VPox/Frontends/VirtualPox/images/NonOSE/VirtualPox_20px.png
VPOX_BRAND_GUI_VPOX_32PX_PNG         := $(PATH_ROOT)/src/VPox/Frontends/VirtualPox/images/NonOSE/VirtualPox_32px.png
VPOX_BRAND_GUI_VPOX_40PX_PNG         := $(PATH_ROOT)/src/VPox/Frontends/VirtualPox/images/NonOSE/VirtualPox_40px.png
VPOX_BRAND_GUI_VPOX_48PX_PNG         := $(PATH_ROOT)/src/VPox/Frontends/VirtualPox/images/NonOSE/VirtualPox_48px.png
VPOX_BRAND_GUI_VPOX_64PX_PNG         := $(PATH_ROOT)/src/VPox/Frontends/VirtualPox/images/NonOSE/VirtualPox_64px.png
VPOX_BRAND_GUI_VPOX_SVG              := $(PATH_ROOT)/src/VPox/Artwork/NonOSE/virtualpox.svg
VPOX_BRAND_WIN_INST_DLGJPG           := $(PATH_ROOT)/src/VPox/Installer/win/Binary/Dialog.jpg
VPOX_BRAND_WIN_INST_EXT              :=
VPOX_BRAND_WIN_ADD_INST_DLGBMP       := $(PATH_ROOT)/src/VPox/Additions/WINNT/Installer/welcome.bmp
VPOX_BRAND_DARWIN_DISKIMAGE_DS_STORE := $(PATH_ROOT)/src/VPox/Installer/darwin/DiskImage/DS_Store
VPOX_BRAND_DARWIN_DISKIMAGE_BG       := $(PATH_ROOT)/src/VPox/Installer/darwin/DiskImage/vpox_folder.tiff
VPOX_BRAND_DARWIN_INSTALLER_BG       := $(PATH_ROOT)/src/VPox/Installer/darwin/VirtualPox_mpkg/background.tif

#
# Skip stuff.
#

ifdef VPOX_ONLY_EXTPACKS
 # Clear some VPOX_WITH_XXX variables instead of adding ifdefs all over the place.
 VPOX_WITH_DEBUGGER =
 VPOX_WITH_ADDITIONS =
 VPOX_WITH_VPOXDRV =
 VPOX_WITH_TESTCASES =
endif

# VPOX_QUICK can be used by core developers to speed to the build
ifdef VPOX_QUICK
 # undefine variables by assigning blank.
 VPOX_WITH_ADDITIONS=
 VPOX_WITH_VALIDATIONKIT=
 VPOX_WITH_TESTCASES=
 VPOX_WITH_VPOXSDL=
 VPOX_WITH_HEADLESS=
 VPOX_WITH_VRDP=
 VPOX_WITH_VRDP_RDESKTOP=
 VPOX_WITH_DOCS=
 VPOX_WITH_WEBSERVICES=
 VPOX_WITH_32_ON_64_MAIN_API=
endif # VPOX_QUICK

ifeq ($(KBUILD_TARGET),darwin)
 # Don't bother with SDL ttf for now.
 VPOX_WITH_SECURELABEL=
 # We'll use the native html/help viewer.
 VPOX_WITH_KCHMVIEWER=
 VPOX_WITH_VRDP_RDESKTOP=
 # Permanent (no working SDL).
 VPOX_WITH_VPOXSDL=
endif

ifeq ($(KBUILD_TARGET),freebsd)
 VPOX_WITH_DOCS=
endif

ifeq ($(KBUILD_TARGET),haiku)
 # Don't bother with SDL ttf for now.
 VPOX_WITH_SECURELABEL=
 # We'll use the native html/help viewer.
 VPOX_WITH_KCHMVIEWER=
 VPOX_WITH_VRDP_RDESKTOP=
 # Permanent (no working SDL).
 VPOX_WITH_VPOXSDL=
 VPOX_WITH_DOCS=
 VPOX_WITH_VPOXDRV=
 VPOX_WITH_VRDP=
 VPOX_WITH_HEADLESS=
 VPOX_WITH_VPOXSDL=
 VPOX_WITH_QTGUI=
# VPOX_WITH_MAIN=
 VPOX_WITH_DOCS=
 VPOX_WITH_ISCSI=
 VPOX_WITH_INIP=
 VPOX_WITH_INTERNAL_NETWORKING=
 VPOX_WITH_PDM_ASYNC_COMPLETION=
 VPOX_WITH_KCHMVIEWER=
 VPOX_WITH_HARDENING=
endif


ifeq ($(KBUILD_TARGET),os2)
 VPOX_WITH_WEBSERVICES=
 VPOX_WITH_INSTALLER=
 VPOX_WITH_SECURELABEL=
 VPOX_WITH_VRDP_AUTHMOD=
 VPOX_WITH_VRDP_RDESKTOP=
 VPOX_WITH_VALIDATIONKIT=
 VPOX_WITH_QTGUI=
 VPOX_WITH_USB=
 VPOX_WITH_EHCI=
 VPOX_WITH_DOCS=
 VPOX_WITH_PDM_ASYNC_COMPLETION=
 VPOX_WITH_KCHMVIEWER=
 VPOX_WITH_HARDENING=
endif

ifeq ($(KBUILD_TARGET),solaris)
 VPOX_WITH_SECURELABEL=
endif

ifeq ($(KBUILD_TARGET),win)
 VPOX_WITH_VRDP_RDESKTOP=
 VPOX_WITH_KCHMVIEWER=
endif

ifn1of ($(KBUILD_TARGET_ARCH), x86 amd64)
 VPOX_WITH_ADDITION_DRIVERS=
 VPOX_WITH_DEBUGGER=
 VPOX_WITH_DOCS=
 VPOX_WITH_EHCI=
 VPOX_WITH_HARDENING=
 VPOX_WITH_HEADLESS=
 VPOX_WITH_HGCM=
 VPOX_WITH_HGSMI=
 VPOX_WITH_INIP=
 VPOX_WITH_INSTALLER=
 VPOX_WITH_INTERNAL_NETWORKING=
 VPOX_WITH_ISCSI=
 VPOX_WITH_KCHMVIEWER=
 VPOX_WITH_MAIN=
 VPOX_WITH_PDM_ASYNC_COMPLETION=
 VPOX_WITH_QTGUI=
 VPOX_WITH_RAW_MODE=
 VPOX_WITH_SECURELABEL=
 VPOX_WITH_VALIDATIONKIT=
 VPOX_WITH_USB=
 VPOX_WITH_VPOXDRV=
 VPOX_WITH_VPOXSDL=
 VPOX_WITH_WEBSERVICES=
 VPOX_WITH_XPCOM=
 VPOX_WITHOUT_HARDENING=1
 # remove later:
 VPOX_WITH_VRDP=
 VPOX_WITH_VRDP_AUTHMOD=
 VPOX_WITH_VRDP_RDESKTOP=
endif


#
# Include automatic and local config file to override the above settings
# and to provide defaults for the settings below this point.
#
ifndef AUTOCFG
 AUTOCFG := $(wildcard $(PATH_ROOT)/AutoConfig.kmk)
endif
ifneq ($(AUTOCFG),)
 include $(AUTOCFG)
endif

ifndef LOCALCFG
 LOCALCFG := $(wildcard $(PATH_ROOT)/LocalConfig.kmk)
 ifneq ($(LOCALCFG),)
  include $(LOCALCFG)
 endif
else
 # Ignore it if it doesn't exist.
 if exists "$(LOCALCFG)"
  include $(LOCALCFG)
 else
  $(warning LOCALCFG='$(LOCALCFG)' does not exist)
  override LOCALCFG :=
 endif
endif

#
# Allow to overwrite the branding information from an external file
#
ifdef VPOX_BRANDING_CFG
 include $(VPOX_BRANDING_CFG)
endif

#
# Bitch about old settings.
#
ifdef VPOX_WITHOUT_LINUX_COMPILER_H
 $(warning VPOX_WITHOUT_LINUX_COMPILER_H was renamed to VPOX_WITH_LINUX_COMPILER_H, the meaning is inverted.)
endif

#
# Indicate VPOX_ONLY build if any of the VPOX_ONLY_* variables are set.
#
VPOX_ONLY_BUILD := $(strip $(foreach x, ADDITIONS DOCS EXTPACKS SDK VALIDATIONKIT\
	, $(if-expr defined(VPOX_ONLY_$(x)),VPOX_ONLY_$(x))))
if $(words $(VPOX_ONLY_BUILD)) > 1
 $(error VPox: More than one VPOX_ONLY build enabled! $(VPOX_ONLY_BUILD))
endif

#
# For the docs build box.
#
ifdef VPOX_ONLY_DOCS
 VPOX_WITH_DOCS_CHM = 1
endif

#
# Disable components that are not open sourced.
#
ifdef VPOX_OSE
 VPOX_WITH_VRDP=
 VPOX_WITH_EHCI_IMPL=
 VPOX_WITH_XHCI_IMPL=
 VPOX_WITH_USB_VIDEO_IMPL=
 VPOX_WITH_NVME_IMPL=
 VPOX_WITH_EXTPACK_PUEL=
 VPOX_WITH_EXTPACK_PUEL_BUILD=
 VPOX_WITH_PCI_PASSTHROUGH_IMPL=
 VPOX_WITH_OS2_ADDITIONS_BIN=
 ifeq ($(KBUILD_TARGET),win)
  VPOX_WITH_NATIVE_NEM=
 endif
 # not yet
 VPOX_WITH_SECURELABEL=
 VPOX_WITH_KCHMVIEWER=
 VPOX_WITH_PLUGIN_CRYPT=
 VPOX_WITH_DRAG_AND_DROP_PROMISES=
 ifn1of ($(KBUILD_TARGET), linux)
  VPOX_WITH_DOCS=
  VPOX_WITH_DOCS_PACKING=
 endif
 if1of ($(KBUILD_TARGET), solaris)
  VPOX_WITH_32_ON_64_MAIN_API=
 endif
 if1of ($(KBUILD_TARGET), win)
  # tar/gzip uncommon on Windows
  VPOX_WITH_EXTPACK_VPOXDTRACE=
 endif
 # Enable any translations in OSE, even partial ones.
 ifndef ($(VPOX_NO_DOCS_TRANSLATIONS))
  VPOX_WITH_DOCS_TRANSLATIONS = 1
 endif
 VPOX_WITH_INTEL_PXE=
 # Disable for OSE, requires snv_159+.
 VPOX_WITH_NETFLT_CROSSBOW=
 ifn1of ($(KBUILD_TARGET), darwin linux solaris win)
  VPOX_WITH_INSTALLER=
 endif
 if1of ($(KBUILD_TARGET), win)
  # Undefine codec libraries which are not needed.
  VPOX_WITH_LIBVPX=
  VPOX_WITH_LIBOPUS=
  # Disable recording (with audio support).
  VPOX_WITH_RECORDING=
  VPOX_WITH_AUDIO_RECORDING=
 endif
 # branding
 VPOX_BRAND_LICENSE_HTML             := $(PATH_ROOT)/doc/License-gpl-2.0.html
 VPOX_BRAND_LICENSE_RTF              := $(PATH_ROOT)/doc/License-gpl-2.0.rtf
 VPOX_BRAND_LICENSE_TXT              := $(PATH_ROOT)/doc/License-gpl-2.0.txt
 VPOX_BRAND_BIOS_LOGO                := $(PATH_ROOT)/src/VPox/Devices/Graphics/BIOS/ose_logo.bmp
 VPOX_BRAND_GUI_ABOUT_PNG            := $(PATH_ROOT)/src/VPox/Frontends/VirtualPox/images/OSE/about.png
 VPOX_BRAND_GUI_ABOUT_X2_PNG         := $(PATH_ROOT)/src/VPox/Frontends/VirtualPox/images/OSE/about_x2.png
 VPOX_BRAND_GUI_ABOUT_X3_PNG         := $(PATH_ROOT)/src/VPox/Frontends/VirtualPox/images/OSE/about_x3.png
 VPOX_BRAND_GUI_ABOUT_X4_PNG         := $(PATH_ROOT)/src/VPox/Frontends/VirtualPox/images/OSE/about_x4.png
 VPOX_BRAND_GUI_ABOUT_16PX_PNG       := $(PATH_ROOT)/src/VPox/Frontends/VirtualPox/images/OSE/about_16px.png
 VPOX_BRAND_GUI_ABOUT_16PX_X2_PNG    := $(PATH_ROOT)/src/VPox/Frontends/VirtualPox/images/OSE/about_16px_x2.png
 VPOX_BRAND_GUI_ABOUT_16PX_X3_PNG    := $(PATH_ROOT)/src/VPox/Frontends/VirtualPox/images/OSE/about_16px_x3.png
 VPOX_BRAND_GUI_ABOUT_16PX_X4_PNG    := $(PATH_ROOT)/src/VPox/Frontends/VirtualPox/images/OSE/about_16px_x4.png
 VPOX_BRAND_GUI_VPOX_16PX_PNG        := $(PATH_ROOT)/src/VPox/Frontends/VirtualPox/images/OSE/VirtualPox_16px.png
 VPOX_BRAND_GUI_VPOX_20PX_PNG        := $(PATH_ROOT)/src/VPox/Frontends/VirtualPox/images/OSE/VirtualPox_20px.png
 VPOX_BRAND_GUI_VPOX_32PX_PNG        := $(PATH_ROOT)/src/VPox/Frontends/VirtualPox/images/OSE/VirtualPox_32px.png
 VPOX_BRAND_GUI_VPOX_40PX_PNG        := $(PATH_ROOT)/src/VPox/Frontends/VirtualPox/images/OSE/VirtualPox_40px.png
 VPOX_BRAND_GUI_VPOX_48PX_PNG        := $(PATH_ROOT)/src/VPox/Frontends/VirtualPox/images/OSE/VirtualPox_48px.png
 VPOX_BRAND_GUI_VPOX_64PX_PNG        := $(PATH_ROOT)/src/VPox/Frontends/VirtualPox/images/OSE/VirtualPox_64px.png
 VPOX_BRAND_GUI_CUBE_42PX_PNG        := $(PATH_ROOT)/src/VPox/Frontends/VirtualPox/images/OSE/VirtualPox_cube_42px.png
 VPOX_BRAND_GUI_VPOX_SVG             := $(PATH_ROOT)/src/VPox/Artwork/OSE/virtualpox.svg
endif

#
# VPOX_WITHOUT_HARDENING is for developers (put in LocalConfig.kmk).
# Note that this is a bit rough since hardening governs more than one
# variable...  Also note that we allow VPOX_WITH_HARDENING=1 on the
# command line to overrule VPOX_WITHOUT_HARDENING (the check below).
#
ifdef VPOX_WITHOUT_HARDENING
 VPOX_WITH_HARDENING=
 ifeq ($(VPOX_WITH_HARDENING),)
  VPOX_PATH_APP_PRIVATE=
  VPOX_PATH_APP_PRIVATE_ARCH=
  VPOX_PATH_APP_PRIVATE_ARCH_TOP=
  VPOX_PATH_SHARED_LIBS=
  VPOX_PATH_APP_DOCS=
  VPOX_WITH_RUNPATH=
  if1of ($(KBUILD_TARGET), freebsd linux netbsd openbsd solaris) # duplicated up above
   VPOX_WITH_ORIGIN = 1
  endif
 endif
endif

#
# Sanitize the additions build config variables.
#
ifdef VPOX_WITH_ADDITIONS_FROM_BUILD_SERVER
 VPOX_WITHOUT_ADDITIONS := 1
 ifdef VPOX_ONLY_ADDITIONS
  $(error VPOX_ONLY_ADDITIONS + VPOX_WITH_ADDITIONS_FROM_BUILD_SERVER does not add up!)
 endif
endif

ifdef VPOX_ONLY_ADDITIONS
 ifdef VPOX_WITHOUT_ADDITIONS
  $(error VPOX_ONLY_ADDITIONS + VPOX_WITHOUT_ADDITIONS does not add up!)
 endif
 ifndef VPOX_WITH_ADDITIONS
  $(error VPOX_ONLY_ADDITIONS + unset VPOX_WITH_ADDITIONS does not add up!)
 endif
endif

ifdef VPOX_WITHOUT_ADDITIONS
 # Zap anything that could be contradicting this.
 VPOX_WITH_ADDITIONS :=
endif

#
# Sanitize the documentation build config variables.
#
ifdef VPOX_WITH_DOCS_FROM_BUILD_SERVER
 VPOX_WITHOUT_DOCS := 1
 ifdef VPOX_ONLY_DOCS
  $(error VPOX_ONLY_DOCS + VPOX_WITH_DOCS_FROM_BUILD_SERVER does not add up!)
 endif
endif

ifdef VPOX_ONLY_DOCS
 ifdef VPOX_WITHOUT_DOCS
  $(error VPOX_ONLY_DOCS + VPOX_WITHOUT_DOCS does not add up!)
 endif
endif

ifdef VPOX_WITHOUT_DOCS
 # Zap anything that could be contradicting this.
 VPOX_WITH_DOCS :=
 VPOX_WITH_DOCS_CHM :=
endif

#
# Disable components for headless
#
ifdef VPOX_HEADLESS
 VPOX_WITH_QTGUI=
 VPOX_WITH_VPOXSDL=
 VPOX_WITH_KCHMVIEWER=
 VPOX_WITH_VRDP_RDESKTOP=
endif

#
# Undefined VPOX_WITH_MAIN implies exclusion of a few more items.
#
ifndef VPOX_WITH_MAIN
 VPOX_WITH_VPOXSDL=
 VPOX_WITH_QTGUI=
 VPOX_WITH_DEBUGGER_GUI=
 VPOX_WITH_HEADLESS=
 ifdef VPOX_ONLY_DOCS
  $(error Oh, does VPOX_ONLY_DOCS actually end up here. sweet.)
 endif
 VPOX_WITH_DOCS=
endif

ifndef VPOX_WITH_QTGUI
 VPOX_WITH_KCHMVIEWER=
endif

ifdef VPOX_WITH_EXTPACK_PUEL_BUILD
 VPOX_WITH_EXTPACK_PUEL = 1
endif

ifdef VPOX_WITH_TESTSUITE
 $(warning VPOX_WITH_TESTSUITE was renamed to VPOX_WITH_VALIDATIONKIT)
 VPOX_WITH_VALIDATIONKIT = $(VPOX_WITH_TESTSUITE)
endif


#
# Derived indicators.
#

## Indicates that we need the extpack openssl libs.
if   defined(VPOX_WITH_EXTPACK_PUEL_BUILD) \
 && (   !defined(VRDP_WITH_IPRT_CRYPTO) \
     || !defined(VRDP_WITH_IPRT_SSL) \
     || !defined(VD_WITH_IPRT_CRYPTO) )
 VPOX_NEED_EXTPACK_OPENSSL = 1
else
 VPOX_NEED_EXTPACK_OPENSSL =
endif


#
# Mark OSE builds clearly, helps figuring out limitations more easily.
#
ifdef VPOX_OSE
# This can be overridden (e.g. in LocalConfig.kmk) by whoever publishes a set
# of VirtualPox binaries.  We request though that you always use something that
# clearly identifies your build and makes it clear that it is not one done by
# the VirtualPox team.
 VPOX_BUILD_PUBLISHER ?= _OSE
endif

# Keep in sync with G_virtualPoxPackage in glue-jaxws.xsl and glue-java.xsl
# Changed with every new version, so beware!
if $(VPOX_VERSION_BUILD) < 51
  VPOX_API_VERSION          = $(VPOX_VERSION_MAJOR)_$(VPOX_VERSION_MINOR)
else
  VPOX_API_VERSION          = $(VPOX_VERSION_MAJOR)_$(expr $(VPOX_VERSION_MINOR) + 1)
endif
VPOX_API_SUFFIX             = _$(VPOX_API_VERSION)
VPOX_JAVA_PACKAGE           = org.virtualpox$(VPOX_API_SUFFIX)

#
# Derived / helper config indicators.  Not configurable.
#

# Use the OpenGL module in qt when the video hardware acceleration feature
# is enabled.
if defined(VPOX_WITH_VIDEOHWACCEL) && defined(VPOX_WITH_QTGUI)
 VPOX_GUI_USE_QGL = 1
else
 VPOX_GUI_USE_QGL=
endif

# Collection macro mainly for deciding whether VPoxDTrace needs shipping.
VPOX_WITH_DTRACE := $(if-expr defined(VPOX_WITH_DTRACE_R0) || defined(VPOX_WITH_DTRACE_R0DRV) \
	       	            || defined(VPOX_WITH_DTRACE_R3) || defined(VPOX_WITH_DTRACE_RC),1,)

# kSubmit / kWorker is only available on windows.
ifdef VPOX_USE_KSUBMIT
 ifeq ($(KBUILD_HOST),win)
#  TOOL_VCC120AMD64_USE_KSUBMIT := 1
#  TOOL_VCC120X86_USE_KSUBMIT   := 1
  TOOL_VCC100AMD64_USE_KSUBMIT := 1
  TOOL_VCC100X86_USE_KSUBMIT   := 1
  TOOL_OPENWATCOM_USE_KSUBMIT  := 1
  TOOL_YASM_USE_KSUBMIT        := 1
  TOOL_NASM_USE_KSUBMIT        := 1
  TOOL_VPoxNasm_USE_KSUBMIT    := 1
 else
  VPOX_USE_KSUBMIT :=
 endif
endif

#
# Image and object format config.
#
if1of ($(KBUILD_TARGET), freebsd haiku linux netbsd openbsd solaris)
 VPOX_LDR_FMT = elf
endif
ifeq ($(KBUILD_TARGET),darwin)
 VPOX_LDR_FMT = macho
endif
ifeq ($(KBUILD_TARGET),os2)
 VPOX_LDR_FMT = lx
 VPOX_LDR_FMT32 = lx
 VPOX_LDR_FMT64 = elf
 DONT_USE_YASM = 1 # yasm doesn't implement omf yet.
endif
ifeq ($(KBUILD_TARGET),win)
 VPOX_LDR_FMT = pe
endif
VPOX_LDR_FMT32 ?= $(VPOX_LDR_FMT)
VPOX_LDR_FMT64 ?= $(VPOX_LDR_FMT)

#
# Assembler setup.
#
# This is a bit complicated since we have to support two different assmblers
# (yasm/nasm) and possibly two different formats (32-bit/64-bit).
#
ifeq ($(VPOX_LDR_FMT),elf)
 ifeq ($(KBUILD_TARGET_ARCH),x86)
VPOX_ASFLAGS_FMT = -f elf32 -DASM_FORMAT_ELF
 else
VPOX_ASFLAGS_FMT = -f elf64 -DASM_FORMAT_ELF
 endif
 VPOX_ASFLAGS_DBFINFO = -g dwarf2
endif
ifeq ($(VPOX_LDR_FMT),lx)
 VPOX_ASFLAGS_FMT = -f obj -DASM_FORMAT_OMF
 VPOX_ASFLAGS_DBFINFO = -g stabs
endif
ifeq ($(VPOX_LDR_FMT),macho)
 ifeq ($(KBUILD_TARGET_ARCH),x86)
  VPOX_ASFLAGS_FMT = -f macho32 -DASM_FORMAT_MACHO
 else
  VPOX_ASFLAGS_FMT = -f macho64 -DASM_FORMAT_MACHO
 endif
 VPOX_ASFLAGS_DBFINFO = -g dwarf2
endif
ifeq ($(VPOX_LDR_FMT),pe)
 ifeq ($(KBUILD_TARGET_ARCH),x86)
VPOX_ASFLAGS_FMT = -f win32 -DASM_FORMAT_PE
 else
VPOX_ASFLAGS_FMT = -f win64 -DASM_FORMAT_PE
 endif
VPOX_ASFLAGS_DBFINFO = -g cv8
endif
ifndef VPOX_ASFLAGS_FMT
 $(error VPOX_ASFLAGS_FMT is not defined. VPOX_LDR_FMT=$(VPOX_LDR_FMT))
endif

ifeq ($(VPOX_LDR_FMT32),elf)
 VPOX_ASFLAGS_FMT32 = -f elf32 -DASM_FORMAT_ELF
 VPOX_ASFLAGS_DBFINFO32 = -g dwarf2
endif
ifeq ($(VPOX_LDR_FMT32),lx)
 VPOX_ASFLAGS_FMT32 = -f obj -DASM_FORMAT_OMF
 VPOX_ASFLAGS_DBFINFO32 = -g stabs
endif
ifeq ($(VPOX_LDR_FMT32),macho)
 VPOX_ASFLAGS_FMT32 = -f macho32 -DASM_FORMAT_MACHO
 VPOX_ASFLAGS_DBFINFO32 = -g dwarf2
endif
ifeq ($(VPOX_LDR_FMT32),pe)
 VPOX_ASFLAGS_FMT32 = -f win32 -DASM_FORMAT_PE
 VPOX_ASFLAGS_DBFINFO32 = -g cv8
endif
ifndef VPOX_ASFLAGS_FMT32
 $(error VPOX_ASFLAGS_FMT32 is not defined. VPOX_LDR_FMT32=$(VPOX_LDR_FMT32))
endif

ifeq ($(VPOX_LDR_FMT64),elf)
 VPOX_ASFLAGS_FMT64 = -f elf64 -DASM_FORMAT_ELF
 VPOX_ASFLAGS_DBFINFO64 = -g dwarf2
endif
ifeq ($(VPOX_LDR_FMT64),macho)
 VPOX_ASFLAGS_FMT64 = -f macho64 -DASM_FORMAT_MACHO
 VPOX_ASFLAGS_DBFINFO64 = -g dwarf2
endif
ifeq ($(VPOX_LDR_FMT64),pe)
 VPOX_ASFLAGS_FMT64 = -f win64 -DASM_FORMAT_PE
 VPOX_ASFLAGS_DBFINFO64 = -g cv8
endif
ifndef VPOX_ASFLAGS_FMT64
 $(error VPOX_ASFLAGS_FMT64 is not defined. VPOX_LDR_FMT64=$(VPOX_LDR_FMT64))
endif

ifndef DONT_USE_YASM
 VPOX_ASTOOL    = YASM
 VPOX_LDR_FMT_2_YASM_DBGINFO.elf   = -g dwarf2
 VPOX_LDR_FMT_2_YASM_DBGINFO.lx    = -g stabs
 VPOX_LDR_FMT_2_YASM_DBGINFO.macho =
 VPOX_LDR_FMT_2_YASM_DBGINFO.pe    = -g cv8
 VPOX_ASFLAGS   = $(VPOX_ASFLAGS_FMT)   -D__YASM__ -Worphan-labels $(VPOX_YASM_Wno-segreg-in-64bit) $(VPOX_LDR_FMT_2_YASM_DBGINFO.$(VPOX_LDR_FMT))
 VPOX_ASFLAGS32 = $(VPOX_ASFLAGS_FMT32) -D__YASM__ -Worphan-labels $(VPOX_YASM_Wno-segreg-in-64bit) $(VPOX_LDR_FMT_2_YASM_DBGINFO.$(VPOX_LDR_FMT32))
 VPOX_ASFLAGS64 = $(VPOX_ASFLAGS_FMT64) -D__YASM__ -Worphan-labels $(VPOX_YASM_Wno-segreg-in-64bit) $(VPOX_LDR_FMT_2_YASM_DBGINFO.$(VPOX_LDR_FMT64))
else
 VPOX_ASTOOL    = NASM
 VPOX_ASFLAGS   = $(subst elf32,elf,$(VPOX_ASFLAGS_FMT))   -D__NASM__ -w+orphan-labels -g
 VPOX_ASFLAGS32 = $(subst elf32,elf,$(VPOX_ASFLAGS_FMT32)) -D__NASM__ -w+orphan-labels -g
 VPOX_ASFLAGS64 = $(VPOX_ASFLAGS_FMT64) -D__NASM__ -w+orphan-labels -g
endif

#
# Windows only has mingw handy. On *nix we have to deal with cross compiling
# 32-bit targets on 64-bit platforms, meaning we'll be using gcc32/g++32.
# In the latter case we'll also have to disable all the all the R0 driver related stuff.
#
ifndef VPOX_GCC_TOOL
 ifeq ($(KBUILD_TARGET),win)
  ifeq ($(KBUILD_TARGET_ARCH),x86)
   VPOX_GCC_TOOL := MINGW32
   TOOL_MINGW32_CFLAGS := $(UNDEFINED) # override -g
  else
   VPOX_GCC_TOOL := MINGWW64
  endif
 else ifeq ($(KBUILD_TARGET),os2)
  VPOX_GCC_TOOL := GXX3OMF
 else ifeq ($(KBUILD_TARGET),darwin)
  ifdef VPOX_WITH_NEW_XCODE
   VPOX_GCC_TOOL := VPoxXcode62
  else
   VPOX_GCC_TOOL := GXX4MACHO
  endif
 else ifeq ($(KBUILD_TARGET),haiku)
  # Haiku shouldn't pass '-r' to the linker by default
  VPOX_GCC_TOOL := GXX3PLAIN
 else ifeq ($(KBUILD_TARGET),solaris)
  VPOX_GCC_TOOL := GXX3PLAIN
  VPOX_GCC32_TOOL := GCC3PLAIN
  ifeq ($(KBUILD_HOST),solaris)
   TOOL_GXX3PLAIN_LD_SYSMOD ?= /usr/ccs/bin/ld
  endif
 else
  VPOX_GCC_TOOL := GXX3
  ifeq ($(KBUILD_TARGET_ARCH).$(KBUILD_HOST_ARCH),x86.amd64) ## @todo mixing target/host here!
   VPOX_GCC_TOOL := GXX32
   VPOX_WITH_VPOXDRV=
  else ifeq ($(KBUILD_TARGET_ARCH).$(KBUILD_HOST_ARCH),amd64.x86)
   VPOX_GCC_TOOL := GXX64
   VPOX_WITH_VPOXDRV=
  endif
 endif
endif
ifndef VPOX_GCC32_TOOL
 ifeq ($(KBUILD_TARGET_ARCH),x86)
  VPOX_GCC32_TOOL := $(VPOX_GCC_TOOL)
 else ifeq ($(KBUILD_TARGET),win)
  VPOX_GCC32_TOOL := MINGW32
 else
  VPOX_GCC32_TOOL := GCC32
 endif
endif

#
# Decide which Visual C++ compiler version we're using by default.
#
ifndef VPOX_VCC_TOOL_STEM
 VPOX_VCC_TOOL_STEM := VCC100
else ifn1of ($(VPOX_VCC_TOOL_STEM), VCC100 VCC110 VCC120)
 $(error VPox: VPOX_VCC_TOOL_STEM='$(VPOX_VCC_TOOL_STEM)' is not supported, only VCC100 and VCC110 is)
endif
ifndef VPOX_VCC_TOOL
 VPOX_VCC_TOOL := $(VPOX_VCC_TOOL_STEM)$(toupper $(KBUILD_TARGET_ARCH))
endif

#
# Decide which Visual C++ compiler version we're using for newer stuff.
#
ifndef VPOX_NEWER_VCC_TOOL_STEM
 VPOX_NEWER_VCC_TOOL_STEM := VCC120
else ifn1of ($(VPOX_NEWER_VCC_TOOL_STEM), VCC120)
 $(error VPox: VPOX_NEWER_VCC_TOOL_STEM='$(VPOX_NEWER_VCC_TOOL_STEM)' is not supported, only VCC120 is)
endif
ifndef VPOX_NEWER_VCC_TOOL
 VPOX_NEWER_VCC_TOOL := $(VPOX_NEWER_VCC_TOOL_STEM)$(toupper $(KBUILD_TARGET_ARCH))
endif

#
# Default too nonsense.
#
## @todo Remove the default tool crap here!
TOOL = $(VPOX_GCC_TOOL)
TOOL.win.x86 = $(VPOX_VCC_TOOL_STEM)X86
TOOL.win.amd64 = $(VPOX_VCC_TOOL_STEM)AMD64
ASTOOL = $(VPOX_ASTOOL)


#
# Setup the global defines and includes.
#
# Note! The __SOMETHING__ #defines are deprecated as they violate the C/C++ specs.
#
INCS += $(PATH_ROOT)/include $(PATH_OUT)
DEFS += VPOX
DEFS.debug      := DEBUG DEBUG_$(subst $(subst _, ,_),_,$(USERNAME)) DEBUG_USERNAME=$(subst $(subst _, ,_),_,$(USERNAME))
DEFS.dbgopt      = $(DEFS.debug)
DEFS.profile     = VPOX_WITH_STATISTICS
DEFS.strict      = RT_STRICT VPOX_STRICT
DEFS.x86         = RT_ARCH_X86 __X86__
DEFS.amd64       = RT_ARCH_AMD64 __AMD64__
DEFS.sparc32     = RT_ARCH_SPARC
DEFS.sparc64     = RT_ARCH_SPARC64
DEFS.darwin      = RT_OS_DARWIN __DARWIN__
DEFS.freebsd     = RT_OS_FREEBSD __FREEBSD__
DEFS.haiku       = RT_OS_HAIKU
DEFS.linux       = RT_OS_LINUX _FILE_OFFSET_BITS=64
DEFS.netbsd      = RT_OS_NETBSD
DEFS.openbsd     = RT_OS_OPENBSD
DEFS.os2         = RT_OS_OS2 __OS2__
DEFS.os-agnostic = RT_OS_AGNOSTIC
DEFS.solaris     = RT_OS_SOLARIS _FILE_OFFSET_BITS=64
DEFS.win         = RT_OS_WINDOWS __WIN__
DEFS.win.x86     = __WIN32__
DEFS.win.amd64   = __WIN64__
# optional defines (use environment or make commandline)
ifdef VPOX_WITH_STATISTICS
 DEFS += VPOX_WITH_STATISTICS
endif
ifdef VPOX_STRICT
 DEFS += VPOX_STRICT
endif
ifdef LOG_ENABLED
 DEFS += LOG_ENABLED
endif
ifdef VPOX_OSE
 DEFS += VPOX_OSE
endif
ifdef VPOX_WITH_64_BITS_GUESTS
 DEFS += VPOX_WITH_64_BITS_GUESTS
endif
ifdef VPOX_WITH_REM
 DEFS += VPOX_WITH_REM
endif
ifdef VPOX_WITH_RAW_MODE
 DEFS += VPOX_WITH_RAW_MODE
endif

# Don't flood CDEFS, old MASMs doesn't like too many defines.
ifdef VPOX_WITH_DEBUGGER
 CDEFS += VPOX_WITH_DEBUGGER
endif
ifdef VPOX_WITH_HARDENING
 CDEFS += VPOX_WITH_HARDENING
endif
if defined(VPOX_WITH_STRICT_LOCKS) && ($(KBUILD_TYPE) == "debug" || $(KBUILD_TYPE) == "strict")
 CDEFS += RT_LOCK_STRICT RT_LOCK_STRICT_ORDER
endif
ifdef VPOX_WITH_EF_WRAPS
 CDEFS += RTMEM_WRAP_TO_EF_APIS RTMEM_WRAP_SOME_NEW_AND_DELETE_TO_EF
endif

# Quoted strings should not be passed to the assemblers since they might not
# subscribe to C preprocessing semantics.
ifdef VPOX_PATH_APP_PRIVATE
 CDEFS += RTPATH_APP_PRIVATE=\"$(VPOX_PATH_APP_PRIVATE)\"
endif
ifdef VPOX_PATH_APP_PRIVATE_ARCH
 CDEFS += RTPATH_APP_PRIVATE_ARCH=\"$(VPOX_PATH_APP_PRIVATE_ARCH)\"
endif
ifdef VPOX_PATH_APP_PRIVATE_ARCH_TOP
 CDEFS += RTPATH_APP_PRIVATE_ARCH_TOP=\"$(VPOX_PATH_APP_PRIVATE_ARCH_TOP)\"
endif
ifdef VPOX_PATH_SHARED_LIBS
 CDEFS += RTPATH_SHARED_LIBS=\"$(VPOX_PATH_SHARED_LIBS)\"
endif
ifdef VPOX_PATH_APP_DOCS
 CDEFS += RTPATH_APP_DOCS=\"$(VPOX_PATH_APP_DOCS)\"
endif
CXXDEFS  += $(CDEFS)
PCHDEFS  += $(CDEFS)
OBJCDEFS += $(CDEFS)

USES += dtrace
USES.win += vpoximportchecker


#
# Decide which Windows DDK to use by default.
#
if1of ($(VPOX_VCC_TOOL_STEM), VCC110)
 VPOX_WINDDK         ?= WINDDK80
else
 VPOX_WINDDK         ?= WINDDK71
endif
VPOX_WINDDK_WLH      ?= $(VPOX_WINDDK)WLH

VPOX_WINDDK_GST      ?= $(VPOX_WINDDK)
VPOX_WINDDK_GST_W8   ?= WINDDK80W8
VPOX_WINDDK_GST_W7   ?= $(VPOX_WINDDK_GST)W7
VPOX_WINDDK_GST_WLH  ?= $(VPOX_WINDDK_GST)WLH
VPOX_WINDDK_GST_W2K3 ?= WINDDK71WNET
ifeq ($(KBUILD_TARGET_ARCH),x86)
 VPOX_WINDDK_GST_WXP ?= WINDDK71WXP
 VPOX_WINDDK_GST_W2K ?= $(VPOX_WINDDK_GST_WXP)
 VPOX_WINDDK_GST_NT4 ?= $(VPOX_WINDDK_GST_WXP)
else
 VPOX_WINDDK_GST_WXP ?= $(VPOX_WINDDK_GST_W2K3)
 VPOX_WINDDK_GST_W2K ?= $(VPOX_WINDDK_GST_W2K3)
 VPOX_WINDDK_GST_NT4 ?= $(VPOX_WINDDK_GST_W2K3)
endif


#
# Decide which Windows SDK to use by default.
#
if1of ($(VPOX_VCC_TOOL_STEM), VCC110)
 VPOX_WINPSDK ?= WINPSDK80
else
 VPOX_WINPSDK ?= WINPSDK71
endif
VPOX_WINPSDK_GST      ?= $(VPOX_WINPSDK)
VPOX_WINPSDK_GST_W8   ?= WINPSDK80
VPOX_WINPSDK_GST_W7   ?= $(VPOX_WINPSDK_GST)
VPOX_WINPSDK_GST_WLH  ?= $(VPOX_WINPSDK_GST)
VPOX_WINPSDK_GST_WXP  ?= $(VPOX_WINPSDK_GST)
ifeq ($(KBUILD_TARGET_ARCH),x86)
 VPOX_WINPSDK_GST_W2K ?= $(VPOX_WINPSDK_GST)
 VPOX_WINPSDK_GST_NT4 ?= $(VPOX_WINPSDK_GST)
else
 VPOX_WINPSDK_GST_W2K ?= $(VPOX_WINPSDK_GST_WXP)
 VPOX_WINPSDK_GST_NT4 ?= $(VPOX_WINPSDK_GST_WXP)
endif


#
# ARCH_BITS_DEFS.
#
if1of ($(KBUILD_TARGET_ARCH),amd64 sparc64)
 VPOX_HC_ARCH_BITS := 64
 ARCH_BITS_DEFS    := HC_ARCH_BITS=64
else if1of ($(KBUILD_TARGET_ARCH),x86 sparc32)
 VPOX_HC_ARCH_BITS := 32
 ARCH_BITS_DEFS    := HC_ARCH_BITS=32
else
 $(error VPox: KBUILD_TARGET_ARCH=$(KBUILD_TARGET_ARCH))
endif

ifdef VPOX_WITH_64_BITS_GUESTS
 VPOX_GC_ARCH_BITS_DEFS := GC_ARCH_BITS=64
else
 VPOX_GC_ARCH_BITS_DEFS := GC_ARCH_BITS=32
endif
ARCH_BITS_DEFS += $(VPOX_GC_ARCH_BITS_DEFS)

#
# Add the output dir(s) to the dynamic loader search path.
#
if1of ($(KBUILD_HOST), freebsd linux netbsd openbsd solaris)
 export LD_LIBRARY_PATH:=$(PATH_STAGE_BIN):$(PATH_STAGE_LIB):$(LD_LIBRARY_PATH)
endif
ifeq ($(KBUILD_HOST),haiku)
 export LIBRARY_PATH:=$(PATH_STAGE_BIN):$(PATH_STAGE_LIB):$(LIBRARY_PATH)
endif
ifeq ($(KBUILD_HOST),os2)
 #fixme! export BEGINLIBPATH:=$(PATH_STAGE_BIN);$(PATH_STAGE_LIB);$(BEGINLIBPATH)
endif
ifeq ($(KBUILD_HOST),win)
  # This check is a bit hacky, but avoids problems with PATH being changed
  # again when the makefiles are reread because some automatically generated
  # makefile has been modified.
  ifeq ($(findstring $(PATH_STAGE_BIN);$(PATH_STAGE_LIB);,$(PATH)),)
   export PATH:=$(PATH_STAGE_BIN);$(PATH_STAGE_LIB);$(PATH)
  endif
endif

#
# Common libraries and tools.
#
ifeq ($(KBUILD_TARGET),darwin)
 LIB_RUNTIME     = $(PATH_STAGE_BIN)/VPoxRT.dylib
 LIB_RUNTIME_EF  = #$(PATH_STAGE_LIB)/RuntimeEFCPP.a
 VPOX_LIB_RUNTIME_X86   = $(PATH_STAGE_BIN)/VPoxRT-x86.dylib
 LIB_KPROFILE    = $(PATH_STAGE_BIN)/kPrf2.dylib
 LIB_VMM         = $(PATH_STAGE_BIN)/VPoxVMM.dylib
 LIB_VMMRC       = $(PATH_STAGE_BIN)/VMMRC.rc
 LIB_REM         = $(PATH_STAGE_LIB)/VPoxREM.dylib
 LIB_XPCOM       = $(PATH_STAGE_BIN)/VPoxXPCOM.dylib
 LIB_XPCOM_IMP   = $(PATH_STAGE_LIB)/VPoxXPCOMImp.dylib
 VPOX_LIB_XPCOM_X86     = $(PATH_STAGE_BIN)/VPoxXPCOM-x86.dylib
 LIB_DDU         = $(PATH_STAGE_BIN)/VPoxDDU.dylib
 VPOX_LIB_SUPR0  = $(PATH_STAGE_LIB)/SUPR0$(VPOX_SUFF_LIB)
endif
if1of ($(KBUILD_TARGET), freebsd haiku linux netbsd openbsd solaris)
 LIB_RUNTIME     = $(PATH_STAGE_BIN)/VPoxRT.so
 LIB_RUNTIME_EF  = $(PATH_STAGE_LIB)/RuntimeEFCPP.a
 VPOX_LIB_RUNTIME_X86   = $(PATH_STAGE_BIN)/VPoxRT-x86.so
 LIB_KPROFILE    = $(PATH_STAGE_BIN)/kPrf2.so
 LIB_VMM         = $(PATH_STAGE_BIN)/VPoxVMM.so
 LIB_VMMRC       = $(PATH_STAGE_BIN)/VMMRC.rc
 LIB_REM         = $(PATH_STAGE_LIB)/VPoxREM.so
 LIB_XPCOM       = $(PATH_STAGE_BIN)/VPoxXPCOM.so
 LIB_XPCOM_IMP   = $(PATH_STAGE_LIB)/VPoxXPCOMImp.so
 VPOX_LIB_XPCOM_X86   = $(PATH_STAGE_BIN)/VPoxXPCOM-x86.so
 LIB_DDU         = $(PATH_STAGE_BIN)/VPoxDDU.so
 VPOX_LIB_SUPR0 :=
endif
ifeq ($(KBUILD_TARGET),os2)
 LIB_RUNTIME     = $(PATH_STAGE_BIN)/VPoxRT.dll
 LIB_RUNTIME_EF  = #$(PATH_STAGE_LIB)/RuntimeEFCPP.a
 VPOX_LIB_RUNTIME_X86   = $(PATH_STAGE_BIN)/VPoxRT-x86.dll
 LIB_KPROFILE    = $(PATH_STAGE_BIN)/kPrf2.dll
 LIB_VMM         = $(PATH_STAGE_BIN)/VPoxVMM.dll
 LIB_VMMRC       = $(PATH_STAGE_LIB)/VMMRCImp.lib
 LIB_REM         = $(PATH_STAGE_LIB)/VPoxREMImp.lib
 LIB_XPCOM       = $(PATH_STAGE_BIN)/VPoxXCOM.dll
 LIB_XPCOM_IMP   = $(PATH_STAGE_LIB)/VPoxXPCOMImp.lib
 VPOX_LIB_XPCOM_X86  = $(PATH_STAGE_BIN)/VPoxXPCOM-x86.dll
 LIB_DDU         = $(PATH_STAGE_BIN)/VPoxDDU.dll
 VPOX_OBJ_SYS0   = $(PATH_OBJ)/RuntimeR0/os2/sys0.obj
 VPOX_LIB_SUPR0  = $(PATH_STAGE_LIB)/SUPR0$(VPOX_SUFF_LIB)
endif
ifeq ($(KBUILD_TARGET),win)
 LIB_RUNTIME     = $(PATH_STAGE_LIB)/VPoxRT.lib
 LIB_RUNTIME_EF  = #$(PATH_STAGE_LIB)/RuntimeEFCPP.lib
 VPOX_LIB_RUNTIME_X86   = $(PATH_STAGE_LIB)/VPoxRT-x86.lib
 LIB_KPROFILE    = $(PATH_STAGE_LIB)/kPrf2.lib
 LIB_VMM         = $(PATH_STAGE_LIB)/VPoxVMM.lib
 LIB_VMMRC       = $(PATH_OBJ)/VMMRC/VMMRC.lib
 LIB_REM         = $(PATH_STAGE_LIB)/VPoxREMImp.lib
 LIB_XPCOM       =
 LIB_XPCOM_IMP   =
 VPOX_LIB_XPCOM_X86 =
 LIB_DDU         = $(PATH_STAGE_LIB)/VPoxDDU.lib
 VPOX_LIB_SUPR0  = $(PATH_STAGE_LIB)/SUPR0$(VPOX_SUFF_LIB)
endif
if1of ($(KBUILD_TARGET).$(KBUILD_TARGET_ARCH), win.amd64 linux.amd64)
 VPOX_LIB_VMM_LAZY      = $(PATH_STAGE_LIB)/VMMR3LazyImp$(VPOX_SUFF_LIB)
else
 VPOX_LIB_VMM_LAZY      = $(LIB_VMM)
endif
ifn1of ($(KBUILD_TARGET_ARCH), $(VPOX_SUPPORTED_HOST_ARCHS)) # Hack to build a couple of extpack things that thing they need the VMM lib.
 LIB_VMM           :=
 LIB_VMMRC         :=
 VPOX_LIB_VMM_LAZY :=
endif
VPOX_LIB_SUPHARDENED    = $(PATH_STAGE_LIB)/SUPR3HardenedStatic$(VPOX_SUFF_LIB)
VPOX_LIB_RUNTIME_STATIC = $(PATH_STAGE_LIB)/RuntimeR3$(VPOX_SUFF_LIB)

ifndef VPOX_WITH_REM
 LIB_REM :=
endif

# Python
ifndef VPOX_BLD_PYTHON
 if1of ($(KBUILD_HOST), win)
  VPOX_BLD_PYTHON := $(firstword $(rsort $(wildcard $(KBUILD_DEVTOOLS)/win.x86/python/v*/python$(HOSTSUFF_EXE))) \
  				   python-not-found.exe)
 else
  VPOX_BLD_PYTHON := $(firstword $(which python2.7$(HOSTSUFF_EXE)) $(which python2.6$(HOSTSUFF_EXE)) \
                                 $(which python$(HOSTSUFF_EXE)) $(which python3$(HOSTSUFF_EXE)) \
				   python-not-found)
 endif
endif
## For running python unittests in the validation kit.
VPOX_UNITTEST_PYTHON ?= $(VPOX_BLD_PYTHON)

#
# pylint setup, see https://www.pylint.org/.
#
# Disabled:
#   W0301 - Unnecessary semicolon.
#   W0511 - TODO/XXX/FIXME/+++.
#   W0603 - Using the global statement.
#   W0702 - No exception type(s) specified.
#   W0703 - Catch "Exception".
#   I0011 - Locally disabling XXXXX.
#   C0321 - More than one statement on a single line.
#   R0201 - Method could be a function.
#   C0326 - ????
#   W0123 - ????
#   C0330:bad-continuation - Wrong continued indentation (add X spaces).
#         * Triggering on perfectly legal comments in array initializers and stuff.
#   C0413:wrong-import-position - Import "YYYYY XXXXX" should be placed at the top of the module.
#         * False positives due to __copyright__, __version__, probably.
#   E0012:bad-option-value - Bad option value XXXXX.
#         * Newer pylint doesn't grok older warning disables in sources (e.g. W0142 in db.py). Wonderful!
#   I0012:locally-enabled - Locally enabling XXXXX.
#         * We temporarily disable stuff and then renabled it. Very tedious.
#
# Note! Yes, --max-branchs is a typo, but not by me.
#
# Note! Users of older pylint release (< 1.0) needs to define
#       VPOX_WITH_PYLINT_PRE_V1_0 in LocalConfig because they changed the
#       output arguments in an backwards incompatible way and added more
#       attribute regex options.
#
ifndef VPOX_PYLINT
 VPOX_PYLINT        := $(firstword $(which pylint-2.7) $(which pylint-2.6) $(which pylint2) $(which pylint))
 ifdef VPOX_PYLINT
  VPOX_PYLINT       := $(VPOX_BLD_PYTHON) $(VPOX_PYLINT)
 endif
endif
if !defined(VPOX_WITH_PYLINT) && defined(VPOX_PYLINT)
 VPOX_WITH_PYLINT := 1
 ifndef VPOX_PYLINT_VERSION
  ifdef VPOX_WITH_PYLINT_PRE_V1_0
   VPOX_PYLINT_VERSION =  9999
  else ifdef VPOX_WITH_PYLINT_V1_2_1_PLUS
   VPOX_PYLINT_VERSION = 10201
  else ifdef VPOX_WITH_PYLINT_V1_1_PLUS
   VPOX_PYLINT_VERSION = 10100
  else
   VPOX_PYLINT_VERSION = 10000
  endif
 endif
endif
VPOX_PYLINT_FLAGS = $(if-expr $(VPOX_PYLINT_VERSION) >= 10500,--reports=n,--report=n) \
	$(if-expr $(VPOX_PYLINT_VERSION) >= 10000\
	  ,--msg-template='{path}:{line}: <{msg_id}>({obj}:{symbol}): {msg}' \
	  ,--output-format=msvs --include-ids=y) \
	--persistent=n \
	--rcfile=$(PATH_ROOT)/tools/pylintrc \
	--max-line-length=130 \
	--max-attributes=32 \
	--max-branch$(if-expr $(VPOX_PYLINT_VERSION) >= 10000,e,)s=50 \
	--max-statements=100 \
	--max-returns=100 \
	--max-public-methods=139 \
	--max-args=9 \
	--max-module-lines=4096 \
       --max-locals=32 \
	$(if-expr $(VPOX_PYLINT_VERSION) >= 10500,--max-bool-expr=99,) \
       --min-public-methods=0 \
	--function-rgx='[a-z_][a-zA-Z0-9_]{2,40}$(DOLLAR)' \
	--method-rgx='[a-z_][a-zA-Z0-9_]{2,40}$(DOLLAR)' \
	--argument-rgx='([a-z_][a-zA-Z0-9_]{2,30}|rc|hr|s|c|ch|cx|cy|cb|fn)$(DOLLAR)' \
	--variable-rgx='([a-z_][a-zA-Z0-9_]{2,30}|rc|hr|s|c|ch|cx|cy|cb|fn)$(DOLLAR)' \
	--attr-rgx='([a-z_][a-zA-Z0-9_]{2,30}|rc|hr|o)$(DOLLAR)' \
	--module-rgx='(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+)|(td[A-Z][a-zA-Z0-9]+)|(t(e|)st(-|)[a-zA-Z0-9]+))$(DOLLAR)' \
	--class-rgx='(td|)[A-Z_][a-zA-Z0-9_]+$(DOLLAR)' \
	--const-rgx='(g_(k|)[abcdefhmnpilorstu]+[A-Z][a-zA-Z0-9]+|[A-Z_][A-Z0-9_]+|__copyright__|__version__|__file__|__all__)$(DOLLAR)' \
	--good-names='i,j,k,t,o,c,e,ch,s,_' \
	$(if-expr $(VPOX_PYLINT_VERSION) >= 10000,--class-attribute-rgx='(k[abcdefhmnpilorstu]+[A-Z0-9][a-zA-Z0-9_]{0,32}|[A-Z_][A-Z0-9_]{2,32})',) \
	$(if-expr $(VPOX_PYLINT_VERSION) >= 10500,--max-nested-blocks=9,) \
       $(if-expr $(VPOX_PYLINT_VERSION) >= 10100,--disable=bad-whitespace,) \
       $(if-expr $(VPOX_PYLINT_VERSION) >= 10201,--disable=bad-continuation --disable=eval-used,) \
       $(if-expr $(VPOX_PYLINT_VERSION) >= 10201 && $(VPOX_PYLIN_VERSION) < 10500,--disable=bad-option-value,) \
       $(if-expr $(VPOX_PYLINT_VERSION) >= 10500,--disable=wrong-import-position --disable=E0012 --disable=locally-enabled,) \
       $(if-expr $(VPOX_PYLINT_VERSION) >= 10600,--disable=missing-docstring --disable=trailing-newlines --disable=ungrouped-imports,) \
       $(if-expr $(VPOX_PYLINT_VERSION) >= 10800,--disable=redundant-keyword-arg,) \
       $(if-expr $(VPOX_PYLINT_VERSION) >= 20000,--disable=useless-object-inheritance --disable=useless-return,) \
       $(if-expr $(VPOX_PYLINT_VERSION) >= 20400,--disable=import-outside-toplevel,) \
	--disable=unnecessary-semicolon,invalid-encoded-data,global-statement,bare-except,broad-except,multiple-statements,no-self-use,fixme \
	--disable=I0011 \
	--ignored-classes=testdriver.vpoxcon \


# Define the macro for win path conversion.
ifndef VPOX_ONLY_SDK
  VPOX_FN_MAKE_WIN_PATH = $(subst /,\\,$(1))
else
  # on Wine Z: is always FS root
  VPOX_FN_MAKE_WIN_PATH = $(subst /,\\,$(patsubst /%,Z:/%,$(1)))
endif #!VPOX_ONLY_SDK

# The kprofile build automagically links with kProfile.
ifeq ($(KBUILD_TYPE),kprofile)
 LIB_RUNTIME += $(LIB_KPROFILE)
endif

# Enable C++ electric fence heap. (Warning: will easily run out of virtual memory / kernel stuff on Linux/Windows.)
ifdef VPOX_WITH_CPP_EF
 LIB_RUNTIME <= $(LIB_RUNTIME_EF)
endif

# Overridable libraries (unix).
LIB_PTHREAD      ?= pthread

# Xcursor (consider an SDK for this).
ifeq ($(VPOX_XCURSOR_LIBS),)
 ifeq ($(KBUILD_TARGET),solaris)
  VPOX_XCURSOR_LIBS := $(lastword $(wildcard $(KBUILD_DEVTOOLS_TRG)/libXcursor/*/lib/libXcursor.a))
  ifneq ($(VPOX_XCURSOR_LIBS),)
   VPOX_XCURSOR_INCS := $(patsubst %/lib/libXcursor.a,%/include, $(VPOX_XCURSOR_LIBS))
   VPOX_XCURSOR_LIBS += X11 Xrender Xfixes
  endif
 endif
 ifeq ($(VPOX_XCURSOR_LIBS),)
  VPOX_XCURSOR_LIBS := Xcursor
 endif
endif


# Intel ASL compiler for ACPI
VPOX_IASLCMD   ?= $(firstword $(wildcard $(KBUILD_DEVTOOLS_HST)/bin/iasl$(HOSTSUFF_EXE)) iasl$(HOSTSUFF_EXE))

# libxslt XSLT processor. (see PATH_TOOL_YASM for explanation why it's temporarily located in bin.)
ifeq ($(VPOX_XSLTPROC),)
 ifeq ($(KBUILD_HOST),win)
  VPOX_XSLTPROC := $(wildcard $(KBUILD_DEVTOOLS)/$(KBUILD_HOST).$(KBUILD_HOST_ARCH)/libxslt/10128/bin/xsltproc.exe)
  ifeq ($(VPOX_XSLTPROC),)
   VPOX_XSLTPROC := $(KBUILD_DEVTOOLS)/win.x86/bin/xsltproc.exe
  endif
 else ifeq ($(KBUILD_HOST),os2)
  VPOX_XSLTPROC  := BEGINLIBPATH="$(KBUILD_DEVTOOLS_HST)/bin;$$BEGINLIBPATH" $(KBUILD_DEVTOOLS_HST)/bin/xsltproc.exe
 else ifeq ($(KBUILD_HOST),haiku)
  VPOX_XSLTPROC  := $(KBUILD_DEVTOOLS)/haiku.x86/bin/xsltproc
 else
  VPOX_XSLTPROC  := xsltproc$(HOSTSUFF_EXE)
 endif
endif

# bin2c (convert binary files into C arrays)
VPOX_BIN2C      ?= $(PATH_OBJ)/bin2c/bin2c$(HOSTSUFF_EXE)

# RTManifest (extension pack manifest utility)
VPOX_RTMANIFEST ?= $(PATH_OBJ)/bldRTManifest/bldRTManifest$(HOSTSUFF_EXE)

# RTSignTool (certificate extraction tool)
VPOX_RTSIGNTOOL ?= $(PATH_OBJ)/bldRTSignTool/bldRTSignTool$(HOSTSUFF_EXE)

# RTIsoMaker (our own ISO maker).
VPOX_RTISOMAKER  ?= $(PATH_OBJ)/bldRTIsoMaker/bldRTIsoMaker$(HOSTSUFF_EXE)

# RTLdrCheckImports (checks imports against oldest supported OS version (GAs typically))
VPOX_RTLDRCHECKIMPORTS ?= $(PATH_OBJ)/bldRTLdrCheckImports/bldRTLdrCheckImports$(HOSTSUFF_EXE)

# VPoxCmp (simple /bin/cmp with more sensible output)
VPOX_VPOXCMP    ?= $(PATH_OBJ)/VPoxCmp/VPoxCmp$(HOSTSUFF_EXE)

# VPoxCPP (special purpose C preprocessor)
VPOX_VPOXCPP    ?= $(PATH_OBJ)/VPoxCPP/VPoxCPP$(HOSTSUFF_EXE)

# VPoxTpG (tracepoint generator)
VPOX_VPOXTPG    ?= $(PATH_OBJ)/VPoxTpG/VPoxTpG$(HOSTSUFF_EXE)

# VPoxPeSetVersion (changes the minimum OS version of an image)
VPOX_PE_SET_VERSION ?= $(PATH_OBJ)/VPoxPeSetVersion/VPoxPeSetVersion$(HOSTSUFF_EXE)

# Visual C++ EditBin.exe.
VPOX_VCC_EDITBIN = $(if $(PATH_TOOL_$(VPOX_VCC_TOOL)_BIN),$(PATH_TOOL_$(VPOX_VCC_TOOL)_BIN)/,)editbin.exe /NoLogo

# filesplitter (splits java files)
VPOX_FILESPLIT  ?= $(PATH_OBJ)/filesplitter/filesplitter$(HOSTSUFF_EXE)

# biossums (set BIOS checksums)
VPOX_BIOSSUMS   ?= $(PATH_OBJ)/biossums/biossums$(HOSTSUFF_EXE)

# MakeAlternativeSource (for BIOSes)
VPOX_MAKE_ALTERNATIVE_SOURCE ?= $(PATH_OBJ)/MakeAlternativeSource/MakeAlternativeSource$(HOSTSUFF_EXE)

# VPoxDef2LazyLoad (lazy dynamic library loader assembly generator)
VPOX_DEF_2_LAZY_LOAD ?= $(PATH_OBJ)/VPoxDef2LazyLoad/VPoxDef2LazyLoad$(HOSTSUFF_EXE)

# VPoxCheckImports (checks what we imports from on windows)
VPOX_CHECK_IMPORTS ?= $(PATH_OBJ)/VPoxCheckImports/VPoxCheckImports$(HOSTSUFF_EXE)

# VPoxEditCoffLib (symbol name tweaking for VPoxSF on windows)
VPOX_EDIT_COFF_LIB ?= $(PATH_OBJ)/VPoxEditCoffLib/VPoxEditCoffLib$(HOSTSUFF_EXE)

# GNU tar if present.
if1of ($(KBUILD_TARGET), linux os2 win)
 VPOX_GTAR ?= tar
else if1of ($(KBUILD_TARGET), freebsd netbsd solaris)
 VPOX_GTAR ?= gtar
endif

# zip
VPOX_ZIP ?= zip$(HOSTSUFF_EXE)

ifeq ($(KBUILD_TARGET),win)
 ifeq ($(KBUILD_TARGET_ARCH),x86) # Normally we should test for KBUILD_HOST_ARCH but we only require MINGWW64 for 64-bit _targets_
  VPOX_NM ?= $(PATH_TOOL_MINGW32)/bin/nm.exe -p
 else
  VPOX_NM ?= $(PATH_TOOL_MINGWW64)/bin/nm.exe -p
 endif
else ifeq ($(KBUILD_HOST),darwin) # Xcode 7.3.1 nm doesn't like -t, and -x behaves very differently.  Throwing in -B (bsd) to make sure.
 VPOX_NM ?= $(subst $(REDIRECT_INT),$(REDIRECT_EXT),$(TOOL_$(VPOX_GCC_TOOL)_ENV_SETUP) $(PATH_TOOL_$(VPOX_GCC_TOOL)_TOOLCHAIN_BIN_SLASH)nm) -p \
        $(if-expr $(VPOX_XCODE_VERSION_MAJOR) > 7 || ($(VPOX_XCODE_VERSION_MAJOR) == 7 && $(VPOX_XCODE_VERSION_MINOR) >= 3),-B,)
else
 VPOX_NM ?= nm -p -t x
endif

# Makeself for the linux installers.
VPOX_MAKESELF  ?= $(KBUILD_DEVTOOLS)/common/makeself/v2.1.5/makeself.sh

# Microsoft HTML Help Workshop.
VPOX_PATH_HTML_HELP_WORKSHOP ?= $(KBUILD_DEVTOOLS)/win.x86/HTML_Help_Workshop/v1.3/

# Path to the null soft installer.
VPOX_PATH_NSIS ?= $(KBUILD_DEVTOOLS)/win.x86/nsis/v3.04-log

# Path to AutoIt3.
VPOX_PATH_AUTOIT3 ?= $(KBUILD_DEVTOOLS)/win.x86/autoit/v3.2.10.0

# Windows install tools...
# Note! The scripts has been moved to Bin in v8.0.
VPOX_PATH_WIX       ?= $(KBUILD_DEVTOOLS)/win.x86/wix/v3.8.1128.0
VPOX_PATH_MSITRAN   ?= $(KBUILD_DEVTOOLS)/win.x86/sdk/v7.1/Bin/MsiTran.Exe
VPOX_PATH_MSIDB     ?= $(KBUILD_DEVTOOLS)/win.x86/sdk/v7.1/Bin/MsiDb.Exe
VPOX_PATH_WISUBSTG  ?= $(KBUILD_DEVTOOLS)/win.x86/sdk/v7.1/Samples/sysmgmt/msi/scripts/WiSubStg.vbs
VPOX_PATH_WISUMINFO ?= $(KBUILD_DEVTOOLS)/win.x86/sdk/v7.1/Samples/sysmgmt/msi/scripts/WiSumInf.vbs
VPOX_PATH_DIFX      ?= $(KBUILD_DEVTOOLS)/win.$(KBUILD_TARGET_ARCH)/DIFx/v2.1-r3

ifdef VPOX_OSE ## @todo try get rid of this crap! People can use the latest and greatest Yasm release, no need to check in the binary for OSE.
 # We need to export YASM for OSE, but since it was converted to .zip we need to
 # allow for the location used by the zip to be properly cleaned up first.
 if1of ($(KBUILD_HOST).$(KBUILD_HOST_ARCH), linux.x86 solaris.x86 win.x86)
  PATH_TOOL_YASM ?= $(KBUILD_DEVTOOLS_HST)/bin
 endif
endif

# The Microsoft IDL compiler (the SDK build needs this on non-Windows).
VPOX_WIN_MIDL ?= $(EXEC_X86_WIN32) $(call VPOX_FN_MAKE_WIN_PATH,$(firstword $(wildcard $(addsuffix /[Mm][Ii][Dd][Ll].[Ee][Xx][Ee], \
	$(KBUILD_DEVTOOLS)/win.x86/sdk/v7.1/Bin$(if-expr "$(KBUILD_HOST).$(KBUILD_HOST_ARCH)" == "win.amd64",/x64,) \
	$(KBUILD_DEVTOOLS)/win.x86/ddk/7600.16385.1/bin/x86 \
	$(KBUILD_DEVTOOLS)/win.x86/bin \
	$(PATH_SDK_$(VPOX_WINPSDK)_BIN) \
	$(PATH_SDK_$(VPOX_WINPSDK)) \
	$(PATH_SDK_WINPSDK_BIN) \
	$(PATH_SDK_WINPSDK) \
	)) Sorry_Cannot_Find_The_Midl_Compiler_In_The_PSDK))

# XPCOM setup for all but win32.
ifneq ($(KBUILD_TARGET),win)
 VPOX_WITH_XPCOM      = 1
 # if updating, also update xpidl_INST var in src/libs/xpcom18a4/Makefile.kmk
 VPOX_XPIDL          ?= $(PATH_STAGE_BIN)/xpidl$(HOSTSUFF_EXE)
 ifeq ($(KBUILD_TARGET),os2)
  VPOX_XPIDL_ENV      = BEGINLIBPATH="$(dir $(VPOX_XPIDL));$$BEGINLIBPATH"$(SP)
 endif
 VPOX_PATH_XPCOM_IDL ?= $(VPOX_PATH_SDK)/bindings/xpcom/idl
 VPOX_XPCOM_INCS     ?=				\
 	$(VPOX_PATH_SDK)/bindings/xpcom/include	\
 	$(VPOX_PATH_SDK)/bindings/xpcom/include/xpcom	\
 	$(VPOX_PATH_SDK)/bindings/xpcom/include/string	\
 	$(VPOX_PATH_SDK)/bindings/xpcom/include/xpcom	\
 	$(VPOX_PATH_SDK)/bindings/xpcom/include/nsprpub \
 	$(VPOX_PATH_SDK)/bindings/xpcom/include/ipcd
 ifneq ($(KBUILD_TARGET),os2)
  # libIDL-config (for xpcom18a4)
  ifeq ($(origin VPOX_LIBIDL_CONFIG),undefined)
   ifeq ($(KBUILD_HOST),solaris)
    VPOX_LIBIDL_CONFIG_FALLBACK = $(lastword $(wildcard $(KBUILD_DEVTOOLS)/solaris.amd64/libIDL/*/bin/libIDL-config-2))
   endif
   export VPOX_LIBIDL_CONFIG := $(firstword $(which libIDL-config-2 libIDL-config $(VPOX_LIBIDL_CONFIG_FALLBACK)) libIDL-config-2-not-found)
  endif
 endif
endif

# The X11 LIBPATH. (The amd64 hack is for RHEL4.)
ifeq ($(KBUILD_TARGET_ARCH),amd64)
 VPOX_LIBPATH_X11 ?= /usr/X11R6/lib64 /usr/X11R6/lib
else
 VPOX_LIBPATH_X11 ?= /usr/X11R6/lib
endif

# 32bit X11 LIBPATH for building 32bit guest additions
VPOX_LIBPATH32_X11 ?= /usr/X11R6/lib32 /usr/X11R6/lib

# Good windows shell.
VPOX_GOOD_COMSPEC = $(subst \,/,$(SystemRoot))/System32/cmd.exe
VPOX_GOOD_COMSPEC_BS ?= $(subst /,\,$(VPOX_GOOD_COMSPEC))

#
# Macros dealing with the darwin version we're targeting.
# The DEF in VPOX_DEF_MACOSX_VERSION_MIN mean default.  The default min
# version is assumed to be the
#
ifeq ($(KBUILD_TARGET),darwin)
 ifdef VPOX_WITH_NEW_XCODE
  VPOX_DEF_MACOSX_VERSION_MIN ?= 10.9
 else
  VPOX_DEF_MACOSX_VERSION_MIN ?= 10.6
 endif

 ifdef VPOX_WITH_NEW_XCODE
  # Use the tool path of the compiler (it's clang, not gcc in this instance).
  include $(KBUILD_TOOL_PATHS)/$(VPOX_GCC_TOOL).kmk
  VPOX_PATH_MACOSX_DEVEL_ROOT := $(PATH_TOOL_$(VPOX_GCC_TOOL))
 else
  # Check for the Xcode 4.1 bits in tools/darwin.x86.
  if   !defined(VPOX_WITH_MACOSX_COMPILERS_FROM_DEVEL) \
    && !defined(VPOX_XCODE_VERSION) \
    && exists "$(KBUILD_DEVTOOLS)/darwin.x86/xcode/v4.1"
   VPOX_WITH_MACOSX_COMPILERS_FROM_DEVEL := 1
   VPOX_PATH_MACOSX_DEVEL_ROOT := $(KBUILD_DEVTOOLS)/darwin.x86/xcode/v4.1
   VPOX_XCODE_VERSION := 4.1
  endif
 endif

 # Fallback - system / LocalConfig.kmk.
 ifdef VPOX_WITH_NEW_XCODE
  ifndef VPOX_PATH_MACOSX_DEVEL_ROOT
   VPOX_PATH_MACOSX_DEVEL_ROOT := $(firstword $(wildcard /Applications/Xcode.app/Contents/Developer /Developer))
  endif
  ifndef VPOX_PATH_MACOSX_SDK_ROOT
   VPOX_PATH_MACOSX_SDK_ROOT := $(firstword $(wildcard \
   		$(PATH_TOOL_$(VPOX_GCC_TOOL)_SDKS) \
   		$(VPOX_PATH_MACOSX_DEVEL_ROOT)/SDKs/. \
   		/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/. \
   		/Developer/SDKs/. ))
  endif
  ifndef VPOX_PATH_MACOSX_TOOLCHAIN_ROOT
   VPOX_PATH_MACOSX_TOOLCHAIN_ROOT := $(firstword $(wildcard \
   		$(PATH_TOOL_$(VPOX_GCC_TOOL)_TOOLCHAIN) \
   		$(VPOX_PATH_MACOSX_DEVEL_ROOT)/Library/Developer/CommandLineTools/. \
   		$(VPOX_PATH_MACOSX_DEVEL_ROOT)/Toolchains/XcodeDefault.xctoolchain/. \
   		/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/. \
               /Library/Developer/CommandLineTools/. \
   		) /. )
  endif
 else
  VPOX_PATH_MACOSX_DEVEL_ROOT     ?= /Developer
  VPOX_PATH_MACOSX_SDK_ROOT       ?= $(VPOX_PATH_MACOSX_DEVEL_ROOT)/SDKs
  VPOX_PATH_MACOSX_TOOLCHAIN_ROOT ?= $(VPOX_PATH_MACOSX_DEVEL_ROOT)
 endif

# Where to search for SDKs.
VPOX_PATH_MACOSX_SDK_ROOT_DIRS ?= \
	$(VPOX_PATH_MACOSX_SDK_ROOT) \
	$(KBUILD_DEVTOOLS)/darwin.x86/SDKs/ \
	$(KBUILD_DEVTOOLS)/darwin.amd64/SDKs/ \
	$(KBUILD_DEVTOOLS)/darwin.x86/xcode/v4.1/SDKs \
	$(KBUILD_DEVTOOLS)/darwin.x86/xcode/v3.2.6/SDKs

 # Figure the default SDK location and obsolete linker tricks.
 ifeq ($(VPOX_DEF_MACOSX_VERSION_MIN),10.4)
  ifeq ($(origin VPOX_DARWIN_CLASSIC_LINKER),undefined)
   VPOX_DARWIN_CLASSIC_LINKER := $(shell ld -v 2>&1 )
   ifneq ($(filter ld64%, $(subst :, , $(VPOX_DARWIN_CLASSIC_LINKER))),)
    export VPOX_DARWIN_CLASSIC_LINKER := -Wl,-classic_linker
   else
    export VPOX_DARWIN_CLASSIC_LINKER :=
   endif
  endif
  ifndef VPOX_PATH_MACOSX_SDK
VPOX_PATH_MACOSX_SDK := $(firstword $(wildcard $(addsuffix /MacOSX$(VPOX_DEF_MACOSX_VERSION_MIN)u.sdk, $(VPOX_PATH_MACOSX_SDK_ROOT_DIRS))) \
	$(VPOX_PATH_MACOSX_SDK_ROOT)/MacOSX$(VPOX_DEF_MACOSX_VERSION_MIN)u.sdk )
  endif
 else
  ifndef VPOX_PATH_MACOSX_SDK
VPOX_PATH_MACOSX_SDK := $(firstword $(wildcard $(addsuffix /MacOSX$(VPOX_DEF_MACOSX_VERSION_MIN).sdk, $(VPOX_PATH_MACOSX_SDK_ROOT_DIRS))) \
	$(VPOX_PATH_MACOSX_SDK_ROOT)/MacOSX$(VPOX_DEF_MACOSX_VERSION_MIN).sdk )
  endif
 endif

 ## The Xcode version.
 ifeq ($(KBUILD_HOST),darwin)
  ifndef VPOX_XCODE_VERSION
   ifdef VPOX_WITH_NEW_XCODE
    VPOX_XCODE_VERSION := $(shell exec $(VPOX_PATH_MACOSX_DEVEL_ROOT)/usr/bin/xcodebuild -version 2>&1)
    ifneq ($(pos Symbol not found,$(VPOX_XCODE_VERSION)),0) # Try detect unresolved symbol running Xcode 6.2 on Catalina.
     VPOX_XCODE_VERSION = 6.2
    else
     VPOX_XCODE_VERSION := $(word 2, $(VPOX_XCODE_VERSION))
    endif
   else ifdef VPOX_WITH_MACOSX_COMPILERS_FROM_DEVEL
    VPOX_XCODE_VERSION := $(word 2, $(shell $(VPOX_PATH_MACOSX_DEVEL_ROOT)/usr/bin/xcodebuild -version))
   else
    VPOX_XCODE_VERSION := $(word 2, $(shell xcodebuild -version))
   endif
   ifeq ($(strip $(VPOX_XCODE_VERSION)),)
    ifdef VPOX_WITH_NEW_XCODE
     VPOX_XCODE_VERSION := 6.2
    else
     VPOX_XCODE_VERSION := 4.1
    endif
   endif
  endif
  ifdef VPOX_WITH_NEW_XCODE
   ifdef KBUILD_USE_KOBJCACHE
    $(warning KBUILD_USE_KOBJCACHE does _not_ currently work with this version of Xcode)
   endif
  else
   ifeq ($(VPOX_XCODE_VERSION),4.2)
    $(warning Xcode 4.2 is not able to correctly build the recompiler!)
    $(warning Please downgrade to Xcode 4.1 if you want a working VMM!)
   endif
  endif
 else
  VPOX_XCODE_VERSION ?= 4.1
 endif
 VPOX_XCODE_VERSION_MAJOR := $(word 1, $(subst ., ,$(VPOX_XCODE_VERSION)))
 VPOX_XCODE_VERSION_MINOR := $(word 2, $(subst ., ,$(VPOX_XCODE_VERSION)))
 VPOX_XCODE_VERSION       := $(VPOX_XCODE_VERSION_MAJOR).$(VPOX_XCODE_VERSION_MINOR)

 ifeq ($(KBUILD_TARGET_ARCH),x86)
  if1of ($(VPOX_DEF_MACOSX_VERSION_MIN), 10.4 10.5)
   VPOX_DARWIN_NO_COMPACT_LINKEDIT ?= $(VPOX_LD_no_compact_linkedit)
   TOOL_GXX4MACHO_SUFFIX ?= -4.0
  endif
 else
  if $(VPOX_XCODE_VERSION_MAJOR) < 4 && "$(VPOX_XCODE_VERSION)" != "3.2"
   ifeq ($(PATH_CURRENT),$(PATH_ROOT)/tools)
    $(warning VPox: 64-bit darwin builds require Xcode 3.2 or later, you have $(VPOX_XCODE_VERSION))
   else
    $(error VPox: 64-bit darwin builds require Xcode 3.2 or later, you have $(VPOX_XCODE_VERSION))
   endif
  endif
 endif
 ifdef VPOX_WITH_NEW_XCODE
  if $(KBUILD_HOST_VERSION_MAJOR) >= 18 # HACK ALERT! dtrace doesn't work on Mojave if we specify our Xcode 6.2 environment.
   override TOOL_StandardDTrace_DTRACE := dtrace "-xcpppath=$(VPOX_PATH_MACOSX_DEVEL_ROOT)/usr/bin/gcc"
  else
   override TOOL_StandardDTrace_DTRACE := $(TOOL_$(VPOX_GCC_TOOL)_ENV_SETUP) dtrace "-xcpppath=$(VPOX_PATH_MACOSX_DEVEL_ROOT)/usr/bin/gcc"
  endif
  export PATH:=$(VPOX_PATH_MACOSX_SDK)/usr/bin:$(PATH)
 else
  if  $(VPOX_XCODE_VERSION_MAJOR) > 4 || ($(VPOX_XCODE_VERSION_MAJOR) == 4 && $(VPOX_XCODE_VERSION_MINOR) >= 2)
   TOOL_GXX4MACHO_PREFIX ?= llvm-
  endif
  if  $(VPOX_XCODE_VERSION_MAJOR) < 5
   TOOL_GXX4MACHO_SUFFIX ?= -4.2
  endif
  VPOX_DARWIN_NO_COMPACT_LINKEDIT ?=

  TOOL_GCC4MACHO_SUFFIX ?= $(TOOL_GXX4MACHO_SUFFIX)$(HOSTSUFF_EXE)
  TOOL_GCC4MACHO_PREFIX ?= $(TOOL_GXX4MACHO_PREFIX)
  if defined(VPOX_WITH_MACOSX_COMPILERS_FROM_DEVEL)
   TOOL_GCC4MACHO_PREFIX := $(VPOX_PATH_MACOSX_TOOLCHAIN_ROOT)/usr/bin/$(TOOL_GCC4MACHO_PREFIX)
   TOOL_GXX4MACHO_PREFIX := $(VPOX_PATH_MACOSX_TOOLCHAIN_ROOT)/usr/bin/$(TOOL_GXX4MACHO_PREFIX)
   TOOL_GCC4MACHO_SUFFIX := $(TOOL_GCC4MACHO_SUFFIX) -isysroot $(VPOX_PATH_MACOSX_SDK)
   TOOL_GXX4MACHO_SUFFIX := $(TOOL_GXX4MACHO_SUFFIX) -isysroot $(VPOX_PATH_MACOSX_SDK)
   ifndef SVN  # must expand first so we won't be using old svn.
    SVN := $(firstword $(which svn) svn)
   endif
   if  $(VPOX_XCODE_VERSION_MAJOR) > 4 || ($(VPOX_XCODE_VERSION_MAJOR) == 4 && $(VPOX_XCODE_VERSION_MINOR) >= 2)
    export PATH:=$(VPOX_PATH_MACOSX_DEVEL_ROOT)/usr/bin/:$(VPOX_PATH_MACOSX_SDK)/usr/bin:$(VPOX_PATH_MACOSX_TOOLCHAIN_ROOT)/usr/bin:$(PATH)
    export DEVELOPER_DIR:=$(VPOX_PATH_MACOSX_DEVEL_ROOT)
   else
    export PATH:=$(VPOX_PATH_MACOSX_DEVEL_ROOT)/usr/bin/:$(PATH)
   endif
   TOOL_GXX32_CC  = $(TOOL_GCC4MACHO_PREFIX)gcc$(TOOL_GCC4MACHO_SUFFIX) -m32
   TOOL_GXX32_CXX = $(TOOL_GCC4MACHO_PREFIX)g++$(TOOL_GCC4MACHO_SUFFIX) -m32
   TOOL_GXX32_LD  = $(TOOL_GXX32_CXX)
   override TOOL_StandardDTrace_DTRACE := dtrace "-xcpppath=$(TOOL_GCC4MACHO_PREFIX)cpp-4.2"
  endif
  if  $(VPOX_XCODE_VERSION_MAJOR) < 5
   ## @todo WTF do we do the -m32/64 stuff here for these compilers? Also the visibility should be elsewhere...
   TOOL_GXX4MACHO_OBJC   = $(TOOL_GCC4MACHO_PREFIX)gcc$(TOOL_GCC4MACHO_SUFFIX) $(if-expr $(KBUILD_TARGET_ARCH) == "x86",-m32,-m64) -fvisibility=hidden
   TOOL_GXX4MACHO_OBJCXX = $(TOOL_GCC4MACHO_PREFIX)gcc$(TOOL_GCC4MACHO_SUFFIX) $(if-expr $(KBUILD_TARGET_ARCH) == "x86",-m32,-m64) -fvisibility=hidden -fvisibility-inlines-hidden
  endif
 endif

 VPOX_DARWIN_DEF_SDK_DEFS        := MAC_OS_X_VERSION_MIN_REQUIRED=$(subst .,,$(VPOX_DEF_MACOSX_VERSION_MIN))0 \
                                    MAC_OS_X_VERSION_MAX_ALLOWED=$(subst .,,$(VPOX_DEF_MACOSX_VERSION_MIN))0
 VPOX_DARWIN_DEF_SDK_CFLAGS      := -mmacosx-version-min=$(VPOX_DEF_MACOSX_VERSION_MIN) -isysroot $(VPOX_PATH_MACOSX_SDK)
 VPOX_DARWIN_DEF_SDK_CXXFLAGS    := -mmacosx-version-min=$(VPOX_DEF_MACOSX_VERSION_MIN) -isysroot $(VPOX_PATH_MACOSX_SDK)
 VPOX_DARWIN_DEF_SDK_OBJCFLAGS   := -mmacosx-version-min=$(VPOX_DEF_MACOSX_VERSION_MIN) -isysroot $(VPOX_PATH_MACOSX_SDK)
 VPOX_DARWIN_DEF_SDK_OBJCXXFLAGS := -mmacosx-version-min=$(VPOX_DEF_MACOSX_VERSION_MIN) -isysroot $(VPOX_PATH_MACOSX_SDK)
 VPOX_DARWIN_DEF_SDK_LDFLAGS      = -mmacosx-version-min=$(VPOX_DEF_MACOSX_VERSION_MIN) -Wl,-syslibroot,$(VPOX_PATH_MACOSX_SDK) \
	-Wl,-headerpad_max_install_names $(VPOX_DARWIN_CLASSIC_LINKER) $(VPOX_DARWIN_NO_COMPACT_LINKEDIT)

 # specific versions.
 ## @todo s/VPOX_DARWIN_DEF_SDK_10/VPOX_DARWIN_SDK_10/g

 if1of ($(VPOX_DEF_MACOSX_VERSION_MIN), 10.4) # classic linker detection is bust otherwise
  VPOX_PATH_MACOSX_SDK_10_4            ?= $(VPOX_PATH_MACOSX_SDK_ROOT)/MacOSX10.4u.sdk
  VPOX_DARWIN_DEF_SDK_10_4_DEFS        := MAC_OS_X_VERSION_MIN_REQUIRED=1040 MAC_OS_X_VERSION_MAX_ALLOWED=1040
  VPOX_DARWIN_DEF_SDK_10_4_CFLAGS      := -mmacosx-version-min=10.4 -isysroot $(VPOX_PATH_MACOSX_SDK_10_4)
  VPOX_DARWIN_DEF_SDK_10_4_CXXFLAGS    := -mmacosx-version-min=10.4 -isysroot $(VPOX_PATH_MACOSX_SDK_10_4)
  VPOX_DARWIN_DEF_SDK_10_4_OBJCFLAGS   := -mmacosx-version-min=10.4 -isysroot $(VPOX_PATH_MACOSX_SDK_10_4)
  VPOX_DARWIN_DEF_SDK_10_4_OBJCXXFLAGS := -mmacosx-version-min=10.4 -isysroot $(VPOX_PATH_MACOSX_SDK_10_4)
  VPOX_DARWIN_DEF_SDK_10_4_LDFLAGS     := -mmacosx-version-min=10.4 -Wl,-syslibroot,$(VPOX_PATH_MACOSX_SDK_10_4) \
	-Wl,-headerpad_max_install_names $(VPOX_DARWIN_CLASSIC_LINKER)
 else
  VPOX_PATH_MACOSX_SDK_10_4          = $(error VPox: $(if $(target),$(target): ,)Using 10.4 SDK)
  VPOX_DARWIN_DEF_SDK_10_4_CXXFLAGS  = $(error VPox: $(if $(target),$(target): ,)Using 10.4 SDK)
  VPOX_DARWIN_DEF_SDK_10_4_LDFLAGS   = $(error VPox: $(if $(target),$(target): ,)Using 10.4 SDK)
 endif

 if1of ($(VPOX_DEF_MACOSX_VERSION_MIN), 10.4 10.5)
  VPOX_PATH_MACOSX_SDK_10_5            ?= $(VPOX_PATH_MACOSX_SDK_ROOT)/MacOSX10.5.sdk
  VPOX_DARWIN_DEF_SDK_10_5_DEFS        := MAC_OS_X_VERSION_MIN_REQUIRED=1050 MAC_OS_X_VERSION_MAX_ALLOWED=1050
  VPOX_DARWIN_DEF_SDK_10_5_CFLAGS      := -mmacosx-version-min=10.5 -isysroot $(VPOX_PATH_MACOSX_SDK_10_5)
  VPOX_DARWIN_DEF_SDK_10_5_CXXFLAGS    := -mmacosx-version-min=10.5 -isysroot $(VPOX_PATH_MACOSX_SDK_10_5)
  VPOX_DARWIN_DEF_SDK_10_5_OBJCFLAGS   := -mmacosx-version-min=10.5 -isysroot $(VPOX_PATH_MACOSX_SDK_10_5)
  VPOX_DARWIN_DEF_SDK_10_5_OBJCXXFLAGS := -mmacosx-version-min=10.5 -isysroot $(VPOX_PATH_MACOSX_SDK_10_5)
  VPOX_DARWIN_DEF_SDK_10_5_LDFLAGS     := -mmacosx-version-min=10.5 -Wl,-syslibroot,$(VPOX_PATH_MACOSX_SDK_10_5) \
	-Wl,-headerpad_max_install_names $(VPOX_DARWIN_NO_COMPACT_LINKEDIT)
 else
  VPOX_PATH_MACOSX_SDK_10_5          = $(error VPox: $(if $(target),$(target): ,)Using 10.5 SDK)
  VPOX_DARWIN_DEF_SDK_10_5_CXXFLAGS  = $(error VPox: $(if $(target),$(target): ,)Using 10.5 SDK)
  VPOX_DARWIN_DEF_SDK_10_5_LDFLAGS   = $(error VPox: $(if $(target),$(target): ,)Using 10.5 SDK)
 endif

 if1of ($(VPOX_DEF_MACOSX_VERSION_MIN), 10.4 10.5 10.6)
  VPOX_PATH_MACOSX_SDK_10_6            ?= $(VPOX_PATH_MACOSX_SDK_ROOT)/MacOSX10.6.sdk
  VPOX_DARWIN_DEF_SDK_10_6_DEFS        := MAC_OS_X_VERSION_MIN_REQUIRED=1060 MAC_OS_X_VERSION_MAX_ALLOWED=1060
  VPOX_DARWIN_DEF_SDK_10_6_CFLAGS      := -mmacosx-version-min=10.6 -isysroot $(VPOX_PATH_MACOSX_SDK_10_6)
  VPOX_DARWIN_DEF_SDK_10_6_CXXFLAGS    := -mmacosx-version-min=10.6 -isysroot $(VPOX_PATH_MACOSX_SDK_10_6)
  VPOX_DARWIN_DEF_SDK_10_6_OBJCFLAGS   := -mmacosx-version-min=10.6 -isysroot $(VPOX_PATH_MACOSX_SDK_10_6)
  VPOX_DARWIN_DEF_SDK_10_6_OBJCXXFLAGS := -mmacosx-version-min=10.6 -isysroot $(VPOX_PATH_MACOSX_SDK_10_6)
  VPOX_DARWIN_DEF_SDK_10_6_LDFLAGS     := -mmacosx-version-min=10.6 -Wl,-syslibroot,$(VPOX_PATH_MACOSX_SDK_10_6) \
         -Wl,-headerpad_max_install_names
 else
  VPOX_PATH_MACOSX_SDK_10_6          = $(error VPox: $(if $(target),$(target): ,)Using 10.6 SDK)
  VPOX_DARWIN_DEF_SDK_10_6_CXXFLAGS  = $(error VPox: $(if $(target),$(target): ,)Using 10.6 SDK)
  VPOX_DARWIN_DEF_SDK_10_6_LDFLAGS   = $(error VPox: $(if $(target),$(target): ,)Using 10.6 SDK)
 endif

 if1of ($(VPOX_DEF_MACOSX_VERSION_MIN), 10.4 10.5 10.6 10.7)
  ifndef VPOX_PATH_MACOSX_SDK_10_7
   ifneq ($(wildcard $(VPOX_PATH_MACOSX_SDK_ROOT)/MacOSX10.7.sdk),)
    VPOX_PATH_MACOSX_SDK_10_7           = $(VPOX_PATH_MACOSX_SDK_ROOT)/MacOSX10.7.sdk
   else
    VPOX_PATH_MACOSX_SDK_10_7           = $(KBUILD_DEVTOOLS)/darwin.x86/SDKs/MacOSX10.7.sdk
   endif
  endif
  VPOX_DARWIN_DEF_SDK_10_7_DEFS        := MAC_OS_X_VERSION_MIN_REQUIRED=1070 MAC_OS_X_VERSION_MAX_ALLOWED=1070
  VPOX_DARWIN_DEF_SDK_10_7_CFLAGS      := -mmacosx-version-min=10.7 -isysroot $(VPOX_PATH_MACOSX_SDK_10_7)
  VPOX_DARWIN_DEF_SDK_10_7_CXXFLAGS    := -mmacosx-version-min=10.7 -isysroot $(VPOX_PATH_MACOSX_SDK_10_7)
  VPOX_DARWIN_DEF_SDK_10_7_OBJCFLAGS   := -mmacosx-version-min=10.7 -isysroot $(VPOX_PATH_MACOSX_SDK_10_7)
  VPOX_DARWIN_DEF_SDK_10_7_OBJCXXFLAGS := -mmacosx-version-min=10.7 -isysroot $(VPOX_PATH_MACOSX_SDK_10_7)
  VPOX_DARWIN_DEF_SDK_10_7_LDFLAGS     := -mmacosx-version-min=10.7 -Wl,-syslibroot,$(VPOX_PATH_MACOSX_SDK_10_7) \
         -Wl,-headerpad_max_install_names
 else
  VPOX_PATH_MACOSX_SDK_10_7          = $(error VPox: $(if $(target),$(target): ,)Using 10.7 SDK)
  VPOX_DARWIN_DEF_SDK_10_7_CXXFLAGS  = $(error VPox: $(if $(target),$(target): ,)Using 10.7 SDK)
  VPOX_DARWIN_DEF_SDK_10_7_LDFLAGS   = $(error VPox: $(if $(target),$(target): ,)Using 10.7 SDK)
 endif

 #
 # Use bison and flex from Xcode to avoid linking issues (bison).
 #
 TOOL_BISON_YACC ?= $(TOOL_$(VPOX_GCC_TOOL)_ENV_SETUP) $(PATH_TOOL_$(VPOX_GCC_TOOL)_TOOLCHAIN_BIN_SLASH)bison
 TOOL_FLEX_LEX   ?= $(TOOL_$(VPOX_GCC_TOOL)_ENV_SETUP) $(PATH_TOOL_$(VPOX_GCC_TOOL)_TOOLCHAIN_BIN_SLASH)flex

endif # target=darwin

#
# Macro switching between @executable_path, @rpath and /Applications/VirtualPox.app
# depending on whether the build is hardened or not (dylib install_name).
#
ifeq ($(KBUILD_TARGET),darwin)
 ifndef VPOX_DYLD_EXECUTABLE_PATH
  ifdef VPOX_WITH_HARDENING
   VPOX_DYLD_EXECUTABLE_PATH = $(VPOX_PATH_APP_PRIVATE_ARCH)
  else if 0
   VPOX_DYLD_EXECUTABLE_PATH = @executable_path
  else
   VPOX_DYLD_EXECUTABLE_PATH = @rpath
   VPOX_WITH_RELATIVE_RUNPATH = @loader_path/
  endif
 endif
endif

#
# Check for incompatible rpath combinations.
#
if defined(VPOX_WITH_RUNPATH) && defined(VPOX_WITH_ORIGIN)
 $(error VPox: VPOX_WITH_RUNPATH and VPOX_WITH_ORIGIN are mutually exclusive)
endif
if defined(VPOX_WITH_RELATIVE_RUNPATH) && defined(VPOX_WITH_ORIGIN)
 $(error VPox: VPOX_WITH_RELATIVE_RUNPATH and VPOX_WITH_ORIGIN are mutually exclusive)
endif
if defined(VPOX_WITH_RUNPATH) && defined(VPOX_WITH_RELATIVE_RUNPATH)
 $(error VPox: VPOX_WITH_RUNPATH and VPOX_WITH_RELATIVE_RUNPATH are mutually exclusive)
endif
if defined(VPOX_WITH_RELATIVE_RUNPATH) && defined(VPOX_WITH_HARDENING)
 $(error VPox: VPOX_WITH_RELATIVE_RUNPATH and VPOX_WITH_HARDENING are mutually exclusive)
endif

#
# VPOX_WITH_ORIGIN translates into VPOX_WITH_RELATIVE_RUNPATH.
#
# We use two helper variables for the VPOX_WITH_ORIGIN stuff:
#   VPOX_ORIGIN - Indirect expansion trick.
#   VPOX_GCC_RPATH_OPT - Different GCC/LD combinations needs different options.
#
VPOX_ORIGIN = $$ORIGIN
ifeq ($(KBUILD_TARGET),solaris)
 VPOX_GCC_RPATH_OPT  = -R
else
 VPOX_GCC_RPATH_OPT  = -Wl,-rpath,
 VPOX_GCC_ORIGIN_OPT = -Wl,-z,origin
endif
ifdef VPOX_WITH_ORIGIN
 VPOX_WITH_RELATIVE_RUNPATH = $$(VPOX_ORIGIN)
endif


#
# The X11 headers.
#
VPOX_PATH_X11_ROOT      = $(PATH_ROOT)/src/VPox/Additions/x11/x11include


#
# Miscellaneous includes
#
VPOX_GRAPHICS_INCS = $(PATH_ROOT)/include/VPox/Graphics
VPOX_JPEG_INCS     = $(PATH_ROOT)/src/libs/jpeg-9b


# The icons to use.
ifdef VPOX_OSE
 VPOX_WINDOWS_ICON_FILE           ?= $(PATH_ROOT)/src/VPox/Artwork/win/OSE/VirtualPox_win.ico
 VPOX_WINDOWS_ADDITIONS_ICON_FILE ?= $(PATH_ROOT)/src/VPox/Artwork/win/OSE/VirtualPox_win.ico
 VPOX_NSIS_ICON_FILE              ?= $(PATH_ROOT)/src/VPox/Artwork/win/OSE/VirtualPox_win.ico
 VPOX_MACOSX_ICON_FILE            ?= $(PATH_ROOT)/src/VPox/Artwork/darwin/OSE/VirtualPox.icns
else
 ifeq ($(KBUILD_HOST),win)
  VPOX_WINDOWS_ICON_FILE           ?= $(PATH_ROOT)/src/VPox/Artwork/win/NonOSE/VirtualPox-vista.ico
  VPOX_WINDOWS_ADDITIONS_ICON_FILE ?= $(PATH_ROOT)/src/VPox/Artwork/win/NonOSE/VirtualPoxGA-vista.ico
  VPOX_NSIS_ICON_FILE              ?= $(PATH_ROOT)/src/VPox/Artwork/win/NonOSE/VirtualPoxGA-nsis.ico
  TOOL_VCC80X86_RC                 := $(KBUILD_DEVTOOLS)/win.x86/ddk/6000/bin/x86/rc.exe
  TOOL_VCC80AMD64_RC               := $(KBUILD_DEVTOOLS)/win.x86/ddk/6000/bin/x86/rc.exe
  TOOL_VCC70_RC                    := $(KBUILD_DEVTOOLS)/win.x86/ddk/6000/bin/x86/rc.exe
 else
  VPOX_WINDOWS_ICON_FILE           ?= $(PATH_ROOT)/src/VPox/Artwork/win/NonOSE/VirtualPox-winxp.ico
  VPOX_WINDOWS_ADDITIONS_ICON_FILE ?= $(PATH_ROOT)/src/VPox/Artwork/win/NonOSE/VirtualPoxGA-winxp.ico
  VPOX_NSIS_ICON_FILE              ?= $(PATH_ROOT)/src/VPox/Artwork/win/NonOSE/VirtualPox-nsis.ico
 endif
 VPOX_MACOSX_ICON_FILE             ?= $(PATH_ROOT)/src/VPox/Artwork/darwin/NonOSE/VirtualPox.icns
endif


ifndef VPOX_NOINC_DYNAMIC_CONFIG_KMK
#
# GCC and YASM dynamic properties.
# Most of this is resolved on first kmk invocation and cached in PATH_OUT.
#
# Note! That a harmless warning is printed if the file doesn't exist.
# Note! Changes in GCC are not detected automatically (yet).
#
if $(pos VPox,$(VPOX_GCC_TOOL)) > 0
 include $(KBUILD_TOOL_PATHS)/$(VPOX_GCC_TOOL).kmk
else
 include $(KBUILD_PATH)/tools/$(VPOX_GCC_TOOL).kmk
endif
ifneq ($(VPOX_GCC_TOOL),$(VPOX_GCC32_TOOL))
 if $(pos VPox,$(VPOX_GCC32_TOOL)) > 0
  include $(KBUILD_TOOL_PATHS)/$(VPOX_GCC32_TOOL).kmk
 else
  include $(KBUILD_PATH)/tools/$(VPOX_GCC32_TOOL).kmk
 endif
endif

# These tests never worked on Windows because of /dev/null, so, there
# can be no harm in just dropping them until cygwin is mp safe.
ifeq ($(KBUILD_HOST),win)
 VPOX_GCC_CHECK_EX_CC  = $(3)
 VPOX_GCC_CHECK_EX_CXX = $(3)
 VPOX_GCC_CHECK_EX_LD  = $(3)
 VPOX_GCC_CHECK_CC = $(2)
 VPOX_GCC_CHECK_CXX = $(2)
 VPOX_GCC_CHECK_LD = $(2)
 VPOX_GCC32_CHECK_CXX = $(2)
else
 # Note! The chcking for 'error: unknown warning option' is for clang on darwin not giving us a
 #       non-zero exit code when using an invalid option here, but it does later on.
 ifndef CLOSEPAR
  CLOSEPAR := )
 endif
 VPOX_GCC_CHECK_EX_CC_CXX = $(shell \
    if $(1) $(subst -Wno-,-W,$(2)) -Werror -c -o /dev/null $(4) > /dev/null 2>&1; then \
        case "`LC_ALL=C $(1) $(subst -Wno-,-W,$(2)) -Werror -c -o /dev/null $(4) 2>&1`" in \
            "error: unknown warning option"*$(CLOSEPAR) echo "$(3)";; \
            *$(CLOSEPAR) echo "$(2)";; \
	 esac; \
    else echo "$(3)"; fi; )
 VPOX_GCC_CHECK_EX_CC  = $(call VPOX_GCC_CHECK_EX_CC_CXX,$(1),$(2),$(3),-xc   $(PATH_OUT)/DynamicConfig.c)
 VPOX_GCC_CHECK_EX_CXX = $(call VPOX_GCC_CHECK_EX_CC_CXX,$(1),$(2),$(3),-xc++ $(PATH_OUT)/DynamicConfig.cpp)
 VPOX_GCC_CHECK_EX_LD = $(shell \
    if $(1) -Wl,$(2) $(if $(eq $(KBUILD_HOST),darwin),-Wl$(COMMA)-u$(COMMA)start -Wl$(COMMA)-undefined$(COMMA)dynamic_lookup,) \
            -nostdlib -o /dev/null -xc /dev/null > /dev/null 2>&1; \
    then echo "-Wl,$(2)"; else echo "$(3)"; fi; )

 VPOX_GCC_CHECK_CC    = $(call VPOX_GCC_CHECK_EX_CC,  $(TOOL_$(VPOX_GCC_TOOL)_ENV_SETUP) $(TOOL_$(VPOX_GCC_TOOL)_CC),$1,$2)
 VPOX_GCC_CHECK_CXX   = $(call VPOX_GCC_CHECK_EX_CXX, $(TOOL_$(VPOX_GCC_TOOL)_ENV_SETUP) $(TOOL_$(VPOX_GCC_TOOL)_CXX),$1,$2)
 VPOX_GCC_CHECK_LD    = $(call VPOX_GCC_CHECK_EX_LD,  $(TOOL_$(VPOX_GCC_TOOL)_ENV_SETUP) $(TOOL_$(VPOX_GCC_TOOL)_LD),$1,$2)
 VPOX_GCC32_CHECK_CXX = $(call VPOX_GCC_CHECK_EX_CXX, $(TOOL_$(VPOX_GCC32_TOOL)_ENV_SETUP) $(TOOL_$(VPOX_GCC32_TOOL)_CXX),$1,$2)
endif

ifeq ($(KBUILD_HOST),win) ## @todo can drop this now, we're not using cygwin.
 # This isn't important (yet) on windows, so cook the result until
 # cygwin is feeling better.
 VPOX_GCC_VERSION := $(int-add $(int-mul 10000, 3), $(int-mul 100, 3), 3)
else
 # This is kind of bad, the returned string needs to be re-evaluated before use.
 # The reason for this hack is that the windows kmk_ash cannot deal with $((1+1)).
 # Some versions of gcc (e.g. openSUSE11) return only major.minor on `gcc -dumpversion`.
 # gcc-5 of openSUSE42.1 only returns the major version on `gcc -dumpversion`!
 VPOX_GCC_VERSION = $(shell ($(1) -dumpfullversion 2>/dev/null || $(1) -dumpversion) | \
    $(SED_EXT) 's|\([0-9][0-9]*\)\.\{0,1\}\([0-9]\{0,\}\)\.\{0,1\}\([0-9]\{0,\}\).*|$$(int-add $$(int-mul 10000, \1), $$(int-mul 100, $$(firstword \2 0)), $$(firstword \3 0))|' )
endif

# YASM macros
ifndef DONT_USE_YASM
 include $(KBUILD_PATH)/tools/YASM.kmk
 if1of ($(KBUILD_HOST), win os2)
  VPOX_YASM_CHECK = $(if-expr "$(shell $(TOOL_YASM_AS) -e -o nul $1 - < /dev/null 2>&1)" == "",$(1),)
 else
  VPOX_YASM_CHECK = $(if-expr "$(shell $(TOOL_YASM_AS) -e -o /dev/null $1 - < /dev/null 2>&1)" == "",$(1),)
 endif
else
 VPOX_YASM_CHECK =
endif

# NASM macros (input and output must differ with recent versions (strcmp)).
ifndef DONT_USE_NASM
 include $(KBUILD_PATH)/tools/NASM.kmk
 if1of ($(KBUILD_HOST), win os2)
  VPOX_NASM_CHECK = $(if-expr "$(shell $(TOOL_NASM_AS) -e -o nul $1 NUL 2>&1)" == "",$(1),$(2))
 else
  VPOX_NASM_CHECK = $(if-expr "$(shell $(TOOL_NASM_AS) -e -o /dev/./null $1 /dev/null 2>&1)" == "",$(1),$(2))
 endif
else
 VPOX_NASM_CHECK =
endif

# Figures the pylint version.
VPOX_PYLINT_FIGURE_VERSION = $(shell $(1) --version 2> /dev/null \
	| $(SED_EXT) -n -e 's/pylint-[^ \t]*/pylint/' \
	-e 's|^ *pylint *\([0-9][0-9]*\).\([0-9][0-9]*\)\.\([0-9][0-9]*\).*$(DOLLAR)|$$(expr \1 * 10000 + \2 * 100 + \3)|p' )

# Java stuff.
ifeq ($(KBUILD_TARGET), darwin)
 VPOX_JAVA_BIN_PATH = $(firstword $(wildcard \
        /System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Commands \
        /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Commands \
        $(if-expr $(VPOX_XCODE_VERSION_MAJOR) >= 4,/System/Library/Frameworks/JavaVM.framework/Versions/A/Commands,) \
        ) /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Commands)
 VPOX_JAVA      = $(VPOX_JAVA_BIN_PATH)/java
 VPOX_JAVAC     = $(VPOX_JAVA_BIN_PATH)/javac
 VPOX_JAVAH     = $(VPOX_JAVA_BIN_PATH)/javah
 VPOX_JAR       = $(VPOX_JAVA_BIN_PATH)/jar
 VPOX_JAVADOC   = $(VPOX_JAVA_BIN_PATH)/javadoc
 VPOX_WSIMPORT  = $(VPOX_JAVA_BIN_PATH)/wsimport
 if $(VPOX_XCODE_VERSION_MAJOR) >= 4 # Lion (4.1-preview 5) has a broken CurrentJDK link.  Blindly applying it to 4.0.
  VPOX_JAVA_INC  = $(VPOX_PATH_MACOSX_SDK)/System/Library/Frameworks/JavaVM.framework/Versions/A/Headers
 else
  VPOX_JAVA_INC  = $(VPOX_PATH_MACOSX_SDK)/System/Library/Frameworks/JavaVM.framework/Versions/1.6/Headers
 endif

else # !darwin

 ifeq ($(KBUILD_TARGET),linux)
  ifeq ($(origin VPOX_JAVA_HOME),undefined)
   # Add correct detection for you distro after the /usr/../java-6-sun line.
   VPOX_JAVA_HOME := $(firstword $(wildcard \
	$(KBUILD_DEVTOOLS)/linux.x86/jdk1.6.0_27 \
	/usr/lib/jvm/java-6-sun  \
	/usr/lib/jvm/java-6-openjdk \
	/usr/lib/jvm/java-6-openjdk-i386 \
	/usr/lib/jvm/java-6-openjdk-amd64 \
	/usr/lib/jvm/java-7-openjdk-i386 \
	/usr/lib/jvm/java-7-openjdk-amd64 \
	/usr/lib/jvm/default-java \
	/usr/lib/jvm/java \
	\
	/usr/lib/jvm/sun-jdk-1.6 \
	) /usr/lib/jvm/java-6-sun)
  endif
 endif

 ifeq ($(KBUILD_TARGET),solaris)
  # VPOX_JAVA_HOME ?= /usr/jdk/jdk1.6.0
  VPOX_JAVA_HOME ?= $(firstword $(abspath $(wildcard \
	/usr/jdk/latest/include/.. \
	/usr/jdk/instances/jdk1.8*/include/.. \
	/usr/jdk/instances/jdk1.7*/include/.. \
	/usr/jdk/instances/jdk1.6*/include/.. \
	)) /usr/java)
 endif

 ifeq ($(KBUILD_TARGET),win)
  VPOX_JAVA_HOME ?= c:/jdk
 endif

 VPOX_JAVA_BIN_PATH ?= $(VPOX_JAVA_HOME)/bin
 VPOX_JAVA          ?= "$(VPOX_JAVA_BIN_PATH)/java$(HOSTSUFF_EXE)"
 VPOX_JAVAC          = "$(VPOX_JAVA_BIN_PATH)/javac$(HOSTSUFF_EXE)"
 VPOX_JAVAH          = "$(VPOX_JAVA_BIN_PATH)/javah$(HOSTSUFF_EXE)"
 VPOX_JAR            = "$(VPOX_JAVA_BIN_PATH)/jar$(HOSTSUFF_EXE)"
 VPOX_JAVADOC        = "$(VPOX_JAVA_BIN_PATH)/javadoc$(HOSTSUFF_EXE)"
 # With Java 11 wsimport was removed, usually part of a separate install now.
 VPOX_WSIMPORT       = $(firstword $(wildcard $(VPOX_JAVA_BIN_PATH)/wsimport$(HOSTSUFF_EXE)) wsimport$(HOSTSUFF_EXE))
 # correct for targets we care about
 VPOX_MD_OS          = $(KBUILD_TARGET)
 VPOX_JAVA_INC       = \
 	$(VPOX_JAVA_HOME)/include \
 	$(VPOX_JAVA_HOME)/include/$(VPOX_MD_OS)
endif # !darwin
# The first transform the almost usless openjdk versions like "javac 9-Ubuntu" into something the 2nd expression groks.
VPOX_JAVA_FIGURE_VERSION = $(shell $(1) -version 2>&1 \
	| $(SED_EXT) -n \
	-e 's/ \([0-9][0-9]*\)\(-[[:alpha:]][[:alpha:]]\)/ \1.0.0\2/' \
	-e 's|^[^ ]* *\([0-9][0-9]*\)\.\([0-9][0-9]*\)\.\([0-9][0-9]*\).*$(DOLLAR)|$$(expr \1 * 10000 + \2 * 100 + \3)|p' )

# Test C and C++ files.
$(PATH_OUT)/DynamicConfig.c $(PATH_OUT)/DynamicConfig.cpp:
	$(QUIET)$(MKDIR) -p $(@D)
	$(QUIET)$(APPEND) -tn "$@" "int foobar(void)" "{" "    return 42;" "}" ""

# No $(QUIET) here as it's interesting to see what goes into the file.
$(PATH_OUT)/DynamicConfig.kmk: \
		$(PATH_ROOT)/Config.kmk \
		$(LOCALCFG) \
		$(AUTOCFG) \
		$(VPOX_GCC_PATH_CC) \
		$(VPOX_GCC_PATH_CXX) \
		$(VPOX_GCC_LIBGCC) \
		$(VPOX_GCC32_PATH_CC) \
		$(VPOX_GCC32_PATH_CXX) \
		$(VPOX_GCC32_LIBGCC) \
		$(if-expr "$(KBUILD_HOST).$(KBUILD_HOST_ARCH)" == "solaris.amd64" && $(KBUILD_HOST_VERSION_MINOR) >= 11 \
			, /platform/i86pc/kernel/$(KBUILD_HOST_ARCH)/unix,) \
        	| $(PATH_OUT)/DynamicConfig.c $(PATH_OUT)/DynamicConfig.cpp
	$(call MSG_GENERATE,,$@,)
	$(QUIET)$(RM) -f '$@'
	$(QUIET)$(MKDIR) -p $(@D)
	$(QUIET)$(APPEND) '$@' '# Host version: $(KBUILD_HOST_VERSION_MAJOR).$(KBUILD_HOST_VERSION_MINOR).$(KBUILD_HOST_VERSION_PATCH); full: $(KBUILD_HOST_VERSION)'
ifneq ($(KBUILD_TARGET),win)
	$(QUIET)$(APPEND) '$@' '# $(KBUILD_HOST_UNAME_SYSNAME) - $(KBUILD_HOST_UNAME_RELEASE) - $(KBUILD_HOST_UNAME_VERSION)'
endif
ifeq ($(KBUILD_TARGET),darwin)
	$(QUIET)$(APPEND) '$@' '#              VPOX_XCODE_VERSION: $(VPOX_XCODE_VERSION)'
	$(QUIET)$(APPEND) '$@' '# VPOX_PATH_MACOSX_TOOLCHAIN_ROOT: $(VPOX_PATH_MACOSX_TOOLCHAIN_ROOT)'
	$(QUIET)$(APPEND) '$@' '#       VPOX_PATH_MACOSX_SDK_ROOT: $(VPOX_PATH_MACOSX_SDK_ROOT)'
	$(QUIET)$(APPEND) '$@' '#     VPOX_PATH_MACOSX_DEVEL_ROOT: $(VPOX_PATH_MACOSX_DEVEL_ROOT)'
endif
# HC compiler switch detection.
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC_PATH_CC               ?= $(which $(TOOL_$(VPOX_GCC_TOOL)_CC))'
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC_PATH_CXX              ?= $(which $(TOOL_$(VPOX_GCC_TOOL)_CXX))'
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC_VERSION_CC            ?= $(call VPOX_GCC_VERSION,$(TOOL_$(VPOX_GCC_TOOL)_CC))'
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC_VERSION_CXX           ?= $(call VPOX_GCC_VERSION,$(TOOL_$(VPOX_GCC_TOOL)_CXX))'
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC_LIBGCC                ?= $(shell $(TOOL_$(VPOX_GCC_TOOL)_CC) -print-libgcc-file-name)'
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC_Wno-pointer-sign      ?= $(call VPOX_GCC_CHECK_CC,-Wno-pointer-sign,)'
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC_Wno-array_bounds      ?= $(call VPOX_GCC_CHECK_CC,-Wno-array-bounds,)'
# -Wextra produces additional useful warnings but includes -Wno-missing-field-initializers (too noisy)
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC_Wextra                ?= $(call VPOX_GCC_CHECK_CC,-Wextra,)'
	$(QUIET)$(APPEND) '$@' 'ifneq ($$(VPOX_GCC_VERSION_CC),)'
	$(QUIET)$(APPEND) '$@' ' ifneq ($$(int-ge $$(VPOX_GCC_VERSION_CC),40500),)'
	$(QUIET)$(APPEND) '$@' '  VPOX_GCC_Wlogical-op         ?= $(call VPOX_GCC_CHECK_CC,-Wlogical-op,)'
	$(QUIET)$(APPEND) '$@' ' endif'
	$(QUIET)$(APPEND) '$@' 'endif'
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC_Wno-address           ?= $(call VPOX_GCC_CHECK_CXX,-Wno-address,)'
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC_Wno-delete-non-virtual-dtor    ?= $(call VPOX_GCC_CHECK_CXX,-Wno-delete-non-virtual-dtor,)'
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC_Wno-non-virtual-dtor           ?= $(call VPOX_GCC_CHECK_CXX,-Wno-non-virtual-dtor,)'
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC_Wno-int-in-bool-context        ?= $(call VPOX_GCC_CHECK_CC,-Wno-int-in-bool-context,)'
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC_Wno-int-to-pointer-cast        ?= $(call VPOX_GCC_CHECK_CC,-Wno-int-to-pointer-cast,)'
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC_Wno-invalid-offsetof           ?= $(call VPOX_GCC_CHECK_CXX,-Wno-invalid-offsetof,)'
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC_Wno-literal-suffix             ?= $(call VPOX_GCC_CHECK_CXX,-Wno-literal-suffix,)'
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC_Wno-misleading-indentation     ?= $(call VPOX_GCC_CHECK_CC,-Wno-misleading-indentation,)'
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC_Wno-missing-field-initializers ?= $(call VPOX_GCC_CHECK_CC,-Wno-missing-field-initializers,)'
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC_Wno-pointer-to-int-cast        ?= $(call VPOX_GCC_CHECK_CC,-Wno-pointer-to-int-cast,)'
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC_Wno-variadic-macros            ?= $(call VPOX_GCC_CHECK_CXX,-Wno-variadic-macros,)'
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC_Wno-vla                        ?= $(call VPOX_GCC_CHECK_CXX,-Wno-vla,)'
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC_Wno-overlength-strings         ?= $(call VPOX_GCC_CHECK_CC,-Wno-overlength-strings,)'
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC_Wno-overloaded-virtual         ?= $(call VPOX_GCC_CHECK_CXX,-Wno-overloaded-virtual,)'
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC_Wno-ignored-qualifiers         ?= $(call VPOX_GCC_CHECK_CXX,-Wno-ignored-qualifiers,)'
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC_Wno-multistatement-macros      ?= $(call VPOX_GCC_CHECK_CXX,-Wno-multistatement-macros,)'
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC_Wno-class-memaccess            ?= $(call VPOX_GCC_CHECK_CXX,-Wno-class-memaccess,)'
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC_Wno-stringop-overflow          ?= $(call VPOX_GCC_CHECK_CXX,-Wno-stringop-overflow,)'
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC_Wno-stringop-truncation        ?= $(call VPOX_GCC_CHECK_CXX,-Wno-stringop-truncation,)'
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC_Wno-cast-function-type         ?= $(call VPOX_GCC_CHECK_CC,-Wno-cast-function-type,)'
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC_Wno-deprecated-declarations    ?= $(call VPOX_GCC_CHECK_CC,-Wno-deprecated-declarations,)'
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC_Wno-implicit-fallthrough       ?= $(call VPOX_GCC_CHECK_CC,-Wno-implicit-fallthrough,)'
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC_fno-stack-protector   ?= $(call VPOX_GCC_CHECK_CC,-fno-stack-protector,)'
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC_fno-dwarf2-cfi-asm    ?= $(call VPOX_GCC_CHECK_CC,-fno-dwarf2-cfi-asm,)'
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC_m64                   ?= $(call VPOX_GCC_CHECK_CC,-m64,)'
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC_msse4.1               ?= $(call VPOX_GCC_CHECK_CC,-msse4.1,)'
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC_mavx                  ?= $(call VPOX_GCC_CHECK_CC,-mavx,)'
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC_mavx2                 ?= $(call VPOX_GCC_CHECK_CC,-mavx2,)'
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC_no-pie                ?= $(call VPOX_GCC_CHECK_CC,-no-pie,)'
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC_fdiagnostics-show-option ?= $(call VPOX_GCC_CHECK_CC,-fdiagnostics-show-option,)'
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC_fno-printf-return-value ?= $(call VPOX_GCC_CHECK_CC,-fno-printf-return-value,)'
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC_Wa_cma_nocompress_debug_sections ?= $(call VPOX_GCC_CHECK_CC,-Wa$(COMMA)--nocompress-debug-sections,)'
# Produce code optimized for the most common IA32/AMD64/EM64T processors. Introduced with gcc version 4.2.
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC_mtune-generic         ?= $(call VPOX_GCC_CHECK_CC,-mtune=generic,)'
	$(QUIET)$(APPEND) '$@' 'VPOX_LD_as_needed              ?= $(call VPOX_GCC_CHECK_LD,--as-needed,)'
	$(QUIET)$(APPEND) '$@' 'VPOX_LD_hash_style_sysv        ?= $(call VPOX_GCC_CHECK_LD,--hash-style=sysv,)'
# gcc version < 3.4 has a bug in handling __attribute__((regparm(3))).
# See http://osdir.com/ml/gcc.prs/2002-08/msg00223.html and probably http://gcc.gnu.org/bugzilla/show_bug.cgi?id=20004
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC_BUGGY_REGPARM         ?= $$(int-lt $$(VPOX_GCC_VERSION_CC),30400)'
# Set default attribute for ELF and MACH-O symbols to ``hidden'' to reduce the number
# of relocation entries and PLT indirections in shared libraries. Don't allow for gcc version < 4.
	$(QUIET)$(APPEND) '$@' 'ifneq ($$(VPOX_GCC_VERSION_CC),)'
	$(QUIET)$(APPEND) '$@' ' ifneq ($$(int-ge $$(VPOX_GCC_VERSION_CC),40000),)'
	$(QUIET)$(APPEND) '$@' '  VPOX_GCC_fvisibility-hidden  ?= $(call VPOX_GCC_CHECK_CC,-fvisibility=hidden -DVPOX_HAVE_VISIBILITY_HIDDEN -DRT_USE_VISIBILITY_DEFAULT,)'
	$(QUIET)$(APPEND) '$@' ' endif'
	$(QUIET)$(APPEND) '$@' 'endif'
ifn1of ($(KBUILD_TARGET),haiku)
# Set default attribute for inline functions to ``hidden'' to reduce the number
# of relocation entries and PLT indirections in shared libraries. Don't allow for gcc version < 4.
	$(QUIET)$(APPEND) '$@' 'ifneq ($$(VPOX_GCC_VERSION_CXX),)'
	$(QUIET)$(APPEND) '$@' ' ifneq ($$(int-ge $$(VPOX_GCC_VERSION_CXX),40000),)'
	$(QUIET)$(APPEND) '$@' '  VPOX_GCC_fvisibility-inlines-hidden ?= $(call VPOX_GCC_CHECK_CXX,-fvisibility-inlines-hidden,)'
	$(QUIET)$(APPEND) '$@' ' endif'
	$(QUIET)$(APPEND) '$@' 'endif'
endif
# Prevent warnings about unused parameters as of gcc-4.8 / clang 6 as this warning is now very verbose
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC_Wno-unused-parameter ?= $(call VPOX_GCC_CHECK_CC,-Wno-unused-parameter,)'
# Clang 6.
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC_Wno-language-extension-token ?= $(call VPOX_GCC_CHECK_CC,-Wno-language-extension-token,)'
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC_Wno-extended-offsetof ?= $(call VPOX_GCC_CHECK_CC,-Wno-extended-offsetof,)'
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC_Wno-gnu-folding-constant ?= $(call VPOX_GCC_CHECK_CC,-Wno-gnu-folding-constant,)'
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC_Wno-return-type-c-linkage ?= $(call VPOX_GCC_CHECK_CXX,-Wno-return-type-c-linkage,)'
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC_Wno-string-plus-int ?= $(call VPOX_GCC_CHECK_CC,-Wno-string-plus-int,)'
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC_Wno-nested-anon-types ?= $(call VPOX_GCC_CHECK_CC,-Wno-nested-anon-types,)'
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC_Wno-gnu-anonymous-struct ?= $(call VPOX_GCC_CHECK_CXX,-Wno-gnu-anonymous-struct,)'
# C++ Std settings
	$(QUIET)$(APPEND) '$@' 'ifneq ($$(VPOX_GCC_VERSION_CXX),)'
	$(QUIET)$(APPEND) '$@' ' ifneq ($$(int-ge $$(VPOX_GCC_VERSION_CXX),40800),)'
	$(QUIET)$(APPEND) '$@' '  VPOX_GCC_std ?= -std=c++11'
	$(QUIET)$(APPEND) '$@' ' else ifneq ($$(int-ge $$(VPOX_GCC_VERSION_CXX),40600),)'
	$(QUIET)$(APPEND) '$@' '  VPOX_GCC_std ?= -std=c++0x'
	$(QUIET)$(APPEND) '$@' ' endif'
	$(QUIET)$(APPEND) '$@' 'endif'
ifeq ($(KBUILD_TARGET),solaris)
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC_msave-args            ?= $(call VPOX_GCC_CHECK_CXX,-msave-args,)'
# Detect the solaris assembler. It is used by the the 4.x gcc compilers,
# apparently. It will not be able to handle IEMAll via a -pipe, only when
# passed a file. The solaris assmbler rulez ... not!
	$(QUIET)$(APPEND) '$@' 'VPOX_AS_VERSION                ?= $(shell `gcc -print-prog-name=as` -V -o /dev/null < /dev/null 2>&1 | kmk_sed -e '1!d' -e 's/^as: *//' )'
	$(QUIET)$(APPEND) '$@' 'if $$(pos Sun Compiler Common,$$(VPOX_AS_VERSION)) > 0'
	$(QUIET)$(APPEND) '$@' ' VPOX_GCC_USING_SOLARIS_AS=1'
	$(QUIET)$(APPEND) '$@' 'endif'
	$(QUIET)$(APPEND) '$@' 'ifndef VPOX_GCC_USING_SOLARIS_AS'
	$(QUIET)$(APPEND) '$@' ' VPOX_GCC_pipe                 ?= -pipe'
	$(QUIET)$(APPEND) '$@' 'endif'
else
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC_pipe                  ?= -pipe'
endif
# Find the compiler includes for IPRT no-crt.
# Note that `$(dir $(gcc -print-libgcc-file-name))/include does not work for a 64-bit cross build on a 32-bit build host.
ifeq ($(KBUILD_HOST),win)
# With the cygwin issues and gcc on windows returning a useless path, just skip this on windows.
	$(QUIET)$(APPEND) '$@' 'VPOX_PATH_GCC_INCS             ?= '
else
	$(QUIET)$(APPEND) '$@' 'VPOX_PATH_GCC_INCS             ?= $(shell LC_ALL=C $(TOOL_$(VPOX_GCC_TOOL)_CC) -print-search-dirs|$(SED_EXT) -ne 's+^install: \(.*[^/][^/]*\)/+\1+p')/include'
endif
# 32-bit (GC) compiler switch detection.
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC32_PATH_CC             ?= $(which $(TOOL_$(VPOX_GCC32_TOOL)_CC))'
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC32_PATH_CXX            ?= $(which $(TOOL_$(VPOX_GCC32_TOOL)_CXX))'
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC32_VERSION_CC          ?= $(call VPOX_GCC_VERSION,$(TOOL_$(VPOX_GCC32_TOOL)_CC))'
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC32_VERSION_CXX         ?= $(call VPOX_GCC_VERSION,$(TOOL_$(VPOX_GCC32_TOOL)_CXX))'
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC32_LIBGCC              ?= $(shell $(TOOL_$(VPOX_GCC32_TOOL)_CC) -print-libgcc-file-name)'
	$(QUIET)$(APPEND) '$@' 'VPOX_GCC32_Wno-variadic-macros ?= $(call VPOX_GCC32_CHECK_CXX,-Wno-variadic-macros,)'
# darwin no_compact_linkedit starting at Xcode 3.2
ifeq ($(KBUILD_HOST),darwin)
	$(QUIET)$(APPEND) '$@' 'VPOX_LD_no_compact_linkedit    ?= $(call VPOX_GCC_CHECK_LD,-no_compact_linkedit,)'
endif
# YASM
	$(QUIET)$(APPEND) '$@' '# debug: TOOL_YASM_AS="$(TOOL_YASM_AS)"'
	$(QUIET)$(APPEND) '$@' 'VPOX_YASM_Wno-segreg-in-64bit  ?= $(call VPOX_YASM_CHECK,-Wno-segreg-in-64bit,)'
# NASM (--allow-64-bit: 2.12rc2)
	$(QUIET)$(APPEND) '$@' 'VPOX_NASM_allow_64_bit         ?= $(call VPOX_NASM_CHECK,--allow-64-bit,)'
ifeq ($(KBUILD_HOST),linux)
	$(QUIET)$(APPEND) '$@' 'VPOX_LD_HAS_LIBXCB             ?= $(shell /sbin/ldconfig -p|grep -q "\<libxcb\.so\.1\>" && echo "1")'
endif

ifdef VPOX_PATH_PREFIX_MINGW32
	$(QUIET)$(APPEND) '$@' 'VPOX_MINGW32_VERSION_CC                  ?= $(call VPOX_GCC_VERSION,$(VPOX_PATH_PREFIX_MINGW32)gcc -m32)'
	$(QUIET)$(APPEND) '$@' 'VPOX_MINGW32_VERSION_CXX                 ?= $(call VPOX_GCC_VERSION,$(VPOX_PATH_PREFIX_MINGW32)g++ -m32)'
	$(QUIET)$(APPEND) '$@' 'VPOX_MINGW32_Wno-array-bounds            ?= $(call VPOX_GCC_CHECK_EX_CXX,$(VPOX_PATH_PREFIX_MINGW32)g++ -m32,-Wno-array-bounds,)'
	$(QUIET)$(APPEND) '$@' 'VPOX_MINGW32_Wno-unused-but-set-variable ?= $(call VPOX_GCC_CHECK_EX_CXX,$(VPOX_PATH_PREFIX_MINGW32)g++ -m32,-Wno-unused-but-set-variable,)'
	$(QUIET)$(APPEND) '$@' 'VPOX_MINGW32_Wno-maybe-uninitialized     ?= $(call VPOX_GCC_CHECK_EX_CXX,$(VPOX_PATH_PREFIX_MINGW32)g++ -m32,-Wno-maybe-uninitialized,)'
	$(QUIET)$(APPEND) '$@' 'VPOX_MINGW32_USER_LABEL_PREFIX           ?= $(shell echo "__USER_LABEL_PREFIX__" | $(VPOX_PATH_PREFIX_MINGW32)g++ -m32 -E -xc++ - | $(SED) -e "/^$(HASH)/d")'
endif
ifdef VPOX_PATH_PREFIX_MINGW64
	$(QUIET)$(APPEND) '$@' 'VPOX_MINGW64_VERSION_CC                  ?= $(call VPOX_GCC_VERSION,$(VPOX_PATH_PREFIX_MINGW64)gcc -m64)'
	$(QUIET)$(APPEND) '$@' 'VPOX_MINGW64_VERSION_CXX                 ?= $(call VPOX_GCC_VERSION,$(VPOX_PATH_PREFIX_MINGW64)g++ -m64)'
	$(QUIET)$(APPEND) '$@' 'VPOX_MINGW64_Wno-array-bounds            ?= $(call VPOX_GCC_CHECK_EX_CXX,$(VPOX_PATH_PREFIX_MINGW64)g++ -m64,-Wno-array-bounds,)'
	$(QUIET)$(APPEND) '$@' 'VPOX_MINGW64_Wno-unused-but-set-variable ?= $(call VPOX_GCC_CHECK_EX_CXX,$(VPOX_PATH_PREFIX_MINGW64)g++ -m64,-Wno-unused-but-set-variable,)'
	$(QUIET)$(APPEND) '$@' 'VPOX_MINGW64_Wno-maybe-uninitialized     ?= $(call VPOX_GCC_CHECK_EX_CXX,$(VPOX_PATH_PREFIX_MINGW64)g++ -m64,-Wno-maybe-uninitialized,)'
	$(QUIET)$(APPEND) '$@' 'VPOX_MINGW64_USER_LABEL_PREFIX           ?= $(shell echo "__USER_LABEL_PREFIX__" | $(VPOX_PATH_PREFIX_MINGW64)g++ -m64 -E -xc++ - | $(SED) -e "/^$(HASH)/d")'
endif
ifeq ($(KBUILD_HOST),darwin)
	$(QUIET)$(APPEND) '$@' 'VPOX_HAVE_FLEX    ?= 1'
	$(QUIET)$(APPEND) '$@' 'VPOX_HAVE_BISON   ?= 1'
else
	$(QUIET)$(APPEND) '$@' 'VPOX_HAVE_FLEX    ?= $(if $(which flex),1,)'
	$(QUIET)$(APPEND) '$@' 'VPOX_HAVE_BISON   ?= $(if $(which bison),1,)'
endif
	$(QUIET)$(APPEND) '$@' 'VPOX_HAVE_XMLLINT ?= $(which xmllint)'
if "$(KBUILD_HOST)" == "solaris" && $(KBUILD_HOST_VERSION_MAJOR) == 5 && $(KBUILD_HOST_VERSION_MINOR) == 11
# BRANCH_VERSION format on S11 - S11.3:
#   <trunk_id>.<update>.<sru>.<reserved>.<buildid>.<nightly_id>
#   e.g.:  0.175.3.32.0.4.0:20180427T232405Z - N.B. trunk_id = 0.175
# BRANCH_VERSION format on S11.4:
#   <minor>.<update>.<sru>.<reserved>.<reserved>.<buildid>.<nightly_id>
#   e.g.: 11.4.0.0.1.10.0:20180702T173343Z
# We're interested in <update> and <buildid>.
	$(QUIET)$(APPEND) '$@' "VPOX_SOLARIS_11_BRANCH_VERSION := $(shell pkg contents -H -t set -o pkg.fmri system/kernel | $(SED_EXT) -e '1!d' -e 's/^.*\-//;s/\:.*//;s/.*,//')"
	$(QUIET)$(APPEND) '$@' 'ifeq ($$(word 2, $$(subst ., ,$$(VPOX_SOLARIS_11_BRANCH_VERSION))),175)'
	$(QUIET)$(APPEND) '$@' '   VPOX_SOLARIS_11_UPDATE_VERSION := $$(word 3, $$(subst ., ,$$(VPOX_SOLARIS_11_BRANCH_VERSION)))'
	$(QUIET)$(APPEND) '$@' 'else'
	$(QUIET)$(APPEND) '$@' '   VPOX_SOLARIS_11_UPDATE_VERSION := $$(word 2, $$(subst ., ,$$(VPOX_SOLARIS_11_BRANCH_VERSION)))'
	$(QUIET)$(APPEND) '$@' 'endif'
	$(QUIET)$(APPEND) '$@' 'VPOX_SOLARIS_11_BUILD_VERSION  := $$(word 6, $$(subst ., ,$$(VPOX_SOLARIS_11_BRANCH_VERSION)))'
endif
if1of ($(KBUILD_HOST), darwin freebsd solaris)
	$(QUIET)$(APPEND) '$@' 'VPOX_HOST_DTRACE_VERSION := $(shell dtrace -V)'
endif
if defined(VPOX_PYLINT) && !defined(VPOX_WITH_PYLINT_PRE_V1_0) && !defined(VPOX_WITH_PYLINT_V1_1_PLUS) && !defined(VPOX_WITH_PYLINT_V1_2_1_PLUS)
	$(QUIET)$(APPEND) '$@' "VPOX_PYLINT_VERSION  := $(call VPOX_PYLINT_FIGURE_VERSION, $(VPOX_PYLINT))"
endif
if defined(VPOX_JAVAC)
	$(QUIET)$(APPEND) '$@' 'VPOX_JAVA_VERSION    := $(call VPOX_JAVA_FIGURE_VERSION, $(VPOX_JAVAC))'
endif

	$(QUIET)$(ECHO) '========= START OF $@ ========='
	$(QUIET)$(CAT) $@
	$(QUIET)$(ECHO) '=========== END OF $@ ========='

include $(PATH_OUT)/DynamicConfig.kmk
endif # !VPOX_NOINC_DYNAMIC_CONFIG_KMK


#
# Compiler warning control.
#
VPOX_GCC_WARN     ?= -Wall $(VPOX_GCC_Wextra) $(VPOX_GCC_Wno-missing-field-initializers) -Wno-unused -Wno-trigraphs \
	$(VPOX_GCC_fdiagnostics-show-option) $(VPOX_GCC_Wno-unused-parameter) $(VPOX_GCC_Wno-language-extension-token) \
	$(VPOX_GCC_Wno-extended-offsetof) $(VPOX_GCC_Wno-gnu-folding-constant) $(VPOX_GCC_Wno-gnu-anonymous-struct) \
	$(VPOX_GCC_Wlogical-op) $(VPOX_GCC_Wno-string-plus-int) $(VPOX_GCC_Wno-nested-anon-types) $(VPOX_GCC_Wno-variadic-macros)
VPOX_GCC_WARN_PEDANTIC = -Wshadow $(VPOX_GCC_WARN) -Wno-long-long
if $(VPOX_GCC_VERSION_CXX) >= 40200 || defined(VPOX_WITH_MASOCHISTIC_WARNINGS) # gcc 4.2.x+ (4.1.2 is causing trouble with the extpack & add builds)
 VPOX_GCC_WARN_MASOCHISTIC ?= -Wunused-variable -Wunused-function -Wunused-label -Wunused-parameter
endif
if   $(KBUILD_TARGET) == "linux" \
  || ($(KBUILD_TARGET) == "darwin" && defined(VPOX_WITH_NEW_XCODE)) \
  || defined(VPOX_WITH_MASOCHISTIC_WARNINGS)
 VPOX_GCC_WARN_PEDANTIC += $(VPOX_GCC_WARN_MASOCHISTIC)
endif

VPOX_GCC_PEDANTIC_CXX ?= -pedantic $(VPOX_GCC_WARN_PEDANTIC) $(VPOX_GCC_Wno-return-type-c-linkage) $(VPOX_GCC_Wno-overloaded-virtual)
VPOX_GCC_PEDANTIC_C   ?= -pedantic $(VPOX_GCC_WARN_PEDANTIC) -Wmissing-prototypes -Wstrict-prototypes -Wmissing-declarations -Werror-implicit-function-declaration

# Avoid freaking out when using flexible arrays in C++ code (ldrPE.cpp, ++).
if ($(VPOX_GCC_VERSION_CXX) < 60100 || $(VPOX_GCC_VERSION_CXX) >= 70000) && "$(VPOX_GCC_Wno-array_bounds)" != ""
 VPOX_GCC_PEDANTIC_CXX += $(VPOX_GCC_Wno-array_bounds)
endif
# Stupid problem with (__typeof__((*ppv)) casts in asm.h where volatile is involved and ignored.
if $(VPOX_GCC_VERSION_CXX) >= 80000 && "$(VPOX_GCC_Wno-ignored-qualifiers)"
 VPOX_GCC_PEDANTIC_CXX += $(VPOX_GCC_Wno-ignored-qualifiers)
endif


VPOX_GCC_NON_PEDANTIC_CXX ?= -Wno-sign-compare
VPOX_GCC_NON_PEDANTIC_C   ?= -Wno-sign-compare -Werror-implicit-function-declaration

ifdef VPOX_WITH_NEW_XCODE
 VPOX_GCC_PEDANTIC_CXX     += -Wno-c99-extensions
 VPOX_GCC_NON_PEDANTIC_CXX += -Wno-c99-extensions
endif

# The address sanitiser library intercepts dlopen() and breaks RPATH $ORIGIN,
# so we need to link it statically or set LD_LIBRARY_PATH.  To link statically,
# set VPOX_WITH_GCC_SANITIZER_STATIC in addition.
ifdef VPOX_WITH_GCC_SANITIZER
 VPOX_GCC_SANITIZER_FLAGS := \
 	-fsanitize=undefined \
 	-fsanitize=address \
 	-fsanitize=return \
 	-fsanitize=bounds \
 	-fsanitize=object-size \
 	-fno-sanitize=alignment \
 	-fno-sanitize=vptr \
 	-fno-common \
 	-DIPRT_WITH_GCC_SANITIZER \
 	-DVPOX_WITH_GCC_SANITIZER
else ifdef VPOX_WITH_CLANG_SANITIZER ## @todo make work...
 VPOX_GCC_SANITIZER_FLAGS := \
 	-DIPRT_WITH_GCC_SANITIZER \
 	-DVPOX_WITH_GCC_SANITIZER \
 	-fsanitize=object-size \
  	-fsanitize-undefined-trap-on-error
else
 VPOX_GCC_SANITIZER_FLAGS =
endif

# -libasan-static is currently not supported in combination with -no-undefined.
VPOX_GCC_NO_UNDEFINED    :=
VPOX_GCC_NO_UNDEFINED_R0 :=
ifdef VPOX_WITH_GCC_SANITIZER
 ifdef VPOX_WITH_GCC_SANITIZER_STATIC
  VPOX_GCC_NO_UNDEFINED    := -Wl,--no-undefined
  VPOX_GCC_NO_UNDEFINED_R0 := -no-undefined
  VPOX_GCC_SANITIZER_LDFLAGS += -static-libasan
 else
  VPOX_GCC_SANITIZER_LDFLAGS += -lasan
 endif
endif

# Disabled Visual C++ warnings, W4:
#      -wd4065: switch statement contains 'default' but no 'case' labels
#      -wd4996: deprecated / insecure.
#      -wd4127: conditional expression is constant [level 4]
#      -wd4706: assignment within conditional expression [level 4]
#      -wd4201: nonstandard extension used : nameless struct/union [level 4]
#      -wd4214: nonstandard extension used : bit field types other than int [level 4]
#      -wd4510: 'VM::<unnamed-tag>' : default constructor could not be generated
#      -wd4512: 'VM' : assignment operator could not be generated
#      -wd4610: union 'VM::<unnamed-tag>' can never be instantiated - user defined constructor required
# Disabled Visual C++ warnings, Wall:
#      -wd4514: unreferenced inline function has been removed
#      -wd4820: 'RTSTRSPACECORE' : '7' bytes padding added after data member 'RTSTRSPACECORE::uchHeight'
#      -wd4365: '=' : conversion from 'unsigned char' to 'char', signed/unsigned mismatch
#      -wd4987: nonstandard extension used: 'throw (...)' (setjmp.h + our stuff)
#      -wd4710: 'std::string std::_Narrow_str(std::wstring)' : function not inlined
#      -wd4061: enumerator 'RTASN1TYPE_END' in switch of enum 'RTASN1TYPE' is not explicitly handled by a case label
#               Note! C4062 checks for the same but includes the 'default' case, just like gcc.  So, no trouble disabling this.
#      -wd4986: 'operator new[]': exception specification does not match previous declaration (crtdbg.h vs new, exception specification only)
#      -wd4191: 'type cast' : unsafe conversion from 'int (__cdecl *)(gzFile)' to 'PFNRT'
#      -wd4574: 'INCL_WINSOCK_API_TYPEDEFS' is defined to be '0': did you mean to use '#if INCL_WINSOCK_API_TYPEDEFS'?
#      -wd4917: 'OLE_XPOS_HIMETRIC' : a GUID can only be associated with a class, interface or namespace
#      -wd4711: function 'void __cdecl rtMemCacheFreeOne(struct RTMEMCACHEINT * __ptr64,void * __ptr64)' selected for automatic inline expansion
#      -wd4571: Informational: catch(...) semantics changed since Visual C++ 7.1; structured exceptions (SEH) are no longer caught
#      -wd4611: interaction between '_setjmp' and C++ object destruction is non-portable
#      -wd4324: '_TDI_PNP_CONTEXT_XP' : structure was padded due to __declspec(align())
#      -wd4505: VPoxNetFltNobj.h(45) : warning C4505: 'VPoxNetFltNobj::Release' : unreferenced local function has been removed
#               Probably related to http://stackoverflow.com/questions/3051992/compiler-warning-at-c-template-base-class
#      -wd4263: 'int VRDPChannelClipboard::SendPacket(const void *,uint32_t)' : member function does not override any base class virtual member function
#               Probably useful, but impractical, just like the next one.
#      -wd4264: 'int VRDPOutputCtx::SendPacket(void)' : no override available for virtual member function from base 'VRDPOutputCtx'; function is hidden
#      -wd4738: storing 32-bit float result in memory, possible loss of performance
#      -wd4371: UIActionPool.h(393) : warning C4371: 'UIActionPool::PointerToFunction' : layout of class may have changed from a previous version of the compiler due to better packing of member 'UIActionPool::PointerToFunction::ptfr'
#      -wd4748: uiactionpoolmanager.cpp(2723) : warning C4748: /GS can not protect parameters and local variables from local buffer overrun because optimizations are disabled in function
# Want to enable these:
#      -wd4242: '=' : conversion from 'uint32_t' to 'uint8_t', possible loss of data
#      -wd4244: 'conversion' conversion from 'type1' to 'type2', possible loss of data
#      -wd4200: nonstandard extension used : zero-sized array in struct/union
#               Cannot generate copy-ctor or copy-assignment operator when UDT contains a zero-sized array
VPOX_VCC_WARN_ALL ?= -W4 -Wall -wd4065 -wd4996 -wd4127 -wd4706 -wd4201 -wd4214 -wd4510 -wd4512 -wd4610 \
	-wd4514 -wd4820 -wd4365 -wd4987 -wd4710 -wd4061 -wd4986 -wd4191 -wd4574 -wd4917 -wd4711 -wd4611 -wd4571 -wd4324 -wd4505 \
	-wd4263 -wd4264 -wd4738 -wd4200 -wd4371 -wd4748
if1of ($(VPOX_VCC_TOOL_STEM), VCC120)
 #    -wd4350: behavior change: 'std::_Wrap_alloc<std::allocator<char>>::_Wrap_alloc(const std::_Wrap_alloc<std::allocator<char>> &) throw()' called instead of 'std::_Wrap_alloc<std::allocator<char>>::_Wrap_alloc<std::_Wrap_alloc<std::allocator<char>>>(_Other &) throw()'
 #    -wd4435: iprt/cpp/xml.h(185) : warning C4435: 'xml::Input' : Object layout under /vd2 will change due to virtual base 'xml::Stream'
 VPOX_VCC_WARN_ALL += -wd4350 -wd4435
 VPOX_VCC120_WARN_ALL ?= $(VPOX_VCC_WARN_ALL)
endif
VPOX_VCC_WARN_ALL += -wd4242 -wd4244
ifndef VPOX_NEWER_VCC_WARN_ALL
 if "$(VPOX_VCC_TOOL_STEM)" < "VCC120"
  VPOX_NEWER_VCC_WARN_ALL := $(VPOX_VCC_WARN_ALL) -wd4350 -wd4435
 else
  VPOX_NEWER_VCC_WARN_ALL := $(VPOX_VCC_WARN_ALL)
 endif
endif


# Disable pedantic warnings for NP/NonPedantic templates.
#      -wd4131: 'bi_flush' : uses old-style declarator
#      -wd4255: 'tr_static_init' : no function prototype given: converting '()' to '(void)'
#      -wd4668: '_WIN32_WCE' is not defined as a preprocessor macro, replacing with '0' for '#if/#elif'/
#      -wd4100: 'cinfo' : unreferenced formal parameter
#      -wd4189: 'sz' : local variable is initialized but not referenced
#      -wd4132: 'xmlStringComment' : const object should be initialized
#      -wd4152: nonstandard extension, function/data pointer conversion in expression
#      -wd4702: unreachable code
#      -wd4057: '=' : 'xmlChar *' differs in indirection to slightly different base types from 'char *'
#      -wd4296: '>=' : expression is always true
#      -wd4389: '==' : signed/unsigned mismatch
#      -wd4018: '<=' : signed/unsigned mismatch
#      -wd4245: '=' : conversion from 'int' to 'unsigned int', signed/unsigned mismatch
#      -wd4267: '+=' : conversion from 'size_t' to 'long', possible loss of data
#      -wd4295: 'vendor_string' : array is too small to include a terminating null character
VPOX_VCC_NON_PEDANTIC = -wd4131 -wd4255 -wd4668 -wd4100 -wd4189 -wd4132 -wd4152 -wd4702 -wd4057 -wd4296 -wd4389 -wd4018 -wd4245 \
	-wd4267 -wd4295
VPOX_NEWER_VCC_NON_PEDANTIC = $(VPOX_VCC_NON_PEDANTIC)

ifeq ($(KBUILD_TARGET),win)
 VPOX_C_CXX_FLAGS_NO_UNUSED_PARAMETERS = -wd4100
else
 VPOX_C_CXX_FLAGS_NO_UNUSED_PARAMETERS = -Wno-unused-parameter
endif

#
# Compiler optimization flags.
#
ifeq ($(KBUILD_TYPE),debug)
 VPOX_GCC_FP     ?= -fno-omit-frame-pointer
 VPOX_GCC_OPT    ?= -O0
 VPOX_VCC_FP     ?= -Oy-
 VPOX_VCC_OPT    ?=
 VPOX_GCC_R0_FP  ?= -fno-omit-frame-pointer -fno-optimize-sibling-calls
 VPOX_GCC_R0_OPT ?= -O2
 VPOX_VCC_R0_FP  ?= -Oy-
 VPOX_VCC_R0_OPT ?=
 VPOX_GCC_GC_FP  ?= -fno-omit-frame-pointer -fno-optimize-sibling-calls
 VPOX_GCC_GC_OPT ?= -O2
 VPOX_VCC_GC_FP  ?= -Oy-
 VPOX_VCC_GC_OPT ?=
else
 # We should use -fomit-frame-pointer for GCC / -Oy for VCC.
 # -funwind-tables provides support for backtraces in gdb then.
 VPOX_GCC_FP     ?= -fno-omit-frame-pointer
 VPOX_GCC_OPT    ?= -O2 $(VPOX_GCC_mtune-generic)
 VPOX_VCC_FP     ?= -Oy-
 VPOX_VCC_OPT    ?= -O2
 VPOX_GCC_R0_FP  ?= -fno-omit-frame-pointer
 VPOX_GCC_R0_OPT ?= -O2 $(VPOX_GCC_mtune-generic)
 VPOX_VCC_R0_FP  ?= -Oy-
 VPOX_VCC_R0_OPT ?= -O2
 VPOX_GCC_GC_FP  ?= -fno-omit-frame-pointer
 VPOX_GCC_GC_OPT ?= -O2 $(VPOX_GCC_mtune-generic)
 VPOX_VCC_GC_FP  ?= -Oy-
 VPOX_VCC_GC_OPT ?= -O2
endif
ifeq ($(KBUILD_TARGET_ARCH),x86)
 ifneq ($(KBUILD_TARGET),darwin)
  # (The '<=' operator is for prepending (kmk specific).)
  VPOX_GCC_OPT <= -march=i586
 endif
endif


#
# Select the CRT type we're using with Microsoft Visual C++.
#
if1of ($(KBUILD_TYPE), debug dbgopt strict)
#not yet# VPOX_WITH_DEBUG_VCC_CRT = 1
endif
ifdef VPOX_WITH_DEBUG_VCC_CRT
 VPOX_VCC_CRT_TYPE   = d
 VPOX_VCC_CRT_TYPE_N =
else
 VPOX_VCC_CRT_TYPE   =
 VPOX_VCC_CRT_TYPE_N = d
endif


#
# Warnings as errors.
#
# GCC: We disable warnings on non-X86 systems because of the variadic
#      macro usage in the logger.
#
ifdef VPOX_WITH_WARNINGS_AS_ERRORS
 if $(VPOX_GCC_VERSION_CXX) >= 40000
  VPOX_GCC_WERR ?= -Werror
 endif
 VPOX_VCC_WERR ?= -WX
 VPOX_VCC_LD_WERR ?= ## @todo later also: -WX
endif

#
# The general GCC/Clang no warning policy.
#
# Note! This doesn't control everything.  Instead set VPOX_GCC_WERR=$(NO_SUCH_VARIABLE) to
#       completely disable -Werror.
#
if !defined(VPOX_WITHOUT_NO_GCC_WARNING_POLICY) && !defined(VPOX_WITH_NO_GCC_WARNING_POLICY)
 if defined(VPOX_WITH_MASOCHISTIC_WARNINGS) # gcc 4.6.x+
  VPOX_WITH_NO_GCC_WARNING_POLICY = 1
 else if $(KBUILD_TARGET) == "darwin" && defined(VPOX_WITH_NEW_XCODE)
   VPOX_WITH_NO_GCC_WARNING_POLICY = 1
 else if1of ($(KBUILD_TARGET), linux)
  if $(VPOX_GCC_VERSION_CXX) >= 40600 # gcc 4.6.x+
   VPOX_WITH_NO_GCC_WARNING_POLICY = 1
  endif
 endif
endif
ifdef VPOX_WITH_NO_GCC_WARNING_POLICY
 $(info build debug: VPOX_WITH_NO_GCC_WARNING_POLICY is enabled)
endif

#
# Misc stuff that should be after including DynamicConfig.kmk.
#

# libxml XML linter.
ifeq ($(VPOX_XMLLINT),)
 ifeq ($(KBUILD_HOST),win)
  VPOX_XMLLINT := $(wildcard $(KBUILD_DEVTOOLS)/$(KBUILD_HOST).$(KBUILD_HOST_ARCH)/libxslt/10128/bin/xmllint.exe)
 endif
 ifeq ($(VPOX_XMLLINT),)
  VPOX_XMLLINT := $(VPOX_HAVE_XMLLINT)
 endif
 ifneq ($(VPOX_XMLLINT),)
  VPOX_HAVE_XMLLINT := 1
 else
  VPOX_XMLLINT := xmllint
  VPOX_HAVE_XMLLINT :=
 endif
else
 VPOX_HAVE_XMLLINT := 1
endif



#
# Misc macros.
#

##
# Edits VirtualPox version, vendor and package strings in a text file.
#
# The rule using this must list $(VPOX_SVN_REV_KMK) as a prerequisite.
#
# @param    1        The input filename.
# @param    2        The output filename.
#
VPOX_EDIT_VERSION_CMD_FN = $(SED) \
	-e 's/@VPOX_VERSION_MAJOR@/$(VPOX_VERSION_MAJOR)/g' \
	-e 's/@VPOX_VERSION_MINOR@/$(VPOX_VERSION_MINOR)/g' \
	-e 's/@VPOX_VERSION_BUILD@/$(VPOX_VERSION_BUILD)/g' \
	-e 's/@VPOX_VERSION_STRING@/$(VPOX_VERSION_STRING)/g' \
	-e 's/@VPOX_SVN_REV@/$(VPOX_SVN_REV)/g' \
	-e 's/@VPOX_VENDOR@/$(VPOX_VENDOR)/g' \
	-e 's/@VPOX_VENDOR_SHORT@/$(VPOX_VENDOR_SHORT)/g' \
	-e 's/@VPOX_PRODUCT@/$(VPOX_PRODUCT)/g' \
	-e 's/@VPOX_C_YEAR@/$(VPOX_C_YEAR)/g' \
	-e 's/@VPOX_PACKAGE_STRING@/$(VPOX_PACKAGE_STRING)/g' \
	--output $(2) $(1)

##
# Generates a rule for editing a file using VPOX_EDIT_VERSION_CMD_FN.
#
# @param    1        The target name.
# @param    2        The input filename relative to the current sub-makefile.
# @param    3        The output filename relative to the target output dir.
#                    Optional, defaults to 2.
#
VPOX_EDIT_VERSION_RULE_FN = $(eval $(value VPOX_EDIT_VERSION_RULE_DEF))
define VPOX_EDIT_VERSION_RULE_DEF
$$($(1)_0_OUTDIR)/$(if $(3),$(3),$(2)): $(PATH_SUB_CURRENT)/$(2) $(VPOX_SVN_REV_KMK) | $$(dir $$@)
	$(call MSG_GENERATE,$(1),$@,$<)
	$(QUIET)$(call VPOX_EDIT_VERSION_CMD_FN,$<,$@)
$(eval $(1)_CLEAN += $$($(1)_0_OUTDIR)/$(if $(3),$(3),$(2)))
endef


##
# Edits VirtualPox version, vendor, package, build target, build arch, and build type strings in a text file.
#
# Please use VPOX_EDIT_VERSION_AND_BUILD_RULE_FN to generate edit rule.
#
# @param    1        The input filename.
# @param    2        The output filename.
#
VPOX_EDIT_VERSION_AND_BUILD_CMD_FN = $(SED) \
	-e 's/@VPOX_VERSION_MAJOR@/$(VPOX_VERSION_MAJOR)/g' \
	-e 's/@VPOX_VERSION_MINOR@/$(VPOX_VERSION_MINOR)/g' \
	-e 's/@VPOX_VERSION_BUILD@/$(VPOX_VERSION_BUILD)/g' \
	-e 's/@VPOX_VERSION_STRING@/$(VPOX_VERSION_STRING)/g' \
	-e 's/@VPOX_SVN_REV@/$(VPOX_SVN_REV)/g' \
	-e 's/@VPOX_VENDOR@/$(VPOX_VENDOR)/g' \
	-e 's/@VPOX_VENDOR_SHORT@/$(VPOX_VENDOR_SHORT)/g' \
	-e 's/@VPOX_PRODUCT@/$(VPOX_PRODUCT)/g' \
	-e 's/@VPOX_C_YEAR@/$(VPOX_C_YEAR)/g' \
	-e 's/@VPOX_PACKAGE_STRING@/$(VPOX_PACKAGE_STRING)/g' \
	-e 's/@KBUILD_TYPE@/$(KBUILD_TYPE)/g' \
	-e 's/@KBUILD_TARGET@/$(KBUILD_TARGET)/g' \
	-e 's/@KBUILD_TARGET_ARCH@/$(KBUILD_TARGET_ARCH)/g' \
	--output $(2) $(1)

##
# Generates a rule for editing a file using VPOX_EDIT_VERSION_CMD_FN.
#
# @param    1        The target name.
# @param    2        The input filename relative to the current sub-makefile.
# @param    3        The output filename relative to the target output dir.
#                    Optional, defaults to 2.
#
VPOX_EDIT_VERSION_AND_BUILD_RULE_FN = $(eval $(VPOX_EDIT_VERSION_AND_BUILD_RULE_DEF))
define VPOX_EDIT_VERSION_AND_BUILD_RULE_DEF
$$$$($(1)_0_OUTDIR)/$(if $(3),$(3),$(2)): $$(PATH_SUB_CURRENT)/$(2) $$(VPOX_SVN_REV_KMK) | $$$$(dir $$$$@)
	$$(call MSG_GENERATE,$(1),$$@,$$<)
	$$(QUIET)$$(call VPOX_EDIT_VERSION_AND_BUILD_CMD_FN,$$<,$$@)
$(1)_CLEAN += $$($(1)_0_OUTDIR)/$(if $(3),$(3),$(2))
endef


##
# Fill in am import library target based on a somewhat special windows .def file.
#
# @param    1   The target name of the import library.
# @param    2   The name of the real library.
# @param    3   The .def-file paths relative to the current makefile.
#
VPOX_GENERATE_IMPORT_TARGET_FN = $(eval $(VPOX_GENERATE_IMPORT_TARGET_DEF))
define VPOX_GENERATE_IMPORT_TARGET_DEF
$(1)_TEMPLATE = VPoxR3Dll
$(1)_INST     = $(INST_LIB)
if $(KBUILD_TARGET) == "darwin"
 $(1)_LDFLAGS = -install_name $(VPOX_DYLD_EXECUTABLE_PATH)/$(2)$(SUFF_DLL)
else ifn1of ($(KBUILD_TARGET), os2 win)
 $(1)_SONAME  = $(2)$(SUFF_DLL)
endif
if1of ($(KBUILD_TARGET), os2 win)
 $(1)_SOURCES = $$($(1)_0_OUTDIR)/$(1)Imp.def
 $(1)_CLEAN   = $$($(1)_0_OUTDIR)/$(1)Imp.def
else
 $(1)_SOURCES = $$($(1)_0_OUTDIR)/$(1)Imp.c
 $(1)_CLEAN   = $$($(1)_0_OUTDIR)/$(1)Imp.c
endif

$$$$($(1)_SOURCES): $(addprefix $(PATH_SUB_CURRENT)/,$(3)) $(PATH_ROOT)/src/bldprogs/deftoimp.sed | $$$$(dir $$$$@)
	$$(call MSG_GENERATE,,$$@)
ifeq ($(KBUILD_TARGET),os2)
	$$(SED) \
		-e '/not-$(KBUILD_TARGET)/d' \
		-e '/not-$(KBUILD_TARGET_ARCH)/d' \
		-e 's/^LIBRARY[[:space:]][[:space:]]*\(.*\)\.dll/LIBRARY \1 INITINSTANCE TERMINSTANCE\nDATA MULTIPLE\n/' \
		-e 's/^[ \t][ \t]*\([_a-zA-Z]\)/    _\1/' \
		-e 's/[ \t]DATA[ \t]*/ /'  \
		--output $$@ $(addprefix $(PATH_SUB_CURRENT)/,$(3))
else ifeq ($(KBUILD_TARGET),win)
	$$(SED) \
		-e '/not-$(KBUILD_TARGET)/d' \
		-e '/not-$(KBUILD_TARGET_ARCH)/d' \
		--output $$@ $(addprefix $(PATH_SUB_CURRENT)/,$(3))
else
	$$(QUIET)$$(APPEND) -tn $$@ \
		'#ifdef VPOX_HAVE_VISIBILITY_HIDDEN' \
		'# define EXPORT __attribute__((visibility("default")))' \
		'# define EXPORT_DATA __attribute__((visibility("default")))' \
		'#else' \
		'# define EXPORT' \
		'# define EXPORT_DATA' \
		'#endif' \
		''
	$$(SED) \
		-e '/not-$(KBUILD_TARGET)/d' \
		-e '/not-$(KBUILD_TARGET_ARCH)/d' \
		-f $(PATH_ROOT)/src/bldprogs/deftoimp.sed \
		--append $$@ $(addprefix $(PATH_SUB_CURRENT)/,$(3))
endif
endef # VPOX_GENERATE_IMPORT_TARGET_DEF


#
# Code Signing.
#
# There are two signing modes; 'test' and 'release'.
#  - The 'test' mode is tailored local development, where typically test
#    certificates are involved. Only the bar minimum of files are signed and
#    nothing is timestamped (if we can control timestamping) in order to reduce
#    build time and to allow working offline.
#  - The 'release' mode is tailored for creating builds that are give to other
#    people, like the ones the build servers create.  As much as possible is
#    signed and timestamped.
#
ifdef VPOX_SIGNING_MODE
 VPOX_SIGNING_MODE := $(strip $(VPOX_SIGNING_MODE))
 ifn1of ($(VPOX_SIGNING_MODE), test release)
  $(error VPOX_SIGNING_MODE must be either 'test' or 'release'. The value '$(VPOX_SIGNING_MODE)' is not recognized.)
 endif
 VPOX_RETRY    ?= $(ASH) $(KBUILD_DEVTOOLS)/bin/retry.sh
 # temporary solution for a $(dir ...) equivalent which assumes that it gets a single path, possibly with spaces.
 VPOX_DIRX = $(subst ?,$(SP),$(dir $(subst $(SP),?,$1)))
 # Corp code signing client.
 VPOX_CCS_CLIENT_JAR := $(firstword $(rsort \
 	$(wildcard $(KBUILD_DEVTOOLS)/common/ccs/v*/Client.jar)) \
	$(KBUILD_DEVTOOLS)/common/ccs/notfound/Client.jar )
 VPOX_CCS_USER       ?= virtualpox_grp
 VPOX_CCS_GLOBAL_UID ?= non-of-your-business
 VPOX_CCS_SERVER     ?= UK
 ##
 # Corp Code Signing command line.
 # @param  $1  Signing method: solaris_elf, solaris_pkg, driver (microsoft), ...
 # @param  $2  The file to be submitted for signing.
 # @param  $3  The directory to put the signed file in. Defaults to $(dir $2).
 # @param  $4  Additional options.
 VPOX_CCS_SIGN_CMD    = $(VPOX_RETRY) $(VPOX_JAVA) -jar "$(VPOX_CCS_CLIENT_JAR)" \
 	sign -user "$(VPOX_CCS_USER)" -global_uid "$(VPOX_CCS_GLOBAL_UID)" \
		-job_timeout 90 -server_timeout 75 -server "$(VPOX_CCS_SERVER)" \
 		-sign_method "$1" -file_to_sign "$2" -signed_location "$(if $3,$3,$(call VPOX_DIRX,$2))" $4

 ifeq ($(KBUILD_HOST),win)
  #
  # Windows
  #

  # VPOX_PATH_SELFSIGN points to the Vista WDK bin/SelfSign directory.
  ifndef VPOX_PATH_SELFSIGN
   VPOX_PATH_SELFSIGN := $(firstword $(rsort $(wildcard $(KBUILD_DEVTOOLS)/win.x86/selfsign/*)))
   ifeq ($(VPOX_PATH_SELFSIGN),)
    VPOX_PATH_SELFSIGN := $(KBUILD_DEVTOOLS)/win.x86/selfsign/r1
   endif
  endif
  ifndef VPOX_PATH_SIGN_TOOLS
   VPOX_PATH_SIGN_TOOLS := $(firstword $(rsort $(wildcard \
   	$(addprefix $(KBUILD_DEVTOOLS)/win.x86/sdk/v8.1*/Bin/, x86 $(if-expr $(KBUILD_HOST_ARCH)=="amd64",x64,) ) )))
   ifeq ($(VPOX_PATH_SIGN_TOOLS),)
    VPOX_PATH_SIGN_TOOLS := $(firstword $(rsort $(wildcard \
    	$(addprefix $(KBUILD_DEVTOOLS)/win.x86/sdk/v10*/Bin/, x86 $(if-expr $(KBUILD_HOST_ARCH)=="amd64",x64,) ) )))
    ifeq ($(VPOX_PATH_SIGN_TOOLS),)
     VPOX_PATH_SIGN_TOOLS := $(VPOX_PATH_SELFSIGN)
    endif
   endif
  endif

  VPOX_SIGNTOOL                ?= $(VPOX_RETRY) "$(VPOX_PATH_SIGN_TOOLS)/signtool.exe"
  VPOX_SIGNTOOL_SHA1           ?= $(VPOX_SIGNTOOL)
  VPOX_SIGNTOOL_SHA1_ORDERDEPS ?=
  VPOX_SIGNTOOL_SHA2           ?= $(VPOX_SIGNTOOL)
  VPOX_SIGNTOOL_SHA2_ORDERDEPS ?=
  VPOX_SIGNTOOL_ORDERDEPS      ?= $(VPOX_SIGNTOOL_SHA1_ORDERDEPS) $(VPOX_SIGNTOOL_SHA2_ORDERDEPS)
  VPOX_INF2CAT                 ?= $(VPOX_PATH_SELFSIGN)/inf2cat.exe

  ifeq ($(VPOX_SIGNING_MODE),test)
   VPOX_CERTIFICATE_SUBJECT_NAME ?= MyTestCertificate
   VPOX_CERTIFICATE_SUBJECT_NAME_ARGS ?= /n "$(VPOX_CERTIFICATE_SUBJECT_NAME)"
  else # release
   VPOX_CERTIFICATE_SUBJECT_NAME ?= VirtualPox 2022
   VPOX_CERTIFICATE_SUBJECT_NAME_ARGS ?= /n "$(VPOX_CERTIFICATE_SUBJECT_NAME)" /a
   #VPOX_CERTIFICATE_FINGERPRINT ?= 7e 92 b6 6b e5 1b 79 d8 ce 3f f2 5c 15 c2 df 6a b8 c7 f2 f2
   #VPOX_CERTIFICATE_FINGERPRINT ?= 5b de fe 58 0a 81 66 61 cd b5 7a 57 10 7b f4 18 74 86 ef cc
   #VPOX_CERTIFICATE_FINGERPRINT ?= 6f 47 42 06 bc bb 39 1b b8 2b a9 e5 dc 03 02 de f3 7a eb be
   VPOX_CERTIFICATE_FINGERPRINT ?= 5f 0b fe c5 53 17 c1 25 5a a4 7f cd bc 49 a2 fb 61 09 03 cc
   #VPOX_CROSS_CERTIFICATE_FILE ?= $(VPOX_PATH_SELFSIGN)/VeriSign Class 3 Public Primary Certification Authority - G5.cer
   #VPOX_CROSS_CERTIFICATE_FILE ?= $(VPOX_PATH_SELFSIGN)/DigiCert Assured ID Root CA.crt
   #VPOX_TSA_URL ?= http://timestamp.verisign.com/scripts/timstamp.dll - Appears to be broken between 2020-12-25 and 2020-12-30 (bugref:9849).
   VPOX_TSA_URL ?= http://timestamp.digicert.com
  endif
  if !defined(VPOX_CROSS_CERTIFICATE_FILE_ARGS) && defined(VPOX_CROSS_CERTIFICATE_FILE)
   VPOX_CROSS_CERTIFICATE_FILE_ARGS = /ac "$(VPOX_CROSS_CERTIFICATE_FILE)"
  endif
  if !defined(VPOX_TSA_URL_ARGS) && defined(VPOX_TSA_URL)
   VPOX_TSA_URL_ARGS = /t "$(VPOX_TSA_URL)"
  endif
  VPOX_CERTIFICATE_STORE ?= my
  VPOX_CERTIFICATE_STORE_ARGS ?= /s "$(VPOX_CERTIFICATE_STORE)"
  VPOX_CERTIFICATE_FINGERPRINT_ARGS := $(if-expr "$(VPOX_CERTIFICATE_FINGERPRINT)" != "" \
  	,/sha1 "$(subst $(SP),,$(VPOX_CERTIFICATE_FINGERPRINT))",)

  ifeq ($(VPOX_SIGNING_MODE),test)
   #VPOX_CERTIFICATE_SHA2_SUBJECT_NAME ?= MyTestCertificateSha2
   VPOX_CERTIFICATE_SHA2_SUBJECT_NAME_ARGS ?= /n "$(VPOX_CERTIFICATE_SHA2_SUBJECT_NAME)"
  else # release
   VPOX_CERTIFICATE_SHA2_SUBJECT_NAME ?= Oracle Corporation
   VPOX_CERTIFICATE_SHA2_SUBJECT_NAME_ARGS ?= /n "$(VPOX_CERTIFICATE_SHA2_SUBJECT_NAME)" /a
   #VPOX_CERTIFICATE_SHA2_FINGERPRINT ?= 31 31 bb 58 8b 19 9e 6e 85 0f d3 35 82 b0 c5 82 55 e1 6c 49
   #VPOX_CERTIFICATE_SHA2_FINGERPRINT ?= 22 05 6a 4d 46 2e 3d 2b b2 c3 2f bf b0 5b 84 c4 65 9c f7 fe
   #VPOX_CERTIFICATE_SHA2_FINGERPRINT ?= 17 3a 19 bf 8e 62 72 be 25 04 d3 08 aa 68 b1 b0 0e 03 33 2c
   VPOX_CERTIFICATE_SHA2_FINGERPRINT ?= 30 65 6f ca 8c 48 b1 d9 86 23 a9 4b 40 a6 bc 98 bd 87 bf ad
   VPOX_CROSS_CERTIFICATE_SHA2_FILE ?= $(VPOX_PATH_SELFSIGN)/DigiCert Assured ID Root CA.crt
   #VPOX_TSA_SHA2_URL ?= http://sha256timestamp.ws.symantec.com/sha256/timestamp - phase out for consistency reasons
   VPOX_TSA_SHA2_URL ?= http://timestamp.digicert.com
  endif
  if !defined(VPOX_CROSS_CERTIFICATE_SHA2_FILE_ARGS) && defined(VPOX_CROSS_CERTIFICATE_SHA2_FILE)
   VPOX_CROSS_CERTIFICATE_SHA2_FILE_ARGS = /ac "$(VPOX_CROSS_CERTIFICATE_SHA2_FILE)"
  endif
  if !defined(VPOX_TSA_SHA2_URL_ARGS) && defined(VPOX_TSA_SHA2_URL)
   VPOX_TSA_SHA2_URL_ARGS = /tr "$(VPOX_TSA_SHA2_URL)"
  endif
  VPOX_CERTIFICATE_SHA2_STORE ?= my
  VPOX_CERTIFICATE_SHA2_STORE_ARGS ?= /s "$(VPOX_CERTIFICATE_SHA2_STORE)"
  VPOX_CERTIFICATE_SHA2_FINGERPRINT_ARGS := $(if-expr "$(VPOX_CERTIFICATE_SHA2_FINGERPRINT)" != "" \
  	,/sha1 "$(subst $(SP),,$(VPOX_CERTIFICATE_SHA2_FINGERPRINT))",) # Still using SHA-1 for fingerprinting, it's good enough for that!
  #VPOX_CERTIFICATE_EV_SUBJECT_NAME ?= MyEvCertificate
  VPOX_CERTIFICATE_EV_SUBJECT_NAME_ARGS ?= /n "$(VPOX_CERTIFICATE_EV_SUBJECT_NAME)"
  VPOX_CERTIFICATE_EV_STORE ?= my
  VPOX_CERTIFICATE_EV_STORE_ARGS ?= /s "$(VPOX_CERTIFICATE_EV_STORE)"
  #VPOX_CERTIFICATE_EV_FINGERPRINT ?= my ev cert fingerprint
  VPOX_CERTIFICATE_EV_FINGERPRINT_ARGS := $(if-expr "$(VPOX_CERTIFICATE_EV_FINGERPRINT)" != "" \
  	,/sha1 "$(subst $(SP),,$(VPOX_CERTIFICATE_EV_FINGERPRINT))",) # Still using SHA-1 for fingerprinting, it's good enough for that!

  ## Sign a file (generic).
  # @param 1  The file to sign.
  # @param 2  File description. Optional.
  # @param 3  Additional parameters. Optional.
  # @param 4  Set to 2 if the expression will be expanded twice before chopped into commands (for _CMDS).
  # @param 5  Disables dual signing if non-empty, picking the SHA2 signature (since 2022-07-18).
  # @param 6  non-zero for alternative command separator.  This is used for generating repacking scripts.
  ifndef VPOX_SIGN_FILE_FN
   if $(intersects win all 1,$(VPOX_WITH_CORP_CODE_SIGNING))
    VPOX_SIGN_FILE_FN     = $(call VPOX_CCS_SIGN_CMD,driver$(if-expr "$3" == "/ph",_pagehash,),$1,,-digest_algo $(if-expr "$5" == "",SHA1,SHA2)) \
        $(if-expr "$5" == "",\
         $(if-expr "$6" == "",$(if-expr "$4" == "2",$$(NLTAB),$(NLTAB)),$6) \
         $(call VPOX_CCS_SIGN_CMD,driver$(if-expr "$3" == "/ph",_pagehash,),$1,,-dual_sign -digest_algo SHA2))
   else ifdef VPOX_CERTIFICATE_SHA2_SUBJECT_NAME
    ifdef VPOX_CERTIFICATE_SUBJECT_NAME
     VPOX_SIGN_FILE_FN     = $(if-expr "$5" == "",$(VPOX_SIGNTOOL_SHA1) \
	sign /fd sha1 \
	$(VPOX_CROSS_CERTIFICATE_FILE_ARGS) \
	$(VPOX_CERTIFICATE_STORE_ARGS) \
	$(VPOX_CERTIFICATE_SUBJECT_NAME_ARGS) \
	$(VPOX_CERTIFICATE_FINGERPRINT_ARGS) \
	$(VPOX_TSA_URL_ARGS) \
	$(if $(strip $(2)),/d "$(strip $(2))",) \
	$(3) \
	"$(1)" \
       $(if-expr "$6" == "",$(if-expr "$4" == "2",$$(NLTAB),$(NLTAB)),$6))$(VPOX_SIGNTOOL_SHA2) \
	sign $(if-expr "$5" == "",/as,) /fd sha256 \
	$(VPOX_CROSS_CERTIFICATE_SHA2_FILE_ARGS) \
	$(VPOX_CERTIFICATE_SHA2_STORE_ARGS) \
	$(VPOX_CERTIFICATE_SHA2_SUBJECT_NAME_ARGS) \
	$(VPOX_CERTIFICATE_SHA2_FINGERPRINT_ARGS) \
	$(VPOX_TSA_SHA2_URL_ARGS) \
	$(if $(strip $(2)),/d "$(strip $(2))",) \
	$(3) \
	"$(1)"
    else
     VPOX_SIGN_FILE_FN     = $(VPOX_SIGNTOOL_SHA2) \
	sign /fd sha256 \
	$(VPOX_CROSS_CERTIFICATE_SHA2_FILE_ARGS) \
	$(VPOX_CERTIFICATE_SHA2_STORE_ARGS) \
	$(VPOX_CERTIFICATE_SHA2_SUBJECT_NAME_ARGS) \
	$(VPOX_CERTIFICATE_SHA2_FINGERPRINT_ARGS) \
	$(VPOX_TSA_SHA2_URL_ARGS) \
	$(if $(strip $(2)),/d "$(strip $(2))",) \
	$(3) \
	"$(1)"
    endif
   else
    VPOX_SIGN_FILE_FN     = $(VPOX_SIGNTOOL) \
	sign /fd $(firstword $(VPOX_TEST_SIGN_ALGORITHM) sha256) \
	$(VPOX_CROSS_CERTIFICATE_FILE_ARGS) \
	$(VPOX_CERTIFICATE_STORE_ARGS) \
	$(VPOX_CERTIFICATE_SUBJECT_NAME_ARGS) \
	$(VPOX_CERTIFICATE_FINGERPRINT_ARGS) \
	$(VPOX_TSA_URL_ARGS) \
	$(if $(strip $(2)),/d "$(strip $(2))",) \
	$(3) \
	"$(1)"
   endif
  endif

  ## EV sign a file (generic).
  # @param 1  The file to sign.
  # @param 2  The directory to put the signed file in. Defaults to $(dir $1).
  ifndef VPOX_SIGN_EV_FILE_FN
   if $(intersects win_ev all 1,$(VPOX_WITH_CORP_CODE_SIGNING))
    VPOX_SIGN_EV_FILE_FN  = $(call VPOX_CCS_SIGN_CMD,microsoftev,$1,$(if $2,$2,))
   else ifdef VPOX_CERTIFICATE_EV_SUBJECT_NAME
    VPOX_SIGN_EV_FILE_FN  = $(VPOX_SIGNTOOL_SHA2) \
	sign /fd sha256 \
	$(VPOX_CERTIFICATE_EV_STORE_ARGS) \
	$(VPOX_CERTIFICATE_EV_SUBJECT_NAME_ARGS) \
	$(VPOX_CERTIFICATE_EV_FINGERPRINT_ARGS) \
	$(VPOX_TSA_SHA2_URL_ARGS) \
	"$(1)"
   endif
  endif

  ## Local SHA-1 and SHA-256 signatures with EV SHA-256 signature from corp code signing.
  #
  # This builds on Plan B, since the corp code signing always replaces existing
  # signatures. Since we're signing more, though, we do things slightly differently
  # so we can apply this to VPOX_RTSIGNTOOL as well - only that didn't work because
  # kmk tries to help windows caching images it executes.  So HACK ALERT on that.
  #
  # So, here is what we do.
  #   1. Sign $1 using the regular signing, probably dual signing it using local certs.
  #   2. Make temporary copy of $1 as $1.dual
  #   3. Do SHA-256 corp code signing of $1
  #   4. Add the SHA-256 signature from $1 to $1.dual using bldRTSignTool.
  #   5. Replace $1 with $1.dual.
  #
  # @param 1  The file to sign.
  # @param 2  File description. Optional.
  # @param 3  Additional parameters. Optional.
  # @param 4  Set to 2 if the expression will be expanded twice before chopped into commands (for _CMDS).
  # @param 5  Disables dual & tripple signing if non-empty.
  # @param 6  Disables tripple signing if non-empty.
  #
  # @remarks The parameters are the same as VPOX_SIGN_FILE_FN.
  VPOX_SIGN_IMAGE_WITH_EV_FN = $(call VPOX_SIGN_FILE_FN,$1,$2,$3,$4,$5)$(if-expr "$5" == "" && "$(target)" != "bldRTSignTool",\
	$(if-expr "$4" == "2",$$(NLTAB),$(NLTAB))$(RM) -f -- "$1.dual" \
  	$(if-expr "$4" == "2",$$(NLTAB),$(NLTAB))$(CP) -- "$1" "$1.dual" \
  	$(if-expr "$4" == "2",$$(NLTAB),$(NLTAB))$(call VPOX_CCS_SIGN_CMD,microsoftev,$1,,-digest_algo SHA2) \
  	$(if-expr "$4" == "2",$$(NLTAB),$(NLTAB))$(VPOX_RTSIGNTOOL) add-nested-$(if-expr "$(suffix $1)" == ".cat",cat,exe)-signature -v "$1.dual" "$1" \
  	$(if-expr "$4" == "2",$$(NLTAB),$(NLTAB))$(MV) -f -- "$1.dual" "$1" \
  	,)


  ## Corp code signing for drivers and catalogs, plan B.
  #
  # Since the corp code signing cannot dual signing and doesn't even have a
  # SHA-1 cert, we have to get creative:
  #   1. Sign $1 using local SHA-1 certificate.
  #   2. Make temporary copy of $1 as $1.ccs
  #   3. Do SHA-256 corp code signing of $1.ccs
  #   4. Add the SHA-256 signature from $1.ccs to $1 using bldRTSignTool.
  #   5. Delete $1.ccs.
  #
  # @param 1  The file to sign.
  # @param 2  File description. Optional.
  # @param 3  Additional parameters. Optional.
  # @param 4  Set to 2 if the expression will be expanded twice before chopped into commands (for _CMDS).
  # @param 5  Disables dual signing if non-empty.
  #
  # @remarks The parameters are the same as VPOX_SIGN_FILE_FN.
  VPOX_SIGN_IMAGE_PLAN_B_FN = $(VPOX_SIGNTOOL_SHA1) \
  	sign /fd sha1\
  	$(VPOX_CROSS_CERTIFICATE_FILE_ARGS) \
  	$(VPOX_CERTIFICATE_STORE_ARGS) \
  	$(VPOX_CERTIFICATE_SUBJECT_NAME_ARGS) \
  	$(VPOX_CERTIFICATE_FINGERPRINT_ARGS) \
  	$(VPOX_TSA_URL_ARGS) \
  	$(if $(strip $(2)),/d "$(strip $(2))",) \
  	$(3) \
  	"$(1)" \
  	$(if-expr "$5" == "",\
	$(if-expr "$4" == "2",$$(NLTAB),$(NLTAB))$(RM) -f -- "$1.ccs" \
  	$(if-expr "$4" == "2",$$(NLTAB),$(NLTAB))$(CP) -- "$1" "$1.ccs" \
  	$(if-expr "$4" == "2",$$(NLTAB),$(NLTAB))$(call VPOX_CCS_SIGN_CMD,driver$(if-expr "$3" == "/ph",_pagehash,),$1.ccs,,-digest_algo SHA2) \
  	$(if-expr "$4" == "2",$$(NLTAB),$(NLTAB))$(VPOX_RTSIGNTOOL) add-nested-$(if-expr "$(suffix $1)" == ".cat",cat,exe)-signature -v "$1" "$1.ccs" \
  	$(if-expr "$4" == "2",$$(NLTAB),$(NLTAB))$(RM) -f -- "$1.ccs" \
  	,)

  ## Sign an executable image.
  # @param 1  The file to sign.
  # @param 2  File description. Optional.
  # @param 3  Set to 2 if the expression will be expanded twice before chopped into commands (for _CMDS).
  if1of (win_with_ev,$(VPOX_WITH_CORP_CODE_SIGNING))
   VPOX_SIGN_IMAGE_FN        ?= $(call VPOX_SIGN_IMAGE_WITH_EV_FN,$(1),$(2),/ph,$(3))
   VPOX_SIGN_IMAGE_ORDERDEPS ?= $(VPOX_RTSIGNTOOL) $(VPOX_SIGNTOOL_ORDERDEPS)
  else
   VPOX_SIGN_IMAGE_FN        ?= $(call VPOX_SIGN_FILE_FN,$(1),$(2),/ph,$(3))
   VPOX_SIGN_IMAGE_ORDERDEPS ?= $(VPOX_SIGNTOOL_ORDERDEPS)
  endif

  ## Commands for signing a driver image after link.
  if $(intersects win_planb,$(VPOX_WITH_CORP_CODE_SIGNING))
   VPOX_SIGN_DRIVER_CMDS      ?= $(if $(eq $(tool_do),LINK_LIBRARY),,$(call VPOX_SIGN_IMAGE_PLAN_B_FN,$(out),,/ph,2))
   VPOX_SIGN_DRIVER_ORDERDEPS ?= $(VPOX_RTSIGNTOOL) $(VPOX_SIGNTOOL_ORDERDEPS)
  else
   VPOX_SIGN_DRIVER_CMDS      ?= $(if $(eq $(tool_do),LINK_LIBRARY),,$(call VPOX_SIGN_IMAGE_FN,$(out),,2))
   VPOX_SIGN_DRIVER_ORDERDEPS ?= $(if $(eq $(tool_do),LINK_LIBRARY),,$(VPOX_SIGN_IMAGE_ORDERDEPS))
  endif

  ## Create a security catalog file.
  # @param 1  The directory containing the stuff to sign.
  # @param 2  The expected .cat name. (Inf2Cat lowercases it)
  # @param 3  The list of OSes, separated by ';'.
  ifndef VPOX_MAKE_CAT_HLP_FN
   VPOX_MAKE_CAT_HLP_FN = \
	$(RM) -f -- "$(2)"\
	$(NL)$(TAB)$(VPOX_INF2CAT) "/driver:$(strip $(1))" "/os:$(strip $(subst ;,$(COMMA),$(3)))" /verbose \
	$(NL)$(TAB)$(MV) -- "$(2)" "$(2)"
   if $(intersects win_planb,$(VPOX_WITH_CORP_CODE_SIGNING))
    VPOX_MAKE_CAT_HLP_FN += $(NL)$(TAB)$(call VPOX_SIGN_IMAGE_PLAN_B_FN,$(2),,,$(NL)$(TAB))
   else
    VPOX_MAKE_CAT_HLP_FN += $(NL)$(TAB)$(call         VPOX_SIGN_FILE_FN,$(2),,,$(NL)$(TAB))
   endif
  endif
  VPOX_MAKE_CAT64_FN   ?= $(call VPOX_MAKE_CAT_HLP_FN,$(1),$(2),XP_X64;Server2003_X64;Vista_X64)
  VPOX_MAKE_CAT32_FN   ?= $(call VPOX_MAKE_CAT_HLP_FN,$(1),$(2),2000;XP_X86;Server2003_X86;Vista_X86)
  ifeq ($(KBUILD_TARGET_ARCH),x86)
   VPOX_MAKE_CAT_FN    ?= $(call VPOX_MAKE_CAT32_FN,$(1),$(2))
  else
   VPOX_MAKE_CAT_FN    ?= $(call VPOX_MAKE_CAT64_FN,$(1),$(2))
  endif

  # Go nuts, sign everything.
  if "$(VPOX_SIGNING_MODE)" == "release" || defined(VPOX_WITH_HARDENING)
   ## Commands for signing an executable or a dll image after link.
   VPOX_SIGN_IMAGE_CMDS           ?= $(if $(eq $(tool_do),LINK_LIBRARY),,$(call VPOX_SIGN_IMAGE_FN,$(out),,2))
   VPOX_SIGN_IMAGE_CMDS_ORDERDEPS ?= $(if $(eq $(tool_do),LINK_LIBRARY),,$(VPOX_SIGN_IMAGE_ORDERDEPS))
  endif
  ## Enable signing of the additions.
  VPOX_SIGN_ADDITIONS   ?= 1
  ## Set if we should incldue the legacy timestamp CA.
  ifndef VPOX_WITH_VPOX_LEGACY_TS_CA
   if "$(findstring 55287c0d517e273696d67c690dd5d9f0a1d6d725,$(VPOX_TSA_URL_ARGS))" != ""
    VPOX_WITH_VPOX_LEGACY_TS_CA = 1
   endif
  endif
  VPOX_LEGACY_TS_CA_FILE = $(PATH_ROOT)/src/VPox/HostDrivers/Support/Certificates/Timestamp-VPoxLegacyWinCA.crt

 else ifeq ($(KBUILD_HOST),darwin)
  #
  # Darwin code signing.
  #
  # Currently release signing is done when packing.  This may change later.
  # (Installer package signing is done elsewhere (VPOX_MACOSX_INSTALLER_SIGN).)
  #
  if defined(VPOX_CERTIFICATE_FINGERPRINT) && !defined(VPOX_CERTIFICATE_SUBJECT_NAME)
    VPOX_CERTIFICATE_SUBJECT_NAME = $(subst $(SP),,$(VPOX_CERTIFICATE_FINGERPRINT))
  endif
  ifeq ($(VPOX_SIGNING_MODE),test)
   VPOX_CERTIFICATE_SUBJECT_NAME ?= $(error You need to set VPOX_CERTIFICATE_SUBJECT_NAME in LocalConfig.kmk.)
   VPOX_CERTIFICATE_SUBJECT_NAME_ARGS ?= --sign "$(VPOX_CERTIFICATE_SUBJECT_NAME)"
  else
   VPOX_CERTIFICATE_SUBJECT_NAME ?= Developer ID Application: Oracle America, Inc.
   VPOX_CERTIFICATE_SUBJECT_NAME_ARGS ?= --sign "$(VPOX_CERTIFICATE_SUBJECT_NAME)"
  endif

  VPOX_CODESIGN ?= codesign
  if 0
   VPOX_DARWIN_KEXT_SIGN_FILES = CodeDirectory CodeRequirement CodeResources CodeSignature
  else
   VPOX_DARWIN_KEXT_SIGN_FILES = CodeResources
  endif

  # Always enable the hardened runtime when signing. Can be disabled if
  # trying to build on quite old macOS, which will likely need some effort.
  VPOX_WITH_MACOS_HARDENED_RUNTIME ?= 1

  ##
  # Corp Code Notarization command line. Modifies the file because the tickets are stapled.
  # @param 1  The file to be submitted for signing.
  # @param 2  Identifier, mandatory.
  # @param 3  The directory to put the notarized file in. Defaults to $(dir $1).
 VPOX_CCS_NOTARIZE_CMD = $(VPOX_RETRY) $(VPOX_JAVA) -jar "$(VPOX_CCS_CLIENT_JAR)" \
 	mac_notarize -user "$(VPOX_CCS_USER)" -global_uid "$(VPOX_CCS_GLOBAL_UID)" \
		-job_timeout 90 -server_timeout 75 -server "$(VPOX_CCS_SERVER)" \
 		-file_to_notarize "$1" -bundle_id "$2" -download_location "$(if $3,$3,$(call VPOX_DIRX,$1))"

  ## Sign an application bundle, framework or kernel extension.
  # @param 1  The bundle to sign.
  # @param 2  Identifier, optional.
  # @param 3  Additional codesign command line parameters, optional.
  if $(intersects darwin all 1,$(VPOX_WITH_CORP_CODE_SIGNING))
   ## @todo cannot handle $(2), the identifier.
   ## @todo $(3) is hopefully either empty, --deep or --entitlements=...
   VPOX_SIGN_BUNDLE_FN = $(call MSG_TOOL,SIGNTOOL,,$(1),$(2))$(NLTAB) \
	ditto -c -k -V --keepParent "$(1)" "$(1).zip"$(NLTAB) \
	$(call VPOX_CCS_SIGN_CMD,apple,$(1).zip,,$(subst --entitlements=,-entitlement_file_path ,$(subst --deep,-deep,$(3))) \
		$(if $(VPOX_WITH_MACOS_HARDENED_RUNTIME),-hardened_runtime))$(NLTAB) \
	ditto -x -k -V "$(1).zip" "$(1)/../"$(NLTAB) \
	$(RM) -f -- "$(1).zip"
  else
   VPOX_SIGN_BUNDLE_FN = $(call MSG_TOOL,SIGNTOOL,,$(1),$(2))$(NLTAB)$(VPOX_CODESIGN) \
	--verbose=9 \
	--force \
	$(if-expr $(KBUILD_HOST_VERSION_MAJOR) <= 14,--digest-algorithm sha256,) \
	$(if $(VPOX_WITH_MACOS_HARDENED_RUNTIME),$(if-expr $(KBUILD_HOST_VERSION_MAJOR) <= 16,--options 0x10000,--options runtime)) \
	--file-list - \
	$(if-expr defined(VPOX_TSA_URL),--timestamp="$(VPOX_TSA_URL)") \
	$(3) \
	$(VPOX_CERTIFICATE_SUBJECT_NAME_ARGS) \
	"$(1)" $(if $(2),--identifier "$(2)",)
  endif

  ## Sign a Mach-O image.
  # @param 1  The file to sign.
  # @param 2  Identifier, optional.
  # @param 3  Additional codesign command line parameters, optional.
  if $(intersects darwin all 1,$(VPOX_WITH_CORP_CODE_SIGNING))
   ## @todo cannot handle $(2), the identifier.
   ## @todo $(3) is hopefully either empty or --entitlements=...
   VPOX_SIGN_MACHO_FN = $(call MSG_TOOL,SIGNTOOL,,$(1),$(2))$(NLTAB) \
	$(call VPOX_CCS_SIGN_CMD,binary,$(1),,$(subst --entitlements=,-entitlement_file_path ,$(3)) \
		$(if $(VPOX_WITH_MACOS_HARDENED_RUNTIME),-hardened_runtime))
  else
   VPOX_SIGN_MACHO_FN = $(call MSG_TOOL,SIGNTOOL,,$(1),$(2))$(NLTAB)$(VPOX_CODESIGN) \
	--verbose=9 \
	--force \
	$(if-expr $(KBUILD_HOST_VERSION_MAJOR) <= 14,--digest-algorithm sha256,) \
	$(if $(VPOX_WITH_MACOS_HARDENED_RUNTIME),$(if-expr $(KBUILD_HOST_VERSION_MAJOR) <= 16,--options 0x10000,--options runtime)) \
	--file-list - \
	$(if-expr defined(VPOX_TSA_URL),--timestamp="$(VPOX_TSA_URL)") \
	$(VPOX_CERTIFICATE_SUBJECT_NAME_ARGS) \
	$(3) \
	"$(1)" \
	$(if $(2),--identifier "$(2)",)
  endif

  ## Commands for signing an the extpack dylib files after link.
  if $(intersects darwin all 1,$(VPOX_WITH_CORP_CODE_SIGNING))
   VPOX_SIGN_EXTPACK_DYLIB_CMDS ?= $(if $(eq $(tool_do),LINK_LIBRARY),, \
	$(call VPOX_CCS_SIGN_CMD,binary,$(out),, \
		$(if $(VPOX_WITH_MACOS_HARDENED_RUNTIME),-hardened_runtime)) )
  else
   VPOX_SIGN_EXTPACK_DYLIB_CMDS ?= $(if $(eq $(tool_do),LINK_LIBRARY),, \
	$(VPOX_CODESIGN) \
	--verbose=9 \
	--force \
	$(if-expr $(KBUILD_HOST_VERSION_MAJOR) <= 14,--digest-algorithm sha256,) \
	$(if $(VPOX_WITH_MACOS_HARDENED_RUNTIME),$(if-expr $(KBUILD_HOST_VERSION_MAJOR) <= 16,--options 0x10000,--options runtime)) \
	--file-list - \
	$(if-expr defined(VPOX_TSA_URL),--timestamp="$(VPOX_TSA_URL)") \
	$(VPOX_CERTIFICATE_SUBJECT_NAME_ARGS) \
	$(out) )
  endif

  ## Sign a VMM Mach-O image.
  # @param 1  The file to sign.
  # @param 2  Identifier, optional.
  VPOX_SIGN_VMM_MOD_FN = $(VPOX_SIGN_MACHO_FN)

  ## Sign a non-executable file.
  # @param 1  The file to sign.
  # @param 2  Identifier, optional.
  if $(intersects darwin all 1,$(VPOX_WITH_CORP_CODE_SIGNING))
   ## @todo cannot handle $(2), the identifier.
   VPOX_SIGN_FILE_FN = $(call MSG_TOOL,SIGNTOOL,,$(1),$(2))$(NLTAB)$(call VPOX_CCS_SIGN_CMD,binary,$(1))
  else
   VPOX_SIGN_FILE_FN = $(call MSG_TOOL,SIGNTOOL,,$(1),$(2))$(NLTAB)$(VPOX_CODESIGN) \
	--verbose=9 \
	--force \
	$(if-expr $(KBUILD_HOST_VERSION_MAJOR) <= 14,--digest-algorithm sha256,) \
	--file-list=- \
	$(if-expr defined(VPOX_TSA_URL),--timestamp="$(VPOX_TSA_URL)") \
	$(if $(2),--identifier "$(2)",) \
	$(VPOX_CERTIFICATE_SUBJECT_NAME_ARGS) \
	"$(1)"
  endif

  ## Sign a DMG image.
  # @param 1  The file to sign.
  # @param 2  Identifier, optional.
  # @note Will segfault if --file-list is used on 10.15.2 (kSecCodeInfoChangedFiles -> NULL, outputter doesn't check for NULL).
  VPOX_SIGN_DMG_FN = $(filter-out --file-list=-,$(VPOX_SIGN_FILE_FN))

  ## Sign a PKG file. Used with corp code signing only.
  # @param 1  The file to sign.
  # @param 2  Identifier, optional.
  if $(intersects darwin all 1,$(VPOX_WITH_CORP_CODE_SIGNING))
   ## @todo cannot handle $(2), the identifier.
   VPOX_SIGN_PKG_FN = $(call MSG_TOOL,SIGNTOOL,,$(1),$(2))$(NLTAB)$(call VPOX_CCS_SIGN_CMD,mac_pkg,$(1))
  endif

  ## Notarize a file (usually DMG, can also be PKG). Used with corp code signing only.
  # @param 1  The file to notarize.
  # @param 2  Identifier, mandatory.
  if $(intersects darwin all 1,$(VPOX_WITH_CORP_CODE_SIGNING))
   VPOX_NOTARIZE_FILE_FN = $(call MSG_TOOL,SIGNTOOL,,$(1),$(2))$(NLTAB)$(call VPOX_CCS_NOTARIZE_CMD,$(1),$(2))
  endif

  ## @def VPOX_TEST_SIGN_KEXT
  # Adds test signing to a $1.kext target (the plist installer target).
  #
  # After both targets has been defined:
  #    $(evalcall2 VPOX_TEST_SIGN_KEXT,VPoxDrv)
  #
  # @param 1   The kext name.  Assumes there is a SYSMODS target of name $1
  #            as well as an .plist installer by the name of '$1.kext'.
  # @remarks   Currently assumes only binary + Info.plist in the bundle, no
  #            other files.  Should there be more, add them as a list in
  #            a 2nd parameter.
  # @note      This is only for the 'test' signing mode, we skip this in
  #            'release' signing mode as to not waste time on the build boxes.
  ifeq ($(VPOX_SIGNING_MODE),test) ## @todo when kBuild is updated to r2742+, this should be enabled for both modes.
   define VPOX_TEST_SIGN_KEXT
  $1_INSTTYPE.darwin = none

  $1.kext_SOURCES  += $$($1.kext_0_OUTDIR)/Contents/MacOS/$1=>MacOS/$1 \
  	$(foreach extfile, $(VPOX_DARWIN_KEXT_SIGN_FILES) \
	        , $$($1.kext_0_OUTDIR)/Contents/_CodeSignature/$(extfile)=>_CodeSignature/$(extfile))
  $1.kext_SYMLINKS += $(foreach symfile, $(VPOX_DARWIN_KEXT_SIGN_SYMLINKS), $(symfile)=>_CodeSignature/$(symfile))
  $1.kext_CLEAN    += \
  	$(foreach extfile, $(VPOX_DARWIN_KEXT_SIGN_FILES)   , $$($1.kext_0_OUTDIR)/Contents/_CodeSignature/$(extfile)) \
  	$(foreach symfile, $(VPOX_DARWIN_KEXT_SIGN_SYMLINKS), $$($1.kext_0_OUTDIR)/Contents/$(symfile)) \
	$$($1.kext_0_OUTDIR)/Contents/MacOS/$1 \
	$$($1.kext_0_OUTDIR)/$1.kext/Contents/_CodeSignature/
  $1.kext_BLDDIRS  += $$($1.kext_0_OUTDIR)/Contents/MacOS/

  $$$$($1.kext_0_OUTDIR)/Contents/MacOS/$1 \
  + $(foreach file,$(VPOX_DARWIN_KEXT_SIGN_FILES), $$$$($1.kext_0_OUTDIR)/Contents/_CodeSignature/$(file)): \
 		$$$$($1.kext_0_OUTDIR)/Contents/Info.plist $$$$($1_1_TARGET) | $$$$($1.kext_0_OUTDIR)/
	$(RM) -Rf -- "$$($1.kext_0_OUTDIR)/Contents/_CodeSignature/" "$$($1.kext_0_OUTDIR)/Contents/MacOS/"
	$(MKDIR) -p -- "$$($1.kext_0_OUTDIR)/Contents/MacOS/"
	$(INSTALL) -m 644 $$($1_1_TARGET) $$($1.kext_0_OUTDIR)/Contents/MacOS/$1
	$(call VPOX_SIGN_BUNDLE_FN,$$($1.kext_0_OUTDIR),org.virtualpox.app.kext.$1,)
   endef
  else
   VPOX_TEST_SIGN_KEXT =
  endif


 else ifeq ($(KBUILD_HOST),solaris)
  #
  # Solaris code signing.
  #
  ifeq ($(VPOX_SIGNING_MODE),test)
   VPOX_CERTIFICATE_FILE  ?= $(error You need to set VPOX_CERTIFICATE_FILE in LocalConfig.kmk.)
   VPOX_TOKEN_NAME        ?= $(error You need to set VPOX_TOKEN_NAME in LocalConfig.kmk.)
   VPOX_PIN_FILE          ?= $(error You need to set VPOX_PIN_FILE in LocalConfig.kmk.)
  else
   VPOX_CERTIFICATE_FILE  ?= $(PATH_ROOT)/oracle.pem
   VPOX_TOKEN_NAME        ?= "Sun Software PKCS\#11 softtoken"
   VPOX_PIN_FILE          ?= $(PATH_ROOT)/oracle.pin
  endif
  VPOX_CERTIFICATE_FILE_ARGS ?= -c $(VPOX_CERTIFICATE_FILE)
  VPOX_TOKEN_NAME_ARGS       ?= -T $(VPOX_TOKEN_NAME)
  VPOX_PIN_ARGS              ?= -P $(VPOX_PIN_FILE)

  VPOX_ELFSIGN ?= elfsign

  # Sign an ELF image.
  # @param 1   The elf object file to sign.
  VPOX_SIGN_ELF_FN ?= $(VPOX_ELFSIGN) \
	sign \
	$(VPOX_CERTIFICATE_FILE_ARGS) \
	$(VPOX_TOKEN_NAME_ARGS) \
	$(VPOX_PIN_ARGS) \
	-e "$(1)"

  ## Commands for signing a driver image after link.
  if $(intersects solaris all 1,$(VPOX_WITH_CORP_CODE_SIGNING))
   VPOX_SIGN_DRIVER_CMDS ?= $(if $(eq $(tool_do),LINK_LIBRARY),,$(call VPOX_CCS_SIGN_CMD,solaris_elf,$(out)))
  else
   VPOX_SIGN_DRIVER_CMDS ?= $(if $(eq $(tool_do),LINK_LIBRARY),,$(call VPOX_SIGN_ELF_FN,$(out)))
  endif

 else
  # Not Windows, Mac OS X or Solaris build host, ignore.
  VPOX_SIGNING_MODE :=
 endif

#
# Complain if windows hardening is enabled but not code signing.
#
else if "$(KBUILD_TARGET)" == "win" && defined(VPOX_WITH_HARDENING) && !defined(VPOX_ONLY_BUILD)
 $(error You need to enable code signing for a hardened windows build to work.)
endif

#
# Windows .inf editing.
#
ifeq ($(KBUILD_TARGET_ARCH),x86)
 VPOX_EDIT_INF_FN = $(call VPOX_EDIT_INF32_FN,$(1),$(2))
else
 VPOX_EDIT_INF_FN = $(call VPOX_EDIT_INF64_FN,$(1),$(2))
endif
## Edit an inf file an x86 target.
# @param    1   The inf file to edit.
# @param    2   The output file.
VPOX_EDIT_INF32_FN = $(SED) $(if $(VPOX_SIGNING_MODE),-e 's/^;cat  *//', -e '/^;cat /d') \
	-e 's/^;x86  *//' \
	-e '/^;amd64 /d' \
	-e 's/@DOT-NT-ARCH@//' \
	-e 's/@COMMA-NT-ARCH@//' \
	-e 's/^;edit-DriverVer.*/DriverVer = $(date-utc %m\/%d\/%Y),$(VPOX_VERSION_MAJOR).$(VPOX_VERSION_MINOR).$(VPOX_VERSION_BUILD).$(expr $(VPOX_SVN_REV) % 50000) ; r$(VPOX_SVN_REV)/' \
	--output $(2) \
	$(1)
## Edit an inf file an x86 target.
# @param    1   The inf file to edit.
# @param    2   The output file.
VPOX_EDIT_INF64_FN = $(SED) \
	$(if $(VPOX_SIGNING_MODE),-e 's/^;cat  *//', -e '/^;cat /d')\
	-e 's/^;amd64  *//' \
	-e '/^;x86 /d' \
	-e 's/@DOT-NT-ARCH@/.ntamd64/' \
	-e 's/@COMMA-NT-ARCH@/,ntamd64/' \
	-e 's/^;edit-DriverVer.*/DriverVer = $(date-utc %m\/%d\/%Y),$(VPOX_VERSION_MAJOR).$(VPOX_VERSION_MINOR).$(VPOX_VERSION_BUILD).$(expr $(VPOX_SVN_REV) % 50000) ; r$(VPOX_SVN_REV)/' \
	--output $(2) \
	$(1)

##
# Helper macro for re-signing DLL images from tools that we ship so they won't
# cause trouble for the hardened build requirements.
#
# Invoke via $(call VPOX_RE_SIGN_DLL_FN) inside the SOURCES list.  Necessary
# _CLEAN entry will be added to the target.  If hardening is not enabled or
# we're not on windows, the source will be returned.
#
# @returns  Name of the output file name.  May have leading space, but no trailing.
# @param    1   Target name.
# @param    2   The source name.
# @param    3   Optional prefix to avoid name collisions.
#
if defined(VPOX_SIGNING_MODE) && "$(KBUILD_TARGET)" == "win"
 VPOX_RE_SIGN_DLL_FN = $(if-expr !defined($(1)_VPOX_RE_SIGNED_$(3)$(notdir $(2))),\
	$(evalcall VPOX_RE_SIGN_DLL_INTERNAL_FN,$1,$2,$3)\
	,)$($(1)_0_OUTDIR)/$(3)$(notdir $2)

define VPOX_RE_SIGN_DLL_INTERNAL_FN
local n = $(3)$(notdir $2)
ifndef $(1)_VPOX_RE_SIGNED_$(n)
 $(1)_VPOX_RE_SIGNED_$(n) := 1
 $(eval $(1)_CLEAN += $$($(1)_0_OUTDIR)/$(n))

 $$($(1)_0_OUTDIR)/$(n): $(2) $(VPOX_VERSION_STAMP) | $$(dir $$@) $(VPOX_SIGN_IMAGE_ORDERDEPS)
	$(call MSG_TOOL,SIGNTOOL,,$<,$@)
	$(RM) -f -- "$@"
	$(CP) -- "$<" "$@"
	$(VPOX_VCC_EDITBIN) /LargeAddressAware /DynamicBase /NxCompat /Release /IntegrityCheck \
		/Version:$(VPOX_VERSION_MAJOR)0$(VPOX_VERSION_MINOR).$(VPOX_VERSION_BUILD) \
		"$@"
	$(call VPOX_SIGN_IMAGE_FN,$@)
endif
endef # VPOX_RESIGN_DLL_FN
else
 VPOX_RE_SIGN_DLL_FN = $(2)
endif


##
# @param
VPOX_RESIGN_DLL_FN =


#
# File version info and description macros (ignored on most OSes).
#

##
# Internal macro.
#
# @param 1     The target name.
# @param 2     The description
# @param 3     Optional icon file.
# @param 4     The template base name.
# @param 5     Additional RC options.
# @param 6     Original filename to use.
#
# @remarks     ASSUMES RCFLAGS isn't a simple variable (var := value).
define VPOX_SET_VER_INFO_INTERNAL
ifeq ($(KBUILD_TARGET),win)
$(1)_SOURCES.win += $(PATH_ROOT)/src/VPox/Artwork/win/$(4)
$(1)_RCFLAGS += /nologo /dIN_INTERNAL_NAME="\"$(1)\"" /dIN_FILE_DESCRIPTION="\"$(2)\"" \
	/dIN_ORIGINAL_NAME="\"$(if $(6),$6,$$(notdir $$($(1)_1_INST_TARGET)))\"" \
	$(if $(3), /dIN_ICON_FILE="\"$(subst \\,/,$(strip $(3)))\"") $(5)
$$$$($(1)_0_OUTDIR)/src/VPox/Artwork/win/$(basename $(4)).res: \
	$(PATH_ROOT)/include/VPox/version.h $$$$(VPOX_VERSION_HEADER)
endif
endef

##
# Macro for setting DLL/SO/DYLIB version information and description.
#
# The macro must be invoked using evalcall2 after the whole target has
# been declared.
#
# @param 1     The target name.
# @param 2     The description
# @param 3     Optional icon file.
VPOX_SET_VER_INFO_DLL = $(evalcall2 VPOX_SET_VER_INFO_INTERNAL,$1,$2,$3,TemplateDll.rc,)

##
# Macro for setting EXE version information and description.
#
# The macro must be invoked using call after the whole target has been declared.
#
# @param 1     The target name.
# @param 2     The description
# @param 3     Optional icon file.
# @param 4     Optional OriginalFilename value to use. Defaults to target name w/o dir.
VPOX_SET_VER_INFO_EXE = $(evalcall2 VPOX_SET_VER_INFO_INTERNAL,$1,$2,$3,TemplateExe.rc,,$4)

##
# Macro for setting driver version information and description.
#
# The macro must be invoked using call after the whole target has been declared.
#
# @param 1     The target name.
# @param 2     The description
# @param 3     Optional icon file.
# @param 4     Optional VFT2_DRV_xxx define for windows.  Uses VFT2_UNKNOWN by default.
VPOX_SET_VER_INFO_DRV = $(evalcall2 VPOX_SET_VER_INFO_INTERNAL,$1,$2,$3,TemplateDrv.rc,$(if $(4), /dIN_FILE_SUBTYPE=$(4)))

##
# Macro for setting the version information and description for a ring-0 module.
#
# The macro must be invoked using call after the whole target has been declared.
#
# @param 1     The target name.
# @param 2     The description
# @param 3     Optional icon file.
VPOX_SET_VER_INFO_R0 = $(evalcall2 VPOX_SET_VER_INFO_INTERNAL,$1,$2,$3,TemplateR0.rc,)

##
# Macro for setting the version information and description for a raw-mode context module.
#
# The macro must be invoked using call after the whole target has been declared.
#
# @param 1     The target name.
# @param 2     The description
# @param 3     Optional icon file.
VPOX_SET_VER_INFO_RC = $(evalcall2 VPOX_SET_VER_INFO_INTERNAL,$1,$2,$3,TemplateRc.rc,)



#
# Adjust kBuild defaults.
#
kBuildGlobalDefaults_DEBUG_NOSTAGE.win = true
kBuildGlobalDefaults_DEBUG_NOSTAGE.os2 = true
if1of ($(KBUILD_TARGET), darwin win)
 kBuildGlobalDefaults_LD_DEBUG = split
endif


#
# Haiku resource and version generation.
#
ifeq ($(KBUILD_HOST),haiku)
 VPOX_HAIKU_RCTOOL := rc
 VPOX_HAIKU_XRESTOOL := xres
 VPOX_HAIKU_SETVERSIONTOOL := setversion
 # XXX: install won't preserve attributes...
 VPOX_HAIKU_MIMESETTOOL := mimeset

  ## Add optional resources to the program, set its version info, and sniff its mime properties.
  # @param 1  The file to add resources to.
  # @param 2  The resource files.
  # @param 3  The target name.
define VPOX_HAIKU_XRES_SETVER_FN
	$(if $(2),$(call MSG_TOOL,HaikuAddResources,$(3),$(2))
	$(QUIET)$(VPOX_HAIKU_XRESTOOL) -o $(1) $(2),)
	$(call MSG_TOOL,HaikuSetVersion,$(3))
	$(QUIET)$(VPOX_HAIKU_SETVERSIONTOOL) $(1) \
		-app $(VPOX_VERSION_MAJOR) $(VPOX_VERSION_MINOR) $(VPOX_VERSION_BUILD) d $(VPOX_SVN_REV) \
		-short "$(VPOX_PRODUCT)" \
		-long "$(VPOX_PRODUCT) $(VPOX_VERSION_STRING) $(shell /bin/echo -e '\xC2\xA9')2009-$(VPOX_C_YEAR) $(VPOX_VENDOR)"
	$(call MSG_TOOL,HaikuMimeSet,$(3))
	$(QUIET)$(VPOX_HAIKU_MIMESETTOOL) -f $(1)
endef

 VPOX_HAIKU_XRES_SETVER_CMDS  ?= $(if $(eq $(tool_do),LINK_PROGRAM),$(call VPOX_HAIKU_XRES_SETVER_FN,$(out),$($(target)_RSRCS),$(target)),)
endif

#
# Default prefixes and suffixes.
#
VPOX_PREF_LIB =
if1of ($(KBUILD_TARGET), os2 win)
VPOX_SUFF_LIB = .lib
else
VPOX_SUFF_LIB = .a
endif
if1of ($(KBUILD_HOST), os2 win)
VPOX_HOSTSUFF_LIB = .lib
else
VPOX_HOSTSUFF_LIB = .a
endif
VPOX_SUFF_DLL = $(SUFF_DLL)
ifeq ($(KBUILD_TARGET),os2) # GXX3OMF produces out .o at the moment.
VPOX_SUFF_OBJ = .o
else
VPOX_SUFF_OBJ = $(SUFF_OBJ)
endif
VPOXW32GUEST_SUFF_LIB = .lib
VPOXLNX32GUEST_SUFF_LIB = .a

#
# SDKs for external libraries.
#
SDK_VPOX_LIBXML2           = .
SDK_VPOX_LIBXML2_INCS     ?= $(PATH_ROOT)/src/libs/libxml2-2.9.4/include
SDK_VPOX_LIBXML2_DEFS     ?= _REENTRANT LIBXML_STATIC LIBXML_STATIC_FOR_DLL
SDK_VPOX_LIBXML2_DEFS.win ?= WIN32 _WINDOWS _MBCS HAVE_WIN32_THREADS HAVE_COMPILER_TLS
# Note: no linking to LIB here, we do that explicitly in src/VPox/Runtime/Makefile.kmk to link
#       libxml against VPoxRT

SDK_VPOX_LIBPNG       = .
SDK_VPOX_LIBPNG_INCS ?= $(PATH_ROOT)/src/libs/libpng-1.6.36
SDK_VPOX_LIBPNG_LIBS ?= $(PATH_STAGE_LIB)/VPox-libpng$(VPOX_SUFF_LIB)

SDK_VPOX_ZLIB         = .
if1of ($(KBUILD_TARGET), os2 solaris win)
 SDK_VPOX_ZLIB_INCS  ?= $(PATH_ROOT)/src/libs/zlib-1.2.11
 SDK_VPOX_ZLIB_LIBS  ?= $(PATH_STAGE_LIB)/VPox-zlib$(VPOX_SUFF_LIB)
else
 SDK_VPOX_ZLIB_INCS  ?=
 SDK_VPOX_ZLIB_LIBS  ?= z
 SDK_VPOX_ZLIB_DEFS.linux ?= _LARGEFILE64_SOURCE
endif

SDK_VPOX_ZLIB-x86    = .
SDK_VPOX_ZLIB-x86_EXTENDS = VPOX_ZLIB
if1of ($(KBUILD_TARGET), os2 solaris win)
 SDK_VPOX_ZLIB_LIBS-x86  ?= $(PATH_STAGE_LIB)/VPox-zlib-x86$(VPOX_SUFF_LIB)
endif

SDK_VPOX_ZLIB_STATIC  = .
SDK_VPOX_ZLIB_STATIC_EXTENDS ?= VPOX_ZLIB
if1of ($(KBUILD_TARGET), os2 win) # Not required on solaris.
 SDK_VPOX_ZLIB_STATIC_LIBS ?= $(PATH_STAGE_LIB)/VPox-zlib-static$(VPOX_SUFF_LIB)
endif

SDK_VPOX_LZF		= .
SDK_VPOX_LZF_INCS  ?= $(PATH_ROOT)/src/libs/liblzf-3.4
SDK_VPOX_LZF_LIBS  ?= $(PATH_STAGE_LIB)/VPox-liblzf$(VPOX_SUFF_LIB)

SDK_VPOX_LZF-x86	= .
SDK_VPOX_LZF-x86_EXTENDS = VPOX_LZF
SDK_VPOX_LZF_LIBS-x86 ?= $(PATH_STAGE_LIB)/VPox-liblzf-x86$(VPOX_SUFF_LIB)

SDK_VPOX_LZF_STATIC  = .
SDK_VPOX_LZF_STATIC_EXTENDS ?= VPOX_LZF
if1of ($(KBUILD_TARGET), os2 win)
 SDK_VPOX_LZF_STATIC_LIBS ?= $(PATH_STAGE_LIB)/VPox-liblzf-static$(VPOX_SUFF_LIB)
endif

SDK_VPOX_OPENSSL      = Only for VPoxRT and/or statically linked programs.
SDK_VPOX_OPENSSL_VPOX_DEFAULT_INCS := $(PATH_OUT)/obj/crypto-1.1.1-headers/include
SDK_VPOX_OPENSSL_INCS ?= $(SDK_VPOX_OPENSSL_VPOX_DEFAULT_INCS)
SDK_VPOX_OPENSSL_ORDERDEPS ?= $(crypto-headers_1_TARGET)
if  !defined(VPOX_ONLY_SDK) \
 && (!defined(VPOX_ONLY_ADDITIONS) || !defined(VPOX_ONLY_ADDITIONS_WITHOUT_RTISOMAKER)) \
 && (!defined(VPOX_ONLY_EXTPACKS) || defined(VPOX_NEED_EXTPACK_OPENSSL) || !defined(VPOX_ONLY_EXTPACKS_USE_IMPLIBS)) \
 && ("$(SDK_VPOX_OPENSSL_INCS)" == "$(SDK_VPOX_OPENSSL_VPOX_DEFAULT_INCS)" || defined(VPOX_NEED_EXTPACK_OPENSSL))
 SDK_VPOX_OPENSSL_DEPS ?= $(SDK_VPOX_OPENSSL_INCS)/openssl/openssl-mangling.h
endif
SDK_VPOX_OPENSSL_LIBS ?= \
	$(PATH_STAGE_LIB)/VPox-libssl$(VPOX_SUFF_LIB) \
	$(PATH_STAGE_LIB)/VPox-libcrypto$(VPOX_SUFF_LIB)

SDK_VPOX_OPENSSL-x86      = Only for VPoxRT and/or statically linked programs.
SDK_VPOX_OPENSSL-x86_VPOX_DEFAULT_INCS := $(PATH_OUT)/obj/crypto-1.1.1-headers/include
SDK_VPOX_OPENSSL-x86_INCS ?= $(SDK_VPOX_OPENSSL_VPOX_DEFAULT_INCS)
SDK_VPOX_OPENSSL-x86_ORDERDEPS ?= $(crypto-headers_1_TARGET)
if ("$(SDK_VPOX_OPENSSL_INCS)" == "$(SDK_VPOX_OPENSSL_VPOX_DEFAULT_INCS)" || defined(VPOX_NEED_EXTPACK_OPENSSL))
 SDK_VPOX_OPENSSL-x86_DEPS ?= $(SDK_VPOX_OPENSSL_INCS)/openssl/openssl-mangling.h
endif
SDK_VPOX_OPENSSL-x86_LIBS ?= \
	$(PATH_STAGE_LIB)/VPox-libssl-x86$(VPOX_SUFF_LIB) \
	$(PATH_STAGE_LIB)/VPox-libcrypto-x86$(VPOX_SUFF_LIB)

ifdef VPOX_WITH_BLD_RTSIGNTOOL_SIGNING
 SDK_VPOX_OPENSSL_BLDPROG               := OpenSSL - Build tools verison (i.e. bldRTSignTool)
 SDK_VPOX_OPENSSL_BLDPROG_INCS          ?= $(SDK_VPOX_OPENSSL_VPOX_DEFAULT_INCS)
 SDK_VPOX_OPENSSL_BLDPROG_ORDERDEPS     ?= $(crypto-headers_1_TARGET)
 if  !defined(VPOX_ONLY_SDK) \
  && ("$(SDK_VPOX_OPENSSL_INCS)" == "$(SDK_VPOX_OPENSSL_VPOX_DEFAULT_INCS)")
  SDK_VPOX_OPENSSL_BLDPROG_DEPS         ?= $(SDK_VPOX_OPENSSL_INCS)/openssl/openssl-mangling.h
 endif
 SDK_VPOX_OPENSSL_BLDPROG_LIBS          ?= \
 	$(PATH_STAGE_LIB)/VPoxBldProg-libssl$(VPOX_SUFF_LIB) \
 	$(PATH_STAGE_LIB)/VPoxBldProg-libcrypto$(VPOX_SUFF_LIB)
endif

SDK_VPOX_OPENSSL2      = What you should be using.
SDK_VPOX_OPENSSL2_EXTENDS = VPOX_OPENSSL
if "$(SDK_VPOX_OPENSSL_INCS)" == "$(SDK_VPOX_OPENSSL_VPOX_DEFAULT_INCS)"
 SDK_VPOX_OPENSSL2_LIBS = $(NO_SUCH_VARIABLE)
endif

ifdef VPOX_WITH_LIBCURL
SDK_VPOX_LIBCURL       = .
SDK_VPOX_LIBCURL_INCS ?= $(PATH_ROOT)/src/libs/curl-7.64.0/include
SDK_VPOX_LIBCURL_LIBS ?= $(PATH_STAGE_LIB)/VPox-libcurl$(VPOX_SUFF_LIB)
SDK_VPOX_LIBCURL_DEFS ?= BUILDING_LIBCURL

SDK_VPOX_LIBCURL-x86           = .
SDK_VPOX_LIBCURL-x86_INCS     ?= $(PATH_ROOT)/src/libs/curl-7.64.0/include
SDK_VPOX_LIBCURL-x86_LIBS.x86 ?= $(PATH_STAGE_LIB)/VPox-libcurl-x86$(VPOX_SUFF_LIB)
SDK_VPOX_LIBCURL-x86_DEFS     ?= BUILDING_LIBCURL
endif

ifdef VPOX_WITH_LIBVPX
 SDK_VPOX_VPX       = .
 SDK_VPOX_VPX_DEFAULT_INCS := $(PATH_ROOT)/src/libs/libvpx-1.6.1
 SDK_VPOX_VPX_INCS ?= $(SDK_VPOX_VPX_DEFAULT_INCS)
 SDK_VPOX_VPX_LIBS ?= $(PATH_STAGE_LIB)/VPox-libvpx$(VPOX_SUFF_LIB)
endif

ifdef VPOX_WITH_LIBOPUS
 SDK_VPOX_OPUS       = .
 SDK_VPOX_OPUS_DEFAULT_INCS := $(PATH_ROOT)/src/libs/libopus-1.2.1/include
 SDK_VPOX_OPUS_INCS ?= $(SDK_VPOX_OPUS_DEFAULT_INCS)
 SDK_VPOX_OPUS_LIBS ?= $(PATH_STAGE_LIB)/VPox-libopus$(VPOX_SUFF_LIB)
endif

ifdef VPOX_WITH_LIBFUSE
 SDK_VPOX_FUSE               = .
 SDK_VPOX_FUSE_DEFAULT_INCS := $(PATH_ROOT)/src/libs/libfuse-2.9.8/include
 SDK_VPOX_FUSE_INCS         ?= $(SDK_VPOX_FUSE_DEFAULT_INCS)
 SDK_VPOX_FUSE_LIBS         ?= $(PATH_STAGE_LIB)/VPox-libfuse$(VPOX_SUFF_LIB)
endif

#
# Special SDK for the problematic NTDLL.LIB.
#
SDK_VPOX_NTDLL = Mini NTDLL import library, required IPRT.
SDK_VPOX_NTDLL_LIBS.x86   ?= $(PATH_STAGE_LIB)/RuntimeR3NtDll-x86.lib
SDK_VPOX_NTDLL_LIBS.amd64 ?= $(PATH_STAGE_LIB)/RuntimeR3NtDll-amd64.lib

#
# Determine Solaris version.
#
ifeq ($(KBUILD_TARGET),solaris)
 VPOX_SOLARIS_VERSION := $(expr $(KBUILD_HOST_VERSION_MAJOR) * 100 + $(KBUILD_HOST_VERSION_MINOR))
 ifeq ($(VPOX_SOLARIS_VERSION),510)
  DEFS.solaris += RT_OS_SOLARIS_10
  # Solaris 10 does not include crossbow.
  VPOX_SOLARIS_10 = 1
  # We cannot compile additions on Solaris 10, due kernel interface deps
  VPOX_WITHOUT_ADDITIONS := 1
  VPOX_WITH_ADDITIONS =
 else ifeq ($(VPOX_SOLARIS_VERSION),511)
  # OSS audio support for Solaris
  VPOX_WITH_AUDIO_OSS := 1
 endif

 # XPCOM namespace cleanup issue with Solaris GCC 4.5.2 and newer, see @bugref{5838}.
 if $(VPOX_GCC_VERSION_CXX) >= 40502
  VPOX_WITH_XPCOM_NAMESPACE_CLEANUP =
 endif
endif

#
# VPoxTpG tool.
#
TOOL_VPoxTpG = The VirtualPox Tracepoint Generator
TOOL_VPoxTpG_DTRACE_DEPORD          = $(VPOX_VPOXTPG)
TOOL_VPoxTpG_DTRACE_HDR_FLAGS      := \
		-h --host-$(VPOX_HC_ARCH_BITS)-bit #-vvv
define TOOL_VPoxTpG_DTRACE_HDR_CMDS
	$(QUIET)$(VPOX_VPOXTPG) $(if-expr $(intersects $(bld_trg_arch),$(KBUILD_ARCHES_64)),-64,-32) \
		$(flags) -o "$(out)" -s "$(source)"
endef
TOOL_VPoxTpG_DTRACE_OBJ_NOT_NEEDED :=
TOOL_VPoxTpG_DTRACE_OBJ_FLAGS      := -G --host-$(VPOX_HC_ARCH_BITS)-bit #-vvv
define TOOL_VPoxTpG_DTRACE_OBJ_CMDS
	$(QUIET)$(VPOX_VPOXTPG) --assembler "$(TOOL_$(VPOX_ASTOOL)_AS)" \
		$(if-expr $(intersects $(bld_trg_arch),$(KBUILD_ARCHES_64)),-64,-32) \
		$(flags) \
		-o "$(out)" -s "$(source)"
endef


#
# VPoxTpG tool - Disabled, only generate the header.
#
TOOL_VPoxTpG-Disabled = The VirtualPox Tracepoint Generator, disabled.
TOOL_VPoxTpG-Disabled_DTRACE_DEPORD     = $(VPOX_VPOXTPG)
TOOL_VPoxTpG-Disabled_DTRACE_HDR_FLAGS := -h
define TOOL_VPoxTpG-Disabled_DTRACE_HDR_CMDS
	$(QUIET)$(VPOX_VPOXTPG) $(flags) -o "$(out)" -s "$(source)"
endef
TOOL_VPoxTpG-Disabled_DTRACE_OBJ_NOT_NEEDED := $(KBUILD_OSES)


#
# dtrace+VPoxTpG tool for ring-3 to ring-0 pointer conversion.
#
TOOL_DTraceAndVPoxTpG = DTrace and the VirtualPox Tracepoint Generator working together on static ring-3 probes.
TOOL_DTraceAndVPoxTpG_EXTENDS = StandardDTrace
TOOL_DTraceAndVPoxTpG_DTRACE_DEPORD   = $(VPOX_VPOXTPG)
TOOL_DTraceAndVPoxTpG_DTRACE_HDR_CMDS =
define TOOL_DTraceAndVPoxTpG_DTRACE_HDR_CMDS
	$(TOOL_StandardDTrace_DTRACE_HDR_CMDS)
	$(QUIET)$(VPOX_VPOXTPG) --generate-wrapper-header --host-$(VPOX_HC_ARCH_BITS)-bit --ring-3-context \
		$(filter-out -C, $(filter-out -h,$(flags))) \
		-o "$(out).tmp" -s "$(source)"
	$(APPEND) "$(out).tmp"
	$(SED) -e 's/\(#define.*\)(arg0/\1_ORIGINAL(arg0/' --append "$(out).tmp" "$(out)"
	$(MV) -f -- "$(out).tmp" "$(out)"
endef
TOOL_DTraceAndVPoxTpG_DTRACE_OBJ_NOT_NEEDED = $(TOOL_StandardDTrace_DTRACE_OBJ_NOT_NEEDED)
TOOL_DTraceAndVPoxTpG_DTRACE_OBJ_CMDS = $(TOOL_StandardDTrace_DTRACE_OBJ_CMDS)
define TOOL_DTraceAndVPoxTpG_DTRACE_OBJ_CMDS # remove when fixed upstream
	$(QUIET)$(TOOL_StandardDTrace_DTRACE) \
		$(if-expr $(intersects $(bld_trg_arch),$(KBUILD_ARCHES_64)),-64,-32) \
		$(flags) \
		-o "$(out)" -s "$(source)" \
		$$(filter-out %-dtrace-object-format.o %.gch, $$($(target)_2_OBJS))
endef


ifdef VPOX_WITH_RAW_MODE
 #
 # Template for building RC things.
 #
 # Disabled Visual C++ warnings:
 #     -wd4505: 'iemRaisePageFaultJmp' : unreferenced local function has been removed
 #
 TEMPLATE_VPoxRc = VPox Raw-Mode Context
 TEMPLATE_VPoxRc_ASTOOL              = $(VPOX_ASTOOL)
 TEMPLATE_VPoxRc_ASFLAGS             = $(VPOX_ASFLAGS32)
 TEMPLATE_VPoxRc_DEFS                = IN_RC IPRT_NO_CRT RT_WITH_NOCRT_ALIASES $(ARCH_BITS_DEFS)
 TEMPLATE_VPoxRc_INCS                = $(PATH_ROOT)/include/iprt/nocrt
 TEMPLATE_VPoxRc_SYSSUFF             = .rc
 TEMPLATE_VPoxRc_BLD_TRG_ARCH        = x86
 TEMPLATE_VPoxRc_MODE                = a+r,u+w

 TEMPLATE_VPoxRc_USES               += dtrace
 TEMPLATE_VPoxRc_DTRACE_HDR_FLAGS    = --raw-mode-context
 TEMPLATE_VPoxRc_DTRACE_OBJ_FLAGS    = --raw-mode-context --probe-fn-name "VMMRCProbeFire"
 ifdef VPOX_WITH_DTRACE_RC
  TEMPLATE_VPoxRc_DTRACETOOL         = VPoxTpG
  TEMPLATE_VPoxRc_DEFS              += VPOX_WITH_DTRACE VPOX_WITH_DTRACE_RC
 else
  TEMPLATE_VPoxRc_DTRACETOOL         = VPoxTpG-Disabled
 endif

 ifeq ($(VPOX_LDR_FMT32),pe)
  TEMPLATE_VPoxRc_TOOL               = $(VPOX_VCC_TOOL_STEM)X86
  TEMPLATE_VPoxRc_RCDEFS             = VPOX_SVN_REV=$(VPOX_SVN_REV) VPOX_SVN_REV_MOD_5K=$(expr $(VPOX_SVN_REV) % 50000)
  TEMPLATE_VPoxRc_CXXFLAGS          = -Zi -Zl -GR- -EHs- -GF -GS- -Zc:wchar_t- -Gs8192 $(VPOX_VCC_GC_OPT) $(VPOX_VCC_GC_FP) \
  	$(VPOX_VCC_WARN_ALL) -wd4505 $(VPOX_VCC_WERR)
  TEMPLATE_VPoxRc_CFLAGS             = $(TEMPLATE_VPoxRc_CXXFLAGS)
  TEMPLATE_VPoxRc_LDFLAGS            =  -Ignore:4197 \
  	-Driver -Subsystem:NATIVE -Incremental:NO -Align:64 -MapInfo:Exports -NoD $(VPOX_VCC_LD_WERR) -Release -Debug -Opt:Ref -Opt:Icf \
  	-Version:$(VPOX_VERSION_MAJOR)0$(VPOX_VERSION_MINOR).$(VPOX_VERSION_BUILD) \
  	-Stub:$(PATH_ROOT)/src/VPox/HostDrivers/Support/win/winstub.com
  ifdef VPOX_SIGNING_MODE
   TEMPLATE_VPoxRc_LDFLAGS          += -IntegrityCheck
  endif
  TEMPLATE_VPoxRc_LIBS               = \
  	$(PATH_SDK_$(VPOX_WINDDK)_LIB.x86)/int64.lib
  TEMPLATE_VPoxRc_LIBS              += \
  	$(PATH_STAGE_LIB)/RuntimeRCStub$(VPOX_SUFF_LIB)
  TEMPLATE_VPoxRc_POST_CMDS          = $(VPOX_SIGN_IMAGE_CMDS)
  TEMPLATE_VPoxRc_ORDERDEPS          = $(VPOX_SIGN_IMAGE_CMDS_ORDERDEPS)
 endif # pe

 ifeq ($(VPOX_LDR_FMT32),elf)
 TEMPLATE_VPoxRc_TOOL                = $(VPOX_GCC32_TOOL)
 TEMPLATE_VPoxRc_CXXFLAGS            = -fno-pie -nostdinc -g $(VPOX_GCC_pipe) $(VPOX_GCC_WERR) $(VPOX_GCC_PEDANTIC_CXX) $(VPOX_GCC32_Wno-variadic-macros) -fno-exceptions $(VPOX_GCC_GC_OPT) $(VPOX_GCC_GC_FP) -mno-sse -mno-mmx -mno-sse2 -mno-3dnow -fno-strict-aliasing $(VPOX_GCC_fno-stack-protector) $(VPOX_GCC_fvisibility-hidden) $(VPOX_GCC_fvisibility-inlines-hidden) -fno-rtti $(VPOX_GCC_IPRT_FMT_CHECK)
 TEMPLATE_VPoxRc_CFLAGS              = -fno-pie -nostdinc -g $(VPOX_GCC_pipe) $(VPOX_GCC_WERR) $(VPOX_GCC_PEDANTIC_C)   $(VPOX_GCC32_Wno-variadic-macros) -fno-exceptions $(VPOX_GCC_GC_OPT) $(VPOX_GCC_GC_FP) -mno-sse -mno-mmx -mno-sse2 -mno-3dnow -fno-strict-aliasing $(VPOX_GCC_fno-stack-protector) $(VPOX_GCC_fvisibility-hidden) $(VPOX_GCC_IPRT_FMT_CHECK)
  if $(VPOX_GCC32_VERSION_CC) < 30400
   TEMPLATE_VPoxRc_DEFS             += RT_WITHOUT_PRAGMA_ONCE
  endif
  ifeq ($(KBUILD_TARGET),solaris)
   TEMPLATE_VPoxRc_LDFLAGS           = -r
  else
   TEMPLATE_VPoxRc_LDFLAGS           = -nostdlib -Bsymbolic -g
   ## @todo WTF doesn't the globals work? Debug info is supposed to be split everywhere. GRR
   TEMPLATE_VPoxRc_LD_DEBUG          = split
  endif
  ifn1of ($(KBUILD_TARGET), solaris freebsd)
   TEMPLATE_VPoxRc_LIBS               = \
	$(VPOX_GCC32_LIBGCC) # intrinsics
  endif
  if1of ($(KBUILD_TARGET),linux)
   TEMPLATE_VPoxRc_POST_CMDS         = $(if $(eq $(tool_do),LINK_SYSMOD),if readelf -S $(out)|grep -q "[cd]tors"; then echo "Found ctors/dtors in $(out)!"; exit 1; fi)
  endif
 endif

 ifeq ($(VPOX_LDR_FMT32),macho)
 TEMPLATE_VPoxRc_TOOL                = $(VPOX_GCC_TOOL)
 TEMPLATE_VPoxRc_DEFS               += $(VPOX_DARWIN_DEF_SDK_DEFS)
 TEMPLATE_VPoxRc_CXXFLAGS            = $(VPOX_DARWIN_DEF_SDK_CXXFLAGS) -m32 -nostdinc -g $(VPOX_GCC_pipe) $(VPOX_GCC_WERR) $(VPOX_GCC_PEDANTIC_CXX) $(VPOX_GCC32_Wno-variadic-macros) -fno-common -msoft-float -static $(VPOX_GCC_fno-stack-protector) -fno-exceptions $(VPOX_GCC_GC_OPT) $(VPOX_GCC_GC_FP) -fno-strict-aliasing -fno-rtti
 TEMPLATE_VPoxRc_CFLAGS              = $(VPOX_DARWIN_DEF_SDK_CFLAGS)   -m32 -nostdinc -g $(VPOX_GCC_pipe) $(VPOX_GCC_WERR) $(VPOX_GCC_PEDANTIC_C)   $(VPOX_GCC32_Wno-variadic-macros) -fno-common -msoft-float -static $(VPOX_GCC_fno-stack-protector) -fno-exceptions $(VPOX_GCC_GC_OPT) $(VPOX_GCC_GC_FP) -fno-strict-aliasing
 TEMPLATE_VPoxRc_LDFLAGS             = $(VPOX_DARWIN_DEF_SDK_LDFLAGS)  -m32 -nostdlib
 #TEMPLATE_VPoxRc_LDFLAGS.release     = -Wl,-S ???
 endif

 ifeq ($(VPOX_LDR_FMT32),lx)
 TEMPLATE_VPoxRc_TOOL                = GXX3OMF
  if $(VPOX_GCC_VERSION_CC) < 30400
   TEMPLATE_VPoxRc_DEFS             += RT_WITHOUT_PRAGMA_ONCE
  endif
 TEMPLATE_VPoxRc_CXXFLAGS            = -nostdinc -g $(VPOX_GCC_pipe) $(VPOX_GCC_WERR) $(VPOX_GCC_PEDANTIC_CXX) $(VPOX_GCC32_Wno-variadic-macros) $(VPOX_GCC_GC_OPT) $(VPOX_GCC_GC_FP) -fno-strict-aliasing -fno-exceptions -fno-rtti
 TEMPLATE_VPoxRc_CFLAGS              = -nostdinc -g $(VPOX_GCC_pipe) $(VPOX_GCC_WERR) $(VPOX_GCC_PEDANTIC_C)   $(VPOX_GCC32_Wno-variadic-macros) $(VPOX_GCC_GC_OPT) $(VPOX_GCC_GC_FP) -fno-strict-aliasing -fno-exceptions
 TEMPLATE_VPoxRc_LDFLAGS             = -Zdll -nostdlib
 TEMPLATE_VPoxRc_LIBS                = \
	$(VPOX_GCC32_LIBGCC) \
	$(VPOX_OBJ_SYS0) \
	end
 endif


 #
 # Template for building a RC ring-3 testcase (tstVMStructGC, tstDevStructGC).
 #
 TEMPLATE_VPoxRcExe = VPox Raw-Mode as ring-3 testcase
 TEMPLATE_VPoxRcExe_EXTENDS = VPoxRc
 TEMPLATE_VPoxRcExe_DEFS = $(filter-out IPRT_NO_CRT RT_WITH_NOCRT_ALIASES,$(TEMPLATE_VPoxRc_DEFS))
 TEMPLATE_VPoxRcExe_INCS = $(NO_SUCH_VARIABLE)
 TEMPLATE_VPoxRcExe_MODE = $(NO_SUCH_VARIABLE)

 ifeq ($(VPOX_LDR_FMT32),pe)
  TEMPLATE_VPoxRcExe_LDFLAGS = -Ignore:4197 \
  	-Incremental:NO -MapInfo:Exports -NoD -Debug -Opt:Ref -Opt:Icf \
  	-Version:$(VPOX_VERSION_MAJOR)0$(VPOX_VERSION_MINOR).$(VPOX_VERSION_BUILD) \
  	-Stub:$(PATH_ROOT)/src/VPox/HostDrivers/Support/win/winstub.com
  TEMPLATE_VPoxRcExe_SDKS    = ReorderCompilerIncs $(VPOX_WINPSDK)
  TEMPLATE_VPoxRcExe_LIBS    = \
  	$(PATH_TOOL_$(VPOX_VCC_TOOL_STEM)X86_LIB)/libcmt.lib \
  	$(PATH_TOOL_$(VPOX_VCC_TOOL_STEM)X86_LIB)/oldnames.lib
 endif

 ifeq ($(VPOX_LDR_FMT32),elf)
  TEMPLATE_VPoxRcExe_CFLAGS   = $(filter-out -nostdinc,$(TEMPLATE_VPoxRc_CFLAGS)) -O0
  TEMPLATE_VPoxRcExe_CXXFLAGS = $(filter-out -nostdinc,$(TEMPLATE_VPoxRc_CXXFLAGS)) -O0
  TEMPLATE_VPoxRcExe_LDFLAGS  = -g
  TEMPLATE_VPoxRcExe_LDFLAGS.dbgopt = -g
  TEMPLATE_VPoxRcExe_LDFLAGS.strict = -g
  TEMPLATE_VPoxRcExe_LDFLAGS.release = -g
  if1of ($(KBUILD_TARGET).$(KBUILD_TARGET_ARCH), freebsd.amd64)
   # The FreeBSD port of gcc isn't picking up -m32 where it should.
   TEMPLATE_VPoxRcExe_DEFS.$(KBUILD_TARGET)    = $(TEMPLATE_VPoxRc_DEFS.$(KBUILD_TARGET))    IPRT_DONT_USE_SYSTEM_STDINT_H
   TEMPLATE_VPoxRcExe_LDFLAGS.$(KBUILD_TARGET) = /usr/lib32/crt1.o /usr/lib32/crti.o /usr/lib32/crtbegin.o $(TEMPLATE_VPoxRc_LDFLAGS.$(KBUILD_TARGET)) -nostdlib -v
   TEMPLATE_VPoxRcExe_LIBPATH.$(KBUILD_TARGET) = /usr/lib32
   TEMPLATE_VPoxRcExe_LIBS.$(KBUILD_TARGET)    = /usr/lib32/crtend.o /usr/lib32/crtn.o /usr/lib32/libc.so
  endif
 endif

 ifeq ($(VPOX_LDR_FMT32),macho)
  TEMPLATE_VPoxRcExe_CFLAGS   = $(filter-out -static -nostdinc,$(TEMPLATE_VPoxRc_CFLAGS))
  TEMPLATE_VPoxRcExe_CXXFLAGS = $(filter-out -static -nostdinc,$(TEMPLATE_VPoxRc_CXXFLAGS))
  TEMPLATE_VPoxRcExe_LDFLAGS  = -g -m32
 endif

 ifeq ($(VPOX_LDR_FMT32),lx)
  TEMPLATE_VPoxRcExe_CFLAGS   = $(filter-out -nostdinc,$(TEMPLATE_VPoxRc_CFLAGS))
  TEMPLATE_VPoxRcExe_CXXFLAGS = $(filter-out -nostdinc,$(TEMPLATE_VPoxRc_CXXFLAGS))
  TEMPLATE_VPoxRcExe_LDFLAGS  = -g
  TEMPLATE_VPoxRcExe_LIBS     = $(NO_SUCH_VARIABLE)
 endif
endif # VPOX_WITH_RAW_MODE


#
# Template for building R0 things.
#
# Disabled Visual C++ warnings:
#      -wd4505: 'iemRaisePageFaultJmp' : unreferenced local function has been removed
#
TEMPLATE_VPoxR0 = VPox Ring 0
TEMPLATE_VPoxR0_ASTOOL              = $(VPOX_ASTOOL)
TEMPLATE_VPoxR0_ASFLAGS             = $(VPOX_ASFLAGS)
TEMPLATE_VPoxR0_DEFS                = IN_RING0 IN_RING0_AGNOSTIC IPRT_NO_CRT RT_WITH_NOCRT_ALIASES $(ARCH_BITS_DEFS)
TEMPLATE_VPoxR0_INCS                = $(PATH_ROOT)/include/iprt/nocrt
TEMPLATE_VPoxR0_SYSSUFF             = .r0
TEMPLATE_VPoxR0_MODE                = a+r,u+w

TEMPLATE_VPoxR0_USES               += dtrace
TEMPLATE_VPoxR0_DTRACE_HDR_FLAGS    = --ring-0-context-agnostic
TEMPLATE_VPoxR0_DTRACE_OBJ_FLAGS    = --ring-0-context-agnostic
ifdef VPOX_WITH_DTRACE_R0
 TEMPLATE_VPoxR0_DTRACETOOL         = VPoxTpG
 TEMPLATE_VPoxR0_DEFS              += VPOX_WITH_DTRACE VPOX_WITH_DTRACE_R0
else
 TEMPLATE_VPoxR0_DTRACETOOL         = VPoxTpG-Disabled
endif

ifeq ($(VPOX_LDR_FMT),pe)
TEMPLATE_VPoxR0_TOOL                = $(VPOX_VCC_TOOL)
TEMPLATE_VPoxR0_RCDEFS              = VPOX_SVN_REV=$(VPOX_SVN_REV) VPOX_SVN_REV_MOD_5K=$(expr $(VPOX_SVN_REV) % 50000)
TEMPLATE_VPoxR0_CXXFLAGS            = -Zi -Zl -GR- -EHs- -GF -GS- -Zc:wchar_t- $(VPOX_VCC_OPT) $(VPOX_VCC_FP) \
  	$(VPOX_VCC_WARN_ALL) -wd4505 $(VPOX_VCC_WERR)
TEMPLATE_VPoxR0_CFLAGS              = $(TEMPLATE_VPoxR0_CXXFLAGS)
TEMPLATE_VPoxR0_LDFLAGS             = -Ignore:4197 \
	-Driver -Subsystem:NATIVE -Incremental:NO -Align:4096 -MapInfo:Exports -NoD $(VPOX_VCC_LD_WERR) -Release -Debug -Opt:Ref -Opt:Icf \
	-Version:$(VPOX_VERSION_MAJOR)0$(VPOX_VERSION_MINOR).$(VPOX_VERSION_BUILD) \
	-Stub:$(PATH_ROOT)/src/VPox/HostDrivers/Support/win/winstub.com
 ifdef VPOX_WITH_DTRACE_R0
TEMPLATE_VPoxR0_LDFLAGS            += -Merge:VTGPrLc.Data=VTGPrLc.Begin -Merge:VTGPrLc.End=VTGPrLc.Begin -Merge:VTGPrLc.Begin=VTGObj
 endif
 ifdef VPOX_SIGNING_MODE
  TEMPLATE_VPoxR0_LDFLAGS          += -IntegrityCheck
 endif
TEMPLATE_VPoxR0_LIBS                = \
	$(PATH_STAGE_LIB)/RuntimeR0Stub$(VPOX_SUFF_LIB)
 include $(KBUILD_PATH)/sdks/$(VPOX_WINDDK).kmk ## TODO: Add a kBuild feature for loading SDKs.
TEMPLATE_VPoxR0_LIBS.x86            = \
	$(PATH_SDK_$(VPOX_WINDDK)_LIB.x86)/int64.lib
TEMPLATE_VPoxR0_ORDERDEPS           = $(VPOX_SIGN_DRIVER_ORDERDEPS)
TEMPLATE_VPoxR0_POST_CMDS           = $(VPOX_SIGN_DRIVER_CMDS)
endif # pe

ifeq ($(VPOX_LDR_FMT),elf)
TEMPLATE_VPoxR0_TOOL                = $(VPOX_GCC_TOOL)
TEMPLATE_VPoxR0_CFLAGS              = -fno-pie -nostdinc -g $(VPOX_GCC_pipe) $(VPOX_GCC_WERR) $(VPOX_GCC_PEDANTIC_C) \
	$(VPOX_GCC_Wno-variadic-macros) $(VPOX_GCC_R0_OPT) $(VPOX_GCC_R0_FP) -fno-strict-aliasing -fno-exceptions \
	$(VPOX_GCC_fno-stack-protector) -fno-common -ffreestanding $(VPOX_GCC_fvisibility-hidden) -std=gnu99 $(VPOX_GCC_IPRT_FMT_CHECK)
TEMPLATE_VPoxR0_CXXFLAGS            = -fno-pie -nostdinc -g $(VPOX_GCC_pipe) $(VPOX_GCC_WERR) $(VPOX_GCC_PEDANTIC_CXX) \
	$(VPOX_GCC_Wno-variadic-macros) $(VPOX_GCC_R0_OPT) $(VPOX_GCC_R0_FP) -fno-strict-aliasing -fno-exceptions \
	$(VPOX_GCC_fno-stack-protector) -fno-common $(VPOX_GCC_fvisibility-inlines-hidden) $(VPOX_GCC_fvisibility-hidden) \
	-fno-rtti $(VPOX_GCC_IPRT_FMT_CHECK)
 if $(VPOX_GCC_VERSION_CC) >= 40500 # 4.1.2 complains, 4.5.2 is okay, didn't check which version inbetween made it okay with g++.
TEMPLATE_VPoxR0_CXXFLAGS           += -ffreestanding
 endif
TEMPLATE_VPoxR0_CFLAGS.amd64        = -m64 -mno-red-zone -mno-sse -mno-mmx -mno-sse2 -mno-3dnow -fasynchronous-unwind-tables -ffreestanding
TEMPLATE_VPoxR0_CXXFLAGS.amd64      = -m64 -mno-red-zone -mno-sse -mno-mmx -mno-sse2 -mno-3dnow -fasynchronous-unwind-tables
TEMPLATE_VPoxR0_CXXFLAGS.freebsd    = -ffreestanding
 if $(VPOX_GCC_VERSION_CC) < 30400
  TEMPLATE_VPoxR0_DEFS             += RT_WITHOUT_PRAGMA_ONCE
 endif
 ifeq ($(KBUILD_TARGET),solaris)
 TEMPLATE_VPoxR0_LDFLAGS            = -r
 TEMPLATE_VPoxR0_LDFLAGS.solaris    = -u _init -u _info
 TEMPLATE_VPoxR0_LIBS.solaris       = \
	$(PATH_STAGE_LIB)/RuntimeR0Stub$(VPOX_SUFF_LIB)
 ifdef VPOX_GCC_USING_SOLARIS_AS
  TEMPLATE_VPoxR0_CFLAGS.amd64 += -Wa,-xmodel=kernel
  TEMPLATE_VPoxR0_CXXFLAGS.amd64 += -Wa,-xmodel=kernel
 endif
 # Solaris driver signing.
 TEMPLATE_VPoxR0_POST_CMDS          = $(VPOX_SIGN_DRIVER_CMDS)
 else
 TEMPLATE_VPoxR0_LDFLAGS            = -nostdlib -Bsymbolic -g
 ## @todo WTF doesn't the globals work? Debug info is supposed to be split everywhere. GRR
 TEMPLATE_VPoxR0_LD_DEBUG           = split
 endif
 if1of ($(KBUILD_TARGET), linux)
VPOX_WITH_VPOXR0_AS_DLL = 1
TEMPLATE_VPoxR0_DLLSUFF             = .r0
TEMPLATE_VPoxR0_CFLAGS             += -fPIC
TEMPLATE_VPoxR0_CXXFLAGS           += -fPIC
TEMPLATE_VPoxR0_LDFLAGS            +=
TEMPLATE_VPoxR0_DTRACE_HDR_FLAGS   += --pic
TEMPLATE_VPoxR0_DTRACE_OBJ_FLAGS   += --pic
 else
TEMPLATE_VPoxR0_CFLAGS.amd64       += -mcmodel=kernel
TEMPLATE_VPoxR0_CXXFLAGS.amd64     += -mcmodel=kernel
 endif
 ifn1of ($(KBUILD_TARGET),solaris freebsd)
 TEMPLATE_VPoxR0_LIBS               = \
	$(VPOX_GCC_LIBGCC) # intrinsics
 endif
 if1of ($(KBUILD_TARGET),linux)
 TEMPLATE_VPoxR0_POST_CMDS         += $(NLTAB)\
 	$(if $(eq $(tool_do),LINK_SYSMOD),if readelf -S $(out)|grep -q "[cd]tors"; then echo "Found ctors/dtors in $(out)!"; exit 1; fi)
 endif
endif # elf

ifeq ($(VPOX_LDR_FMT),macho)
TEMPLATE_VPoxR0_TOOL                = $(VPOX_GCC_TOOL)
TEMPLATE_VPoxR0_DEFS               += $(VPOX_DARWIN_DEF_SDK_DEFS)
TEMPLATE_VPoxR0_CXXFLAGS            = $(VPOX_DARWIN_DEF_SDK_CXXFLAGS) -nostdinc -g $(VPOX_GCC_pipe) $(VPOX_GCC_WERR) $(VPOX_GCC_PEDANTIC_CXX) $(VPOX_GCC_Wno-variadic-macros) \
	-fno-common -msoft-float -static -fno-rtti -fno-exceptions $(VPOX_GCC_R0_OPT) $(VPOX_GCC_R0_FP) -fno-strict-aliasing \
	-mno-sse -mno-mmx -mno-sse2 -mno-3dnow $(VPOX_GCC_fno-stack-protector)
TEMPLATE_VPoxR0_CXXFLAGS.amd64      = -m64 -mno-red-zone -mno-sse3 -mno-sse4 -mno-sse4.1 -mno-sse4.2  -mno-sse4a -fno-unwind-tables
TEMPLATE_VPoxR0_CXXFLAGS.x86        = -m32
TEMPLATE_VPoxR0_CFLAGS              = $(VPOX_DARWIN_DEF_SDK_CFLAGS)   -nostdinc -g $(VPOX_GCC_pipe) $(VPOX_GCC_WERR) $(VPOX_GCC_PEDANTIC_C)   $(VPOX_GCC_Wno-variadic-macros) \
	-fno-common -msoft-float -static -fno-exceptions $(VPOX_GCC_R0_OPT) $(VPOX_GCC_R0_FP) -fno-strict-aliasing \
	-mno-sse -mno-mmx -mno-sse2 -mno-3dnow $(VPOX_GCC_fno-stack-protector)
TEMPLATE_VPoxR0_CFLAGS.amd64        = -m64 -mno-red-zone -mno-sse3 -mno-sse4 -mno-sse4.1 -mno-sse4.2  -mno-sse4a -fno-unwind-tables
TEMPLATE_VPoxR0_CFLAGS.x86          = -m32
TEMPLATE_VPoxR0_LDFLAGS             = $(VPOX_DARWIN_DEF_SDK_LDFLAGS) -nostdlib
TEMPLATE_VPoxR0_LDFLAGS.amd64       = -m64 -static
TEMPLATE_VPoxR0_LDFLAGS.x86         = -m32
TEMPLATE_VPoxR0_CXXFLAGS.amd64     += -mkernel
TEMPLATE_VPoxR0_CFLAGS.amd64       += -mkernel
TEMPLATE_VPoxR0_LDFLAGS            += -Wl,-kext -mkernel
TEMPLATE_VPoxR0_POST_CMDS           = $(if $(eq $(tool_do),LINK_LIBRARY),,$(call VPOX_SIGN_VMM_MOD_FN,$(out),org.virtualpox.app.r0.$(target)))
endif

ifeq ($(VPOX_LDR_FMT),lx)
TEMPLATE_VPoxR0_TOOL                = GXX3OMF
TEMPLATE_VPoxR0_CFLAGS              = -nostdinc -g $(VPOX_GCC_pipe) $(VPOX_GCC_WERR) $(VPOX_GCC_PEDANTIC_C)   $(VPOX_GCC_Wno-variadic-macros) $(VPOX_GCC_R0_OPT) $(VPOX_GCC_R0_FP) -fno-strict-aliasing -fno-exceptions -fno-common
TEMPLATE_VPoxR0_CXXFLAGS            = -nostdinc -g $(VPOX_GCC_pipe) $(VPOX_GCC_WERR) $(VPOX_GCC_PEDANTIC_CXX) $(VPOX_GCC_Wno-variadic-macros) $(VPOX_GCC_R0_OPT) $(VPOX_GCC_R0_FP) -fno-strict-aliasing -fno-exceptions -fno-common -fno-rtti
 if $(VPOX_GCC_VERSION_CC) < 30400
TEMPLATE_VPoxR0_DEFS               += RT_WITHOUT_PRAGMA_ONCE
 endif
TEMPLATE_VPoxR0_LDFLAGS             = -nostdlib -Zdll
TEMPLATE_VPoxR0_LIBS                = \
	$(VPOX_GCC_LIBGCC) \
	$(VPOX_OBJ_SYS0) \
	end
endif


#
# Template for building SUPDRV R0 things.
#
# Disabled Visual C++ warnings:
#     -wd4996: deprecated / insecure.
#     -wd4127: conditional expression is constant [level 4]
#     -wd4201: nonstandard extension used : nameless struct/union [level 4]
#     -wd4214: nonstandard extension used : bit field types other than int [level 4]
#     -wd4706: assignment within conditional expression [level 4]
#     -wd4324: '_TDI_PNP_CONTEXT_XP' : structure was padded due to __declspec(align())
#
#     -wd4100: 'identifier' : unreferenced formal parameter [level 4] --- TODO: Enable this one!
#
TEMPLATE_VPOXR0DRV                     = VPox SUPDRV Ring 0
TEMPLATE_VPOXR0DRV_ASTOOL              = $(VPOX_ASTOOL)
TEMPLATE_VPOXR0DRV_ASFLAGS             = $(VPOX_ASFLAGS)
TEMPLATE_VPOXR0DRV_DEFS                = IN_RING0 IN_RT_R0 $(ARCH_BITS_DEFS)
TEMPLATE_VPOXR0DRV_USES               += dtrace
ifdef VPOX_WITH_DTRACE_R0DRV
 TEMPLATE_VPOXR0DRV_DTRACETOOL         = VPoxTpG
 TEMPLATE_VPOXR0DRV_DEFS              += VPOX_WITH_DTRACE VPOX_WITH_DTRACE_R0DRV
 ifdef VPOX_WITH_NATIVE_DTRACE
  TEMPLATE_VPOXR0DRV_DEFS             += VPOX_WITH_NATIVE_DTRACE
 endif
else
 TEMPLATE_VPOXR0DRV_DTRACETOOL         = VPoxTpG-Disabled
endif

ifeq ($(KBUILD_TARGET),win)
 TEMPLATE_VPOXR0DRV_TOOL               = $(VPOX_VCC_TOOL)
 TEMPLATE_VPOXR0DRV_RCDEFS             = VPOX_SVN_REV=$(VPOX_SVN_REV) VPOX_SVN_REV_MOD_5K=$(expr $(VPOX_SVN_REV) % 50000)
 TEMPLATE_VPOXR0DRV_DEFS.x86           = _X86_
 TEMPLATE_VPOXR0DRV_DEFS.x86          += NO_INTERLOCKED_INTRINSICS # Avoids intrisic VC/WDK trouble
 TEMPLATE_VPOXR0DRV_DEFS.x86          += WIN9X_COMPAT_SPINLOCK     # Avoid multiply defined _KeInitializeSpinLock@4
 TEMPLATE_VPOXR0DRV_DEFS.amd64         = _AMD64_
 TEMPLATE_VPOXR0DRV_DEFS.win           = IPRT_NT_MAP_TO_ZW
 TEMPLATE_VPOXR0DRV_CXXFLAGS           = -Zi -Zl -GR- -EHs- -GF -Gz -GS- -Zc:wchar_t- $(VPOX_VCC_FP) -Gs4096 $(VPOX_VCC_OPT) \
	$(VPOX_VCC_WARN_ALL) $(VPOX_VCC_WERR)
 TEMPLATE_VPOXR0DRV_CFLAGS             = $(TEMPLATE_VPOXR0DRV_CXXFLAGS)
 TEMPLATE_VPOXR0DRV_LDFLAGS            = -Ignore:4197 \
 	-Driver -Subsystem:NATIVE -Incremental:NO -Align:4096 -MapInfo:Exports -NoD -Release -Debug -Opt:Ref -Opt:Icf \
	-Version:$(VPOX_VERSION_MAJOR)0$(VPOX_VERSION_MINOR).$(VPOX_VERSION_BUILD) \
	-Stub:$(PATH_ROOT)/src/VPox/HostDrivers/Support/win/winstub.com
 ifdef VPOX_WITH_DTRACE_R0DRV
  TEMPLATE_VPOXR0DRV_LDFLAGS          += -Merge:VTGPrLc.Data=VTGPrLc.Begin -Merge:VTGPrLc.End=VTGPrLc.Begin -Merge:VTGPrLc.Begin=VTGObj
 endif
 ifdef VPOX_SIGNING_MODE
  TEMPLATE_VPOXR0DRV_LDFLAGS          += -IntegrityCheck
 endif
 TEMPLATE_VPOXR0DRV_ORDERDEPS          = $(VPOX_SIGN_DRIVER_ORDERDEPS)
 TEMPLATE_VPOXR0DRV_POST_CMDS          = $(VPOX_SIGN_DRIVER_CMDS)
endif

ifeq ($(KBUILD_TARGET),linux)
 TEMPLATE_VPOXR0DRV_TOOL                = $(NO_SUCH_VARIABLE)

 ifndef KERN_DIR
  ifndef KERN_VER
   KERN_VER := $(patsubst /lib/modules/%/build/.config,%,$(firstword $(shell LC_ALL=C ls -t /lib/modules/*/build/.config 2>/dev/null)))
  endif
  ifeq ($(KERN_VER),)
   KERN_VER := $(shell uname -r)
  endif
  KERN_DIR  := /lib/modules/$(KERN_VER)/build
 endif

 ##
 ## Generates a rule for test-building a linux kernel module (use evalcall2 to invoke).
 ##
 ## Since Linux KBuild will not abort due to undefined symbols when building
 ## external modules we need to grep the error output ourselves.  Since vpoxdrv
 ## and vpoxguest respectively provide symbols that other modules use, we use
 ## the rule target (tst*.run) to save those symbols so that KBuild can do its
 ## checking.
 ##
 ## @param 1    Module name.
 ## @param 2    The test build which symvers we need (empty if none)
 ## @param 3    Save symvers if non-empty.
 ##
 ## @note Using the extra expansion to replace $(1), $(2) and $(3) before eval,
 ##       thus everything else needs escaped dollars.
 ##
 if   defined(VPOX_WITH_TESTCASES) \
  && "$(KBUILD_HOST)" == "linux" \
  && "$(KBUILD_HOST_ARCH)" == "$(KBUILD_TARGET_ARCH)" \
  && !defined(VPOX_WITHOUT_LINUX_TEST_BUILDS) \
  && !defined(VPOX_ONLY_SDK) \
  && !defined(VPOX_ONLY_DOCS) \
  && !defined(VPOX_ONLY_VALIDATIONKIT)
  define VPOX_LINUX_KMOD_TEST_BUILD_RULE_FN
   ifneq ($(KERN_DIR),)
TESTING      += $$(PATH_TARGET)/tst$(1)$(subst /,_,$(KERN_DIR))_mod.run
OTHERS       += $$(PATH_TARGET)/tst$(1)$(subst /,_,$(KERN_DIR))_mod.run
OTHERS_CLEAN += $$(PATH_TARGET)/tst$(1)$(subst /,_,$(KERN_DIR))_mod.run
$$(PATH_TARGET)/tst$(1)$(subst /,_,$(KERN_DIR))_mod.run: \
		$$(if $(2),$$(PATH_TARGET)/tst$(2)$(subst /,_,$(KERN_DIR))_mod.run,) \
		$$$$($(1)_2_STAGE_TARGETS)
	$(QUIET)$$(call MSG_L1,Doing a test build of the $(1) kernel module)
	$(QUIET)$$(RM) -f    -- "$$@"
	$(QUIET)$$(TEST) -n "$$($(1)_INST)"
	$(QUIET)$$(RM) -Rf   -- "$$(PATH_TARGET)/tst$(1)_mod"
	$(QUIET)$$(MKDIR) -p -- "$$(PATH_TARGET)/tst$(1)_mod"
	$(QUIET)$$(CP) -R    -- "$$(PATH_STAGE_BIN)/../$$($(1)_INST)" "$$(PATH_TARGET)/tst$(1)_mod/"
	+ $(QUIET)make KBUILD_VERBOSE=$(KBUILD_VERBOSE) KERN_DIR=$(KERN_DIR) VPOX_KERN_QUIET=1 \
		KBUILD_TYPE= KBUILD_TARGET= KBUILD_TARGET_ARCH= KBUILD_HOST= KBUILD_HOST_ARCH= \
			KBUILD_TYPE= KBUILD_TARGET= KBUILD_TARGET_ARCH= KBUILD_TARGET_CPU= KBUILD_HOST= KBUILD_HOST_ARCH= KBUILD_HOST_CPU= \
			BUILD_TYPE= BUILD_TARGET= BUILD_TARGET_ARCH= BUILD_TARGET_CPU= BUILD_PLATFORM= BUILD_PLATFORM_ARCH= BUILD_PLATFORM_CPU= \
		-C $$(PATH_TARGET)/tst$(1)_mod clean
   ifneq ($(2),)
	$(QUIET)$$(CP) -f    -- "$$<" "$$(PATH_TARGET)/tst$(1)_mod/Module.symvers"
   endif
	+ $(QUIET)$(REDIRECT_EXT) -d2=1 -w1 "$$(PATH_TARGET)/tst$(1)_mod/make.err" -- \
		make KBUILD_VERBOSE=$(KBUILD_VERBOSE) KERN_DIR=$(KERN_DIR) VPOX_KERN_QUIET=1 $(if $(2),KBUILD_EXTRA_SYMBOLS="$$(PATH_TARGET)/tst$(1)_mod/Module.symvers",) $(if-expr $(KMK_OPTS_JOBS) != 0,JOBS=$(KMK_OPTS_JOBS),) \
			VPOX_KBUILD_TYPE=$(KBUILD_TYPE) VPOX_KBUILD_TARGET_ARCH=$(KBUILD_TARGET_ARCH) \
			KBUILD_TYPE= KBUILD_TARGET= KBUILD_TARGET_ARCH= KBUILD_TARGET_CPU= KBUILD_HOST= KBUILD_HOST_ARCH= KBUILD_HOST_CPU= \
			BUILD_TYPE= BUILD_TARGET= BUILD_TARGET_ARCH= BUILD_TARGET_CPU= BUILD_PLATFORM= BUILD_PLATFORM_ARCH= BUILD_PLATFORM_CPU= \
			-C $$(PATH_TARGET)/tst$(1)_mod
	$(CAT) "$$(PATH_TARGET)/tst$(1)_mod/make.err"
	$(QUIET)! grep "^WARNING: .* undefined!$$$$" "$$(PATH_TARGET)/tst$(1)_mod/make.err"
   if1of ($(USERNAME), bird)
	- nm -u "$$(PATH_TARGET)/tst$(1)_mod/"*.ko | sort
   endif
   ifneq ($(3),)
	$(QUIET)$$(CP) -f    -- "$$(PATH_TARGET)/tst$(1)_mod/Module.symvers" "$$@"
   else
	$(QUIET)$$(APPEND) -t "$$@" "done"
   endif
	$(QUIET)$$(RM) -Rf   -- "$$(PATH_TARGET)/tst$(1)_mod"
vpox-linux-kmod-test-builds: $$(PATH_TARGET)/tst$(1)$(subst /,_,$(KERN_DIR))_mod.run
$$(foreach src,$$(notdir $$(filter %.c,$$(subst =>,/,$$($(1)_SOURCES)))),$$(patsubst %.c,%.o,$$(src))): $$(PATH_TARGET)/tst$(1)$(subst /,_,$(KERN_DIR))_mod.run
  endif
 endef # VPOX_LINUX_KMOD_TEST_BUILD_RULE_FN
 else
  VPOX_LINUX_KMOD_TEST_BUILD_RULE_FN =
 endif
else
  VPOX_LINUX_KMOD_TEST_BUILD_RULE_FN =
endif # linux target

ifeq ($(KBUILD_TARGET),os2)
 ifndef VPOX_USE_WATCOM_FOR_OS2
TEMPLATE_VPOXR0DRV_TOOL                = GXX3OMF
TEMPLATE_VPOXR0DRV_CXXFLAGS            = -g $(VPOX_GCC_pipe) $(VPOX_GCC_PEDANTIC_CXX) $(VPOX_GCC_Wno-variadic-macros) $(VPOX_GCC_R0_OPT) $(VPOX_GCC_R0_FP) -fno-strict-aliasing -fno-exceptions -fno-rtti
TEMPLATE_VPOXR0DRV_CFLAGS              = -g $(VPOX_GCC_pipe) $(VPOX_GCC_PEDANTIC_C)   $(VPOX_GCC_Wno-variadic-macros) $(VPOX_GCC_R0_OPT) $(VPOX_GCC_R0_FP) -fno-strict-aliasing -fno-exceptions
TEMPLATE_VPOXR0DRV_LIBS                = $(VPOX_GCC_LIBGCC)
# wlink thinks physdevice doesn't need fixups and should have a stack - stupid!
TEMPLATE_VPOXR0DRV_LDFLAGS             = -Zlinker Option -Zlinker internalrelocs, -Zlinker togglerelocs
  else
TEMPLATE_VPOXR0DRV_TOOL     = OPENWATCOM
TEMPLATE_VPOXR0DRV_CTOOL    = OPENWATCOM
TEMPLATE_VPOXR0DRV_CXXTOOL  = OPENWATCOM
TEMPLATE_VPOXR0DRV_LDTOOL   = OPENWATCOM-WL
TEMPLATE_VPOXR0DRV_ARTOOL   = OPENWATCOM
TEMPLATE_VPOXR0DRV_ASTOOL   = NASM
TEMPLATE_VPOXR0DRV_ASFLAGS  = -fobj -DASM_FORMAT_OMF -D__NASM__ -w+orphan-labels #-g -F borland
TEMPLATE_VPOXR0DRV_DEFS.os2 = #_OS2EMX_H
TEMPLATE_VPOXR0DRV_INCS     = \
	$(PATH_TOOL_OPENWATCOM)/h \
	$(PATH_TOOL_OPENWATCOM)/h/os2 \
	$(PATH_ROOT)/include \
	$(PATH_KLIBC_TRUNK)/libc/include # for os2ddk
TEMPLATE_VPOXR0DRV_CFLAGS   = -s -ze -w4 -hd -d1+ -nt=TEXT32 -nc=CODE -4 -of+
TEMPLATE_VPOXR0DRV_CXXFLAGS = -s -ze -w4 -hd -d2t -nt=TEXT32 -nc=CODE -4 -of+
TEMPLATE_VPOXR0DRV_LDFLAGS  = \
	form os2 lx physdevice \
	option NODefaultlibs, internalrelocs, togglerelocs \
	debug dwarf all #option symfile
#	debug codeview all option symfile - wlink generates bad info, overwritten mod dir header.
 endif
endif

ifeq ($(KBUILD_TARGET),darwin)
TEMPLATE_VPOXR0DRV_TOOL                = $(VPOX_GCC_TOOL)
TEMPLATE_VPOXR0DRV_DEFS               += $(VPOX_DARWIN_DEF_SDK_DEFS) KERNEL KERNEL_PRIVATE DRIVER_PRIVATE APPLE NeXT
 ifdef VPOX_WITH_NEW_XCODE # Note xcode uses -fstrict-aliasing, we currently don't dare... We also add -mno-red-zone.
TEMPLATE_VPOXR0DRV_INCS               += \
	$(VPOX_PATH_MACOSX_SDK)/System/Library/Frameworks/Kernel.framework/PrivateHeaders \
	$(VPOX_PATH_MACOSX_SDK)/System/Library/Frameworks/Kernel.framework/Headers
## @todo try use VPOX_GCC_PEDANTIC_CXX
# -Wno-c++11-extensions -Wno-c99-extensions -Wno-extra-semi -Wno-zero-length-array
TEMPLATE_VPOXR0DRV_CXXFLAGS            = $(VPOX_DARWIN_DEF_SDK_CXXFLAGS) -mkernel \
	-g $(VPOX_GCC_pipe) $(VPOX_GCC_PEDANTIC_CXX) -Wno-long-long $(VPOX_GCC_fdiagnostics-show-option) \
	-Wno-c++11-extensions -Wno-c99-extensions -Wno-extra-semi -Wno-zero-length-array \
	-Wno-gnu-zero-variadic-macro-arguments -Wno-four-char-constants \
	-fno-common -nostdinc -fno-builtin $(VPOX_GCC_fvisibility-inlines-hidden) $(VPOX_GCC_fvisibility-hidden) \
	-fno-exceptions -msoft-float -fapple-kext -fno-rtti -mkernel \
	-fmodules -fmodules-prune-interval=86400 -fmodules-prune-after=345600 -Wnon-modular-include-in-framework-module \
	-Werror=non-modular-include-in-framework-module \
	$(VPOX_GCC_R0_OPT) $(VPOX_GCC_R0_FP) -fasm-blocks -fno-strict-aliasing -stdlib=libc++
# also used by xcode 6.2: \
# -Werror=return-type \
# -Werror=deprecated-objc-isa-usage \
# -Werror=objc-root-class \
# -Wno-missing-field-initializers -Wno-missing-prototypes -Wunreachable-code \
# -Wno-overloaded-virtual -Wno-exit-time-destructors -Wno-missing-braces -Wparentheses -Wswitch -Wunused-function \
# -Wno-unused-label -Wno-unused-parameter -Wunused-variable -Wunused-value -Wempty-body \
# -Wconditional-uninitialized -Wno-unknown-pragmas -Wno-shadow -Wno-four-char-constants \
# -Wno-conversion -Wconstant-conversion -Wint-conversion -Wbool-conversion -Wenum-conversion \
# -Wshorten-64-to-32 -Wno-newline-eof -Wno-c++11-extensions -Wdeprecated-declarations -Winvalid-offsetof -Wno-sign-conversion
TEMPLATE_VPOXR0DRV_CXXFLAGS.amd64      = -m64 -mno-red-zone
TEMPLATE_VPOXR0DRV_CXXFLAGS.x86        = -m32
TEMPLATE_VPOXR0DRV_CFLAGS              = $(VPOX_DARWIN_DEF_SDK_CFLAGS) -mkernel \
	-g $(VPOX_GCC_pipe) $(VPOX_GCC_PEDANTIC_C) -Wno-long-long $(VPOX_GCC_fdiagnostics-show-option) \
	-fno-common -nostdinc -fno-builtin $(VPOX_GCC_fvisibility-inlines-hidden) $(VPOX_GCC_fvisibility-hidden) \
	-fno-exceptions -msoft-float -fapple-kext -fno-rtti  \
	-fmodules -fmodules-prune-interval=86400 -fmodules-prune-after=345600 -Wnon-modular-include-in-framework-module \
	-Werror=non-modular-include-in-framework-module \
	$(VPOX_GCC_R0_OPT) $(VPOX_GCC_R0_FP) -fasm-blocks -fno-strict-aliasing
TEMPLATE_VPOXR0DRV_CFLAGS.amd64        = -m64 -mno-red-zone
TEMPLATE_VPOXR0DRV_CFLAGS.x86          = -m32
  if 1
   TEMPLATE_VPOXR0DRV_CFLAGS          += $(VPOX_GCC_WERR)
   TEMPLATE_VPOXR0DRV_CXXFLAGS        += $(VPOX_GCC_WERR)
  endif
TEMPLATE_VPOXR0DRV_LDFLAGS             =  $(filter-out $(VPOX_DARWIN_NO_COMPACT_LINKEDIT),$(VPOX_DARWIN_DEF_SDK_LDFLAGS)) \
	-nostdlib -stdlib=libc++ -Wl,-kext -Wl,-keep_private_externs
TEMPLATE_VPOXR0DRV_LDFLAGS.amd64       = -m64
TEMPLATE_VPOXR0DRV_LDFLAGS.x86         = -m32
TEMPLATE_VPOXR0DRV_LIBS                = kmodc++ kmod cc_kext
 else
TEMPLATE_VPOXR0DRV_INCS               += \
	$(VPOX_PATH_MACOSX_SDK)/System/Library/Frameworks/Kernel.framework/PrivateHeaders \
	$(VPOX_PATH_MACOSX_SDK)/System/Library/Frameworks/Kernel.framework/Headers
## @todo try use VPOX_GCC_PEDANTIC_CXX
TEMPLATE_VPOXR0DRV_CXXFLAGS            = $(VPOX_DARWIN_DEF_SDK_CXXFLAGS) \
	-g $(VPOX_GCC_pipe) $(VPOX_GCC_WARN) -Wno-long-long $(VPOX_GCC_fdiagnostics-show-option) \
	-fno-common -nostdinc -fno-builtin -finline $(VPOX_GCC_fvisibility-inlines-hidden) $(VPOX_GCC_fvisibility-hidden) \
	-fno-keep-inline-functions -fno-exceptions -msoft-float \
	-fapple-kext -fno-rtti -fcheck-new -force_cpusubtype_ALL \
	$(VPOX_GCC_R0_OPT) $(VPOX_GCC_R0_FP) -fno-strict-aliasing -fasm-blocks
TEMPLATE_VPOXR0DRV_CXXFLAGS.amd64      = -m64 -mkernel -mno-red-zone -gdwarf-2
TEMPLATE_VPOXR0DRV_CXXFLAGS.x86        = -m32 -static
TEMPLATE_VPOXR0DRV_CFLAGS              = $(VPOX_DARWIN_DEF_SDK_CFLAGS) \
	-g $(VPOX_GCC_pipe) $(VPOX_GCC_WARN) -Wno-long-long -fno-common -nostdinc -fno-builtin -finline \
	-fno-keep-inline-functions -fno-exceptions $(VPOX_GCC_fvisibility-hidden) -msoft-float \
	-Wmissing-prototypes -Wstrict-prototypes -Wmissing-declarations \
	-Werror-implicit-function-declaration -force_cpusubtype_ALL \
	$(VPOX_GCC_R0_OPT) $(VPOX_GCC_R0_FP) -fno-strict-aliasing -fasm-blocks
TEMPLATE_VPOXR0DRV_CFLAGS.amd64        = -m64 -mkernel -mno-red-zone -gdwarf-2
TEMPLATE_VPOXR0DRV_CFLAGS.x86          = -m32 -static
TEMPLATE_VPOXR0DRV_LDFLAGS             =  $(filter-out $(VPOX_DARWIN_NO_COMPACT_LINKEDIT),$(VPOX_DARWIN_DEF_SDK_LDFLAGS)) \
	-nostdlib -Wl,-kext,-new_linker -Wl,-Y,1455 -keep_private_extern
TEMPLATE_VPOXR0DRV_LDFLAGS.amd64       = -m64
TEMPLATE_VPOXR0DRV_LDFLAGS.x86         = -m32
TEMPLATE_VPOXR0DRV_LIBS                = kmodc++ kmod cc_kext cpp_kext $(VPOX_GCC_LIBGCC)
 endif
endif

ifeq ($(KBUILD_TARGET),solaris)
## The Solaris /usr/platform/i86pc/include and /usr/include directories.
VPOX_SOLARIS_SYS_INCS ?= /usr/platform/i86pc/include /usr/include

TEMPLATE_VPOXR0DRV_TOOL                = $(VPOX_GCC_TOOL)
TEMPLATE_VPOXR0DRV_DEFS               += _MACHDEP _KERNEL _STRICT_STDC
 if $(VPOX_GCC_VERSION_CC) < 30400
TEMPLATE_VPOXR0DRV_DEFS               += RT_WITHOUT_PRAGMA_ONCE
 endif
TEMPLATE_VPOXR0DRV_INCS                = $(VPOX_SOLARIS_SYS_INCS)
TEMPLATE_VPOXR0DRV_LDFLAGS             = -r -dy
TEMPLATE_VPOXR0DRV_LDFLAGS.amd64       = $(if $(eq $(KBUILD_HOST),solaris),-64,-m elf_x86_64)
# Exclude -Wall because of solaris headers' pragma ident warnings that gcc refuses to supress.
TEMPLATE_VPOXR0DRV_CFLAGS              = -Wpointer-arith -Winline $(VPOX_GCC_Wno-pointer-sign) \
	-Wmissing-prototypes -Wstrict-prototypes $(VPOX_GCC_fdiagnostics-show-option) \
	-Wshadow -Wuninitialized -Wunused-function -Wunused-label -Wunused-value -Wunused-variable \
	-Wformat  -Wimplicit-int -Wimplicit-function-declaration -Werror-implicit-function-declaration -Wparentheses \
	-O2 -fno-omit-frame-pointer -ffreestanding -nodefaultlibs -fno-strict-aliasing -fno-common -std=c99
TEMPLATE_VPOXR0DRV_CFLAGS.x86          = -m32 -mno-sse -mno-mmx -mno-sse2 -mno-3dnow
TEMPLATE_VPOXR0DRV_CFLAGS.amd64        = -m64 -mno-sse -mno-mmx -mno-sse2 -mno-3dnow $(VPOX_GCC_msave-args) \
	-mno-red-zone -mcmodel=kernel $(if-expr defined(VPOX_GCC_USING_SOLARIS_AS),-Wa$(COMMA)-xmodel=kernel,) \
	-fno-reorder-blocks -fno-asynchronous-unwind-tables -funit-at-a-time
TEMPLATE_VPOXR0DRV_CXXFLAGS           = -Wpointer-arith -Winline \
	-Wshadow -Wuninitialized -Wunused-function -Wunused-label -Wunused-value -Wunused-variable \
	-Wformat \
	-O2 -nodefaultlibs -fno-omit-frame-pointer -fno-strict-aliasing -fno-common -fno-exceptions -fno-rtti
TEMPLATE_VPOXR0DRV_CXXFLAGS.x86       = $(TEMPLATE_VPOXR0DRV_CFLAGS.x86)
TEMPLATE_VPOXR0DRV_CXXFLAGS.amd64     = $(TEMPLATE_VPOXR0DRV_CFLAGS.amd64)
TEMPLATE_VPOXR0DRV_POST_CMDS          = $(VPOX_SIGN_DRIVER_CMDS)
endif # Solaris

ifeq ($(KBUILD_TARGET),freebsd)
# x86 FreeBSD (6.2 or something):
#  cc -O2 -fno-strict-aliasing -pipe -Werror -D_KERNEL -DKLD_MODULE \
#   -nostdinc -I- -I. -I@ -I@/contrib/altq -I@/../include -I/usr/include \
#   -finline-limit=8000 -fno-common -mno-align-long-strings -mpreferred-stack-boundary=2 \
#   -mno-mmx -mno-3dnow -mno-sse -mno-sse2 -ffreestanding -Wall -Wredundant-decls -Wnested-externs \
#   -Wstrict-prototypes -Wmissing-prototypes -Wpointer-arith -Winline -Wcast-qual -fformat-extensions \
#   -std=c99 -c ../my.c
#  ld -d -warn-common -r -d -o my.kld my.o
#  :> export_syms
#  awk -f /usr/src/sys/modules/my/../../conf/kmod_syms.awk my.kld export_syms | xargs -J% objcopy % my.kld
#  ld -Bsharable -d warn-commnon -o my.ko my.kld
#
# AMD64 FreeBSD (7.1):
#  cc -O2 -fno-strict-aliasing -pipe -D_KERNEL -DKLD_MODULE -std=c99 -nostdinc -I. -I@ -I@/contrib/altq \
#  -finline-limit=8000 --param inline-unit-growth=100 --param large-function-growth=1000 -fno-common  \
#  -fno-omit-frame-pointer -mcmodel=kernel -mno-red-zone -mfpmath=387 -mno-sse -mno-sse2 -mno-mmx \
#  -mno-3dnow -msoft-float -fno-asynchronous-unwind-tables -ffreestanding \
#  -Wall -Wredundant-decls -Wnested-externs -Wstrict-prototypes -Wmissing-prototypes -Wpointer-arith -Winline -Wcast-qual -Wundef -Wno-pointer-sign \
#  -fformat-extensions -c /usr/src/sys/modules/my/../../dev/my/if_my.c
#  ld  -d -warn-common -r -d -o if_my.ko if_my.o
#  :> export_syms
#  awk -f /usr/src/sys/modules/my/../../conf/kmod_syms.awk if_my.ko  export_syms | xargs -J% objcopy % if_my.ko

# Note: @ -> /usr/src/sys  and  machine -> /usr/src/sys/i386/include

## The location of the FreeBSD kernel source.
VPOX_FREEBSD_SRC ?= /usr/src/sys
## The FreeBSD /usr/include.
VPOX_FREEBSD_SYS_INCS ?= /usr/include

TEMPLATE_VPOXR0DRV_TOOL                = $(VPOX_GCC_TOOL)
TEMPLATE_VPOXR0DRV_LDTOOL              = FREEBSDKMODLD
TEMPLATE_VPOXR0DRV_DEFS               += _KERNEL KLD_MODULE
 if $(VPOX_GCC_VERSION_CC) < 30400
TEMPLATE_VPOXR0DRV_DEFS               += RT_WITHOUT_PRAGMA_ONCE
 endif
TEMPLATE_VPOXR0DRV_INCS                = \
	$(VPOX_FREEBSD_SRC) \
	$(VPOX_FREEBSD_SRC)/contrib/altq \
	$(VPOX_FREEBSD_SRC)/contrib/ck/include \
	$(VPOX_FREEBSD_SRC)/../include \
	$(VPOX_FREEBSD_SYS_INCS)
# omitting: -Wcast-qual, -Wredundant-decls
TEMPLATE_VPOXR0DRV_CFLAGS              =  \
	$(VPOX_GCC_WARN) -Wpointer-arith -Winline $(VPOX_GCC_Wno-pointer-sign) $(VPOX_GCC_fdiagnostics-show-option) \
	-Wstrict-prototypes -Wmissing-prototypes -Wstrict-prototypes \
	-Wimplicit-function-declaration -Werror-implicit-function-declaration \
	-O2 -ffreestanding -fno-strict-aliasing -fno-common \
	$(VPOX_GCC_fno-stack-protector) $(VPOX_GCC_R0_OPT) $(VPOX_GCC_R0_FP) \
	-nostdinc -std=c99
TEMPLATE_VPOXR0DRV_CFLAGS.x86          = -m32 -mno-align-long-strings -mno-mmx -mno-3dnow -mno-sse -mno-sse2
TEMPLATE_VPOXR0DRV_CFLAGS.amd64        = -m64 -fno-omit-frame-pointer -mcmodel=kernel -mno-red-zone -mfpmath=387 \
	-mno-sse -mno-sse2 -mno-mmx -mno-3dnow -msoft-float -fno-asynchronous-unwind-tables -Wundef
TEMPLATE_VPOXR0DRV_CXXFLAGS            = -fno-exceptions -fno-rtti \
	$(VPOX_GCC_WARN) -Wpointer-arith -Winline \
	-O2 -fno-strict-aliasing -fno-common \
	$(VPOX_GCC_fno-stack-protector) $(VPOX_GCC_R0_OPT) $(VPOX_GCC_R0_FP) \
	-nostdinc
TEMPLATE_VPOXR0DRV_CXXFLAGS.x86        = $(TEMPLATE_VPOXR0DRV_CFLAGS.x86)
TEMPLATE_VPOXR0DRV_CXXFLAGS.amd64      = $(TEMPLATE_VPOXR0DRV_CFLAGS.amd64)
TEMPLATE_VPOXR0DRV_SYSSUFF             = .ko
TEMPLATE_VPOXR0DRV_LDFLAGS             = -d --warn-common
TEMPLATE_VPOXR0DRV_LDFLAGS.x86         = -m elf_i386_fbsd
TEMPLATE_VPOXR0DRV_LDFLAGS.amd64       = -m elf_x86_64_fbsd

TOOL_FREEBSDKMODLD = FreeBSD kernel module linker.
# See kBuild/tools/GCC3.kmk for docs.
TOOL_FREEBSDKMODLD_LINK_SYSMOD_OUTPUT_MAYBE = $(outbase).map
TOOL_FREEBSDKMODLD_LINK_SYSMOD_DEPEND = $(foreach lib,$(libs),$(if $(findstring $(lib),$(subst /,x,$(lib))),, $(lib)))
TOOL_FREEBSDKMODLD_LINK_SYSMOD_DEPORD =
 ifeq ($(KBUILD_TARGET_ARCH),amd64)
TOOL_FREEBSDKMODLD_LINK_SYSMOD_OUTPUT =
define TOOL_FREEBSDKMODLD_LINK_SYSMOD_CMDS
# Link intermediate .kld (a relocatable object).
	ld $(flags) -r -o  $(out) $(objs) \
		$(foreach p,$(libpath), -L$(p))\
		$(foreach lib,$(libs), $(if $(findstring $(lib),$(subst /,x,$(lib))), -l$(patsubst lib%,%,$(basename $(lib))), $(lib)))
# Strip non-exported symbols private and localize the exported ones.
	awk -f $(VPOX_FREEBSD_SRC)/conf/kmod_syms.awk  $(out) $(if $(othersrc), $(othersrc),/dev/null) \
		| xargs -J% objcopy % $(out)

## Strip debug info (comment out if debugging or something).
	objcopy --strip-debug $(out)
endef
 else # x86
TOOL_FREEBSDKMODLD_LINK_SYSMOD_OUTPUT = $(outbase).kld
define TOOL_FREEBSDKMODLD_LINK_SYSMOD_CMDS
# Link intermediate .kld (a relocatable object).
	ld $(flags) -r -o $(outbase).kld $(objs) \
		$(foreach p,$(libpath), -L$(p))\
		$(foreach lib,$(libs), $(if $(findstring $(lib),$(subst /,x,$(lib))), -l$(patsubst lib%,%,$(basename $(lib))), $(lib)))
# Strip non-exported symbols private and localize the exported ones.
	awk -f $(VPOX_FREEBSD_SRC)/conf/kmod_syms.awk $(outbase).kld $(if $(othersrc), $(othersrc),/dev/null) \
		| xargs -J% objcopy % $(outbase).kld

# Link the final .ko (a shared object).
	ld $(flags) -Bshareable -o $(out) $(outbase).kld
endef
 endif # x86

endif # FreeBSD

ifeq ($(KBUILD_TARGET),netbsd)

# The location of the NetBSD sources.
VPOX_NETBSD_SRC ?= /usr/src

# NetBSD uses "i386" for 32-bit, "x86" for common 32- and 64-bit code.
ifeq ($(KBUILD_TARGET_ARCH),amd64)
VPOX_NETBSD_TARGET_ARCH=amd64
else
VPOX_NETBSD_TARGET_ARCH=i386
endif

VPOX_NETBSD_TARGET_SRC=$(VPOX_NETBSD_SRC)/sys/arch/$(VPOX_NETBSD_TARGET_ARCH)

TEMPLATE_VPOXR0DRV_TOOL                = $(VPOX_GCC_TOOL)
TEMPLATE_VPOXR0DRV_DEFS               += _KERNEL _MODULE
 if $(VPOX_GCC_VERSION_CC) < 30400
TEMPLATE_VPOXR0DRV_DEFS               += RT_WITHOUT_PRAGMA_ONCE
 endif
TEMPLATE_VPOXR0DRV_INCS                = \
	$(VPOX_NETBSD_SRC)/sys \
	$(VPOX_NETBSD_SRC)/common/include \
	$(PATH_OBJ)/netbsd/include

TEMPLATE_VPOXR0DRV_CFLAGS              =  \
	$(VPOX_GCC_WARN) -Wpointer-arith -Winline $(VPOX_GCC_Wno-pointer-sign) \
	$(VPOX_GCC_fdiagnostics-show-option) \
	-Wstrict-prototypes -Wmissing-prototypes -Wstrict-prototypes \
	-Wimplicit-function-declaration -Werror-implicit-function-declaration \
	-O2 -ffreestanding -fno-strict-aliasing -fno-common -finline-limit=8000 \
	$(VPOX_GCC_fno-stack-protector) $(VPOX_GCC_R0_OPT) $(VPOX_GCC_R0_FP) \
	-nostdinc -std=c99 -msoft-float
TEMPLATE_VPOXR0DRV_CFLAGS.x86          = -m32 -mno-mmx -mno-sse -mno-avx \
    -mno-fp-ret-in-387
TEMPLATE_VPOXR0DRV_CFLAGS.amd64        = -m64 --param inline-unit-growth=100 \
    --param large-function-growth=1000 -fno-omit-frame-pointer \
    -mcmodel=kernel -mno-red-zone -mno-sse -mno-mmx -mno-avx \
	-fno-asynchronous-unwind-tables -mno-fp-ret-in-387
TEMPLATE_VPOXR0DRV_CXXFLAGS            = -fno-exceptions -fno-rtti \
	$(VPOX_GCC_WARN) -Wpointer-arith -Winline \
	-O2 -fno-strict-aliasing -fno-common -finline-limit=8000 \
	$(VPOX_GCC_fno-stack-protector) $(VPOX_GCC_R0_OPT) $(VPOX_GCC_R0_FP) \
	-nostdinc -msoft-float
TEMPLATE_VPOXR0DRV_CXXFLAGS.x86        = $(TEMPLATE_VPOXR0DRV_CFLAGS.x86)
TEMPLATE_VPOXR0DRV_CXXFLAGS.amd64      = $(TEMPLATE_VPOXR0DRV_CFLAGS.amd64)
TEMPLATE_VPOXR0DRV_SYSSUFF             = .kmod
TEMPLATE_VPOXR0DRV_LDFLAGS             = -d --warn-common
TEMPLATE_VPOXR0DRV_LDFLAGS.x86         = -m elf_i386
TEMPLATE_VPOXR0DRV_LDFLAGS.amd64       = -m elf_x86_64

# symlink kernel includes
TEMPLATE_VPOXR0DRV_ORDERDEPS += \
	$(PATH_OBJ)/netbsd/include/$(VPOX_NETBSD_TARGET_ARCH) \
	$(PATH_OBJ)/netbsd/include/x86 \
	$(PATH_OBJ)/netbsd/include/machine

$$(PATH_OBJ)/netbsd/include/$(VPOX_NETBSD_TARGET_ARCH):
	$(QUIET)$(MKDIR) -p $(@D)
	$(QUIET)$(LN_SYMLINK) $(VPOX_NETBSD_TARGET_SRC)/include $@

$$(PATH_OBJ)/netbsd/include/x86:
	$(QUIET)$(MKDIR) -p $(@D)
	$(QUIET)$(LN_SYMLINK) $(VPOX_NETBSD_SRC)/sys/arch/x86/include $@

$$(PATH_OBJ)/netbsd/include/machine:
	$(QUIET)$(MKDIR) -p $(@D)
	$(QUIET)$(LN_SYMLINK) $(VPOX_NETBSD_TARGET_ARCH) $@

endif # NetBSD

ifeq ($(KBUILD_TARGET),haiku)
## The Haiku include directories
VPOX_HAIKU_SYS_INCS ?= /boot/develop/headers/os/kernel /boot/develop/headers/os/drivers

TEMPLATE_VPOXR0DRV_TOOL                = $(VPOX_GCC_TOOL)
TEMPLATE_VPOXR0DRV_LDTOOL              = $(VPOX_GCC_TOOL)
TEMPLATE_VPOXR0DRV_DEFS                = _KERNEL_MODE=1 _STRICT_STDC IN_RING0 IN_RT_R0
 if $(VPOX_GCC_VERSION_CC) < 30400
TEMPLATE_VPOXR0DRV_DEFS               += RT_WITHOUT_PRAGMA_ONCE
 endif
TEMPLATE_VPOXR0DRV_INCS                = $(VPOX_HAIKU_SYS_INCS)
#TODO: sort this out
TEMPLATE_VPOXR0DRV_LDFLAGS             = -shared $(VPOX_GCC_NO_UNDEFINED_R0) -dc -dy -lroot -rpath-link /boot/system/develop/lib/x86 --no-add-needed /boot/system/develop/lib/_KERNEL_ --no-add-needed /boot/system/develop/lib/haiku_version_glue.o
TEMPLATE_VPOXR0DRV_CFLAGS              = -fno-PIC \
	$(VPOX_GCC_WARN) -Wstrict-prototypes $(VPOX_GCC_Wno-pointer-sign) -Wno-sign-compare \
	$(VPOX_GCC_fno-stack-protector) $(VPOX_GCC_R0_OPT) $(VPOX_GCC_R0_FP) -fno-strict-aliasing -fno-common -Werror-implicit-function-declaration
TEMPLATE_VPOXR0DRV_CFLAGS.x86          = -mno-sse -mno-mmx -mno-sse2 -mno-3dnow
TEMPLATE_VPOXR0DRV_CFLAGS.x86          = -m32 -mno-sse -mno-mmx -mno-sse2 -mno-3dnow
TEMPLATE_VPOXR0DRV_CFLAGS.amd64        = -m64 -mno-sse -mno-mmx -mno-sse2 -mno-3dnow \
	-fno-reorder-blocks -ffreestanding -fno-asynchronous-unwind-tables -funit-at-a-time \
	-Wno-sign-compare
TEMPLATE_VPOXR0DRV_CXXFLAGS           = -fno-PIC -Wpointer-arith \
	-Wshadow -Wuninitialized -Wunused-function -Wunused-label -Wunused-value -Wunused-variable \
	-Wformat \
	-O2 -nodefaultlibs -fno-omit-frame-pointer -fno-strict-aliasing -fno-common -fno-exceptions -fno-rtti
TEMPLATE_VPOXR0DRV_CXXFLAGS.x86       = $(TEMPLATE_VPOXR0DRV_CFLAGS.x86) -fno-exceptions -fno-rtti
TEMPLATE_VPOXR0DRV_CXXFLAGS.amd64     = $(TEMPLATE_VPOXR0DRV_CFLAGS.amd64) -fno-exceptions -fno-rtti
endif # Haiku

ifdef VPOX_WITH_VPOXDRV
 ifndef TEMPLATE_VPOXR0DRV_TOOL
  $(warning Warning: VPox Build: Target $(KBUILD_HOST) is not officially supported!)
 endif
endif

ifn1of ($(KBUILD_TARGET), darwin os2 win solaris freebsd)
 # This doesn't work if supdrv is natively loading VMMR0.r0 et al, but
 # fortunately it isn't really necessary.
 TEMPLATE_VPOXR0DRV_CFLAGS    += -include $(PATH_ROOT)/include/VPox/SUPDrvMangling.h
 TEMPLATE_VPOXR0DRV_CXXFLAGS  += -include $(PATH_ROOT)/include/VPox/SUPDrvMangling.h
endif

#
# Template for building libraries used by ring-0 drivers.
#
TEMPLATE_VPoxR0DrvLib = VPox Ring 0 Driver Library
TEMPLATE_VPoxR0DrvLib_EXTENDS = VPOXR0DRV
TEMPLATE_VPoxR0DrvLib_INSTTYPE = stage
TEMPLATE_VPoxR0DrvLib_INSTTYPE.linux = stage

#
# Template for installing INF and CAT files.
#
TEMPLATE_VPoxR0DrvInfCat      = VPox SUPDRV Ring 0 - Install .sys, .cat, .inf
TEMPLATE_VPoxR0DrvInfCat_INST = $(INST_BIN)
TEMPLATE_VPoxR0DrvInfCat_MODE = a+r,u+w
TEMPLATE_VPoxR0DrvInfCat_IFFLAGS = --no-hard-link-files-when-possible


#
# Template for building R3 executables and static libraries which are linked into executables.
# Note! This is the base template for a whole lot of other ones, so be careful when changing it.
#
# Disabled Visual C++ warnings:
#      -wd4065: switch statement contains 'default' but no 'case' labels
#      -wd4244: 'conversion' conversion from 'type1' to 'type2', possible loss of data
#      -wd4996: deprecated / insecure.
#
TEMPLATE_VPOXR3EXE                     = VPox Ring 3 Exe
TEMPLATE_VPOXR3EXE_ASTOOL              = $(VPOX_ASTOOL)
TEMPLATE_VPOXR3EXE_ASFLAGS.x86         = $(VPOX_ASFLAGS32)
TEMPLATE_VPOXR3EXE_ASFLAGS.amd64       = $(VPOX_ASFLAGS64)
TEMPLATE_VPOXR3EXE_DEFS                = IN_RING3 $(VPOX_GC_ARCH_BITS_DEFS)
TEMPLATE_VPOXR3EXE_DEFS.x86            = HC_ARCH_BITS=32
TEMPLATE_VPOXR3EXE_DEFS.arm32          = HC_ARCH_BITS=32
TEMPLATE_VPOXR3EXE_DEFS.sparc32        = HC_ARCH_BITS=32
TEMPLATE_VPOXR3EXE_DEFS.amd64          = HC_ARCH_BITS=64
TEMPLATE_VPOXR3EXE_DEFS.arm64          = HC_ARCH_BITS=64
TEMPLATE_VPOXR3EXE_DEFS.sparc64        = HC_ARCH_BITS=64
TEMPLATE_VPOXR3EXE_DEFS.win            = _CRT_SECURE_NO_DEPRECATE
TEMPLATE_VPOXR3EXE_USES                = dtrace
if defined(VPOX_WITH_DTRACE_R3) && defined(VPOX_WITH_NATIVE_DTRACE)
 TEMPLATE_VPOXR3EXE_DTRACETOOL         = DTraceAndVPoxTpG
 TEMPLATE_VPOXR3EXE_DTRACE_OBJ_FLAGS   = -C
 TEMPLATE_VPOXR3EXE_DTRACE_HDR_FLAGS   = -C
 TEMPLATE_VPOXR3EXE_DEFS              += VPOX_WITH_DTRACE VPOX_WITH_DTRACE_R3 VPOX_WITH_NATIVE_DTRACE
else
  TEMPLATE_VPOXR3EXE_DTRACE_HDR_FLAGS  = --ring-3-context
  TEMPLATE_VPOXR3EXE_DTRACE_OBJ_FLAGS  = --ring-3-context --pic --probe-fn-imported --probe-fn-name "SUPTracerFireProbe"
 if defined(VPOX_WITH_DTRACE_R3)
  TEMPLATE_VPOXR3EXE_DTRACETOOL        = VPoxTpG
  TEMPLATE_VPOXR3EXE_DEFS             += VPOX_WITH_DTRACE VPOX_WITH_DTRACE_R3
 else
  TEMPLATE_VPOXR3EXE_DTRACETOOL        = VPoxTpG-Disabled
 endif
endif
TEMPLATE_VPOXR3EXE_LIBS.kprofile       = $(LIB_KPROFILE)
ifeq ($(KBUILD_TARGET),win)
# TEMPLATE_VPOXR3EXE_TOOL               = $(VPOX_VCC_TOOL)
 TEMPLATE_VPOXR3EXE_TOOL.win.x86       = $(VPOX_VCC_TOOL_STEM)X86
 TEMPLATE_VPOXR3EXE_TOOL.win.amd64     = $(VPOX_VCC_TOOL_STEM)AMD64
 TEMPLATE_VPOXR3EXE_RCDEFS             = VPOX_SVN_REV=$(VPOX_SVN_REV) VPOX_SVN_REV_MOD_5K=$(expr $(VPOX_SVN_REV) % 50000)
 TEMPLATE_VPOXR3EXE_SDKS               = ReorderCompilerIncs $(VPOX_WINPSDK)
 TEMPLATE_VPOXR3EXE_CXXFLAGS           = -Zi -Zl -GR- -EHsc -GF -MD$(VPOX_VCC_CRT_TYPE) -Zc:wchar_t- $(VPOX_VCC_OPT) $(VPOX_VCC_FP) \
 	$(VPOX_VCC_WARN_ALL) $(VPOX_VCC_WERR)
 TEMPLATE_VPOXR3EXE_CXXFLAGS.debug     = -RTCsu
 TEMPLATE_VPOXR3EXE_CXXFLAGS.dbgopt    = $(NO_SUCH_VARIABLE)
 TEMPLATE_VPOXR3EXE_CXXFLAGS.kprofile  = -Gh -GH
 TEMPLATE_VPOXR3EXE_CFLAGS             = $(TEMPLATE_VPOXR3EXE_CXXFLAGS)
 TEMPLATE_VPOXR3EXE_CFLAGS.debug       = $(TEMPLATE_VPOXR3EXE_CXXFLAGS.debug)
 TEMPLATE_VPOXR3EXE_CFLAGS.dbgopt      = $(TEMPLATE_VPOXR3EXE_CXXFLAGS.dbgopt)
 TEMPLATE_VPOXR3EXE_CFLAGS.kprofile    = $(TEMPLATE_VPOXR3EXE_CXXFLAGS.kprofile)
 TEMPLATE_VPOXR3EXE_PCHFLAGS           = $(TEMPLATE_VPOXR3EXE_CXXFLAGS)
 TEMPLATE_VPOXR3EXE_PCHFLAGS.debug     = $(TEMPLATE_VPOXR3EXE_CXXFLAGS.debug)
 TEMPLATE_VPOXR3EXE_PCHFLAGS.dbgopt    = $(TEMPLATE_VPOXR3EXE_CXXFLAGS.dbgopt)
 TEMPLATE_VPOXR3EXE_PCHFLAGS.kprofile  = $(TEMPLATE_VPOXR3EXE_CXXFLAGS.kprofile)
 TEMPLATE_VPOXR3EXE_LDFLAGS            = -Ignore:4197 \
	/NOD /INCREMENTAL:NO /MAPINFO:EXPORTS /LargeAddressAware /DynamicBase /NxCompat /Release /Debug /Opt:Ref /Opt:Icf \
	/Version:$(VPOX_VERSION_MAJOR)0$(VPOX_VERSION_MINOR).$(VPOX_VERSION_BUILD) \
	/STUB:$(PATH_ROOT)/src/VPox/HostDrivers/Support/win/winstub.com \
	/DISALLOWLIB:libc.lib \
	/DISALLOWLIB:libcd.lib \
	/DISALLOWLIB:libcmt.lib \
	/DISALLOWLIB:libcmtd.lib \
	/DISALLOWLIB:msvcrt$(VPOX_VCC_CRT_TYPE_N).lib \
	/DISALLOWLIB:msvcprt$(VPOX_VCC_CRT_TYPE_N).lib
 ifdef VPOX_WITH_DTRACE_R3
  TEMPLATE_VPOXR3EXE_LDFLAGS          += -Merge:VTGPrLc.Data=VTGPrLc.Begin -Merge:VTGPrLc.End=VTGPrLc.Begin -Merge:VTGPrLc.Begin=VTGObj
 endif
 if defined(VPOX_SIGNING_MODE) && defined(VPOX_WITH_HARDENING)
   TEMPLATE_VPOXR3EXE_LDFLAGS         += -IntegrityCheck
 endif

 TEMPLATE_VPOXR3EXE_LIBS.x86           = \
 	$(PATH_TOOL_$(TEMPLATE_VPOXR3EXE_TOOL.win.x86)_LIB)/msvcrt$(VPOX_VCC_CRT_TYPE).lib \
 	$(PATH_TOOL_$(TEMPLATE_VPOXR3EXE_TOOL.win.x86)_LIB)/msvcprt$(VPOX_VCC_CRT_TYPE).lib \
 	$(PATH_TOOL_$(TEMPLATE_VPOXR3EXE_TOOL.win.x86)_LIB)/oldnames.lib
 TEMPLATE_VPOXR3EXE_LIBS.amd64         = \
 	$(PATH_TOOL_$(TEMPLATE_VPOXR3EXE_TOOL.win.amd64)_LIB)/msvcrt$(VPOX_VCC_CRT_TYPE).lib \
 	$(PATH_TOOL_$(TEMPLATE_VPOXR3EXE_TOOL.win.amd64)_LIB)/msvcprt$(VPOX_VCC_CRT_TYPE).lib \
 	$(PATH_TOOL_$(TEMPLATE_VPOXR3EXE_TOOL.win.amd64)_LIB)/oldnames.lib
 TEMPLATE_VPOXR3EXE_POST_CMDS          = $(VPOX_SIGN_IMAGE_CMDS)
 TEMPLATE_VPOXR3EXE_ORDERDEPS          = $(VPOX_SIGN_IMAGE_CMDS_ORDERDEPS)
 if defined(VPOX_WITH_MORE_NT4_COMPAT_BINARIES) && "$(KBUILD_TARGET).$(KBUILD_TARGET_ARCH)" == "win.x86"
  TEMPLATE_VPOXR3EXE_POST_CMDS.win.x86 = $(if $(eq $(tool_do),LINK_LIBRARY),,$(VPOX_PE_SET_VERSION) $(out)$$(NLTAB)$(TEMPLATE_VPOXR3EXE_POST_CMDS))
  TEMPLATE_VPOXR3EXE_LNK_DEPS.win.x86  = $(if $(eq $(tool_do),LINK_LIBRARY),,$(VPOX_PE_SET_VERSION))
  TEMPLATE_VPOXR3EXE_LDFLAGS.win.x86   = \
  	-Include:_vcc100_kernel32_fakes_cpp \
	-Include:_vcc100_kernel32_fakes_asm
  TEMPLATE_VPOXR3EXE_LIBS.win.x86      = \
  	$(PATH_STAGE_LIB)/RuntimeR3VccTricks2$(VPOX_SUFF_LIB)
  TEMPLATE_VPOXR3EXE_LIBS.x86          = \
  	$(PATH_TOOL_$(TEMPLATE_VPOXR3EXE_TOOL.win.x86)_LIB)/oldnames.lib \
  	$(PATH_TOOL_$(TEMPLATE_VPOXR3EXE_TOOL.win.x86)_LIB)/libcmt$(VPOX_VCC_CRT_TYPE).lib \
  	$(PATH_TOOL_$(TEMPLATE_VPOXR3EXE_TOOL.win.x86)_LIB)/libcpmt$(VPOX_VCC_CRT_TYPE).lib
 endif

else # the gcc guys
TEMPLATE_VPOXR3EXE_TOOL                = $(VPOX_GCC_TOOL)
 if $(VPOX_GCC_VERSION_CC) < 30400
TEMPLATE_VPOXR3EXE_DEFS               += RT_WITHOUT_PRAGMA_ONCE
 endif
TEMPLATE_VPOXR3EXE_CXXFLAGS            = -g $(VPOX_GCC_pipe) $(VPOX_GCC_PEDANTIC_CXX) $(VPOX_GCC_Wno-variadic-macros) $(VPOX_GCC_OPT) \
 	$(VPOX_GCC_FP) -fno-strict-aliasing $(VPOX_GCC_fvisibility-hidden) $(VPOX_GCC_fvisibility-inlines-hidden) $(VPOX_GCC_IPRT_FMT_CHECK)
 ifdef VPOX_WITH_NO_GCC_WARNING_POLICY
  TEMPLATE_VPOXR3EXE_CXXFLAGS         += $(VPOX_GCC_WERR)
 endif
TEMPLATE_VPOXR3EXE_CXXFLAGS.x86        = -m32
TEMPLATE_VPOXR3EXE_CXXFLAGS.amd64      = -m64
TEMPLATE_VPOXR3EXE_CXXFLAGS.sparc32    = -m32
TEMPLATE_VPOXR3EXE_CXXFLAGS.sparc64    = -m64
TEMPLATE_VPOXR3EXE_CXXFLAGS.kprofile   = -finstrument-functions
TEMPLATE_VPOXR3EXE_CXXFLAGS.debug      = $(VPOX_GCC_SANITIZER_FLAGS)
TEMPLATE_VPOXR3EXE_CFLAGS              = -g $(VPOX_GCC_pipe) $(VPOX_GCC_PEDANTIC_C)   $(VPOX_GCC_Wno-variadic-macros) $(VPOX_GCC_OPT) $(VPOX_GCC_FP) -fno-strict-aliasing $(VPOX_GCC_fvisibility-hidden) $(VPOX_GCC_IPRT_FMT_CHECK)
 ifdef VPOX_WITH_NO_GCC_WARNING_POLICY
  TEMPLATE_VPOXR3EXE_CFLAGS           += $(VPOX_GCC_WERR)
 endif
TEMPLATE_VPOXR3EXE_CFLAGS.x86          = $(TEMPLATE_VPOXR3EXE_CXXFLAGS.x86)
TEMPLATE_VPOXR3EXE_CFLAGS.amd64        = $(TEMPLATE_VPOXR3EXE_CXXFLAGS.amd64)
TEMPLATE_VPOXR3EXE_CFLAGS.sparc32      = $(TEMPLATE_VPOXR3EXE_CXXFLAGS.sparc32)
TEMPLATE_VPOXR3EXE_CFLAGS.sparc64      = $(TEMPLATE_VPOXR3EXE_CXXFLAGS.sparc64)
TEMPLATE_VPOXR3EXE_CFLAGS.debug        = $(TEMPLATE_VPOXR3EXE_CXXFLAGS.debug)
TEMPLATE_VPOXR3EXE_CFLAGS.kprofile     = $(TEMPLATE_VPOXR3EXE_CXXFLAGS.kprofile)
TEMPLATE_VPOXR3EXE_OBJCFLAGS           = $(TEMPLATE_VPOXR3EXE_CFLAGS)
TEMPLATE_VPOXR3EXE_OBJCFLAGS.x86       = $(TEMPLATE_VPOXR3EXE_CFLAGS.x86)
TEMPLATE_VPOXR3EXE_OBJCFLAGS.amd64     = $(TEMPLATE_VPOXR3EXE_CFLAGS.amd64)
TEMPLATE_VPOXR3EXE_OBJCFLAGS.debug     = $(TEMPLATE_VPOXR3EXE_CFLAGS.debug)
TEMPLATE_VPOXR3EXE_OBJCFLAGS.kprofile  = $(TEMPLATE_VPOXR3EXE_CFLAGS.kprofile)
TEMPLATE_VPOXR3EXE_OBJCXXFLAGS         = $(TEMPLATE_VPOXR3EXE_CXXFLAGS)
TEMPLATE_VPOXR3EXE_OBJCXXFLAGS.x86     = $(TEMPLATE_VPOXR3EXE_CXXFLAGS.x86)
TEMPLATE_VPOXR3EXE_OBJCXXFLAGS.amd64   = $(TEMPLATE_VPOXR3EXE_CXXFLAGS.amd64)
TEMPLATE_VPOXR3EXE_OBJCXXFLAGS.debug   = $(TEMPLATE_VPOXR3EXE_CXXFLAGS.debug)
TEMPLATE_VPOXR3EXE_OBJCXXFLAGS.kprofile= $(TEMPLATE_VPOXR3EXE_CXXFLAGS.kprofile)
TEMPLATE_VPOXR3EXE_PCHFLAGS            = $(TEMPLATE_VPOXR3EXE_CXXFLAGS)
TEMPLATE_VPOXR3EXE_PCHFLAGS.x86        = $(TEMPLATE_VPOXR3EXE_CXXFLAGS.x86)
TEMPLATE_VPOXR3EXE_PCHFLAGS.amd64      = $(TEMPLATE_VPOXR3EXE_CXXFLAGS.amd64)
TEMPLATE_VPOXR3EXE_PCHFLAGS.debug      = $(TEMPLATE_VPOXR3EXE_CXXFLAGS.debug)
TEMPLATE_VPOXR3EXE_PCHFLAGS.kprofile   = $(TEMPLATE_VPOXR3EXE_CXXFLAGS.kprofile)
TEMPLATE_VPOXR3EXE_LDFLAGS.x86         = -m32
TEMPLATE_VPOXR3EXE_LDFLAGS.amd64       = -m64
TEMPLATE_VPOXR3EXE_LDFLAGS.sparc32     = -m32
TEMPLATE_VPOXR3EXE_LDFLAGS.sparc64     = -m64
TEMPLATE_VPOXR3EXE_LDFLAGS.linux       = -Wl,-z,noexecstack,-z,relro $(VPOX_LD_as_needed)
TEMPLATE_VPOXR3EXE_LDFLAGS.solaris     = -Wl,-z,ignore # same as VPOX_LD_as_needed
TEMPLATE_VPOXR3EXE_LDFLAGS.debug       = $(VPOX_GCC_SANITIZER_FLAGS) $(VPOX_GCC_SANITIZER_LDFLAGS)

 ifeq ($(KBUILD_TARGET),linux)
TEMPLATE_VPOXR3EXE_LIBS                = pthread m rt dl
 else ifeq ($(KBUILD_TARGET),os2)
TEMPLATE_VPOXR3EXE_TOOL                = GXX3OMF
TEMPLATE_VPOXR3EXE_LIBS                = socket iconv
 else ifeq ($(KBUILD_TARGET),darwin)
TEMPLATE_VPOXR3EXE_TOOL                = $(VPOX_GCC_TOOL)
TEMPLATE_VPOXR3EXE_LIBS                =
TEMPLATE_VPOXR3EXE_DEFS.darwin         = $(VPOX_DARWIN_DEF_SDK_DEFS)
TEMPLATE_VPOXR3EXE_CFLAGS.darwin       = $(VPOX_DARWIN_DEF_SDK_CFLAGS) -fno-common
TEMPLATE_VPOXR3EXE_CXXFLAGS.darwin     = $(VPOX_DARWIN_DEF_SDK_CXXFLAGS)
TEMPLATE_VPOXR3EXE_PCHFLAGS.darwin     = $(VPOX_DARWIN_DEF_SDK_CXXFLAGS)
TEMPLATE_VPOXR3EXE_OBJCFLAGS.darwin    = $(VPOX_DARWIN_DEF_SDK_OBJCFLAGS)
TEMPLATE_VPOXR3EXE_OBJCXXFLAGS.darwin  = $(VPOX_DARWIN_DEF_SDK_OBJCXXFLAGS)
TEMPLATE_VPOXR3EXE_LDFLAGS.darwin      = $(VPOX_DARWIN_DEF_SDK_LDFLAGS)
TEMPLATE_VPOXR3EXE_LDFLAGS.darwin.x86  = -read_only_relocs suppress
  ifdef VPOX_WITH_DTRACE_R3
   TEMPLATE_VPOXR3EXE_CXXFLAGS := $(filter-out -pedantic,$(TEMPLATE_VPOXR3EXE_CXXFLAGS)) -fdollars-in-identifiers # annoying gcc option precedence.
  endif
 else ifeq ($(KBUILD_TARGET),haiku)
TEMPLATE_VPOXR3EXE_TOOL                = GXX3
TEMPLATE_VPOXR3EXE_POST_CMDS          = $(VPOX_HAIKU_XRES_SETVER_CMDS)
TEMPLATE_VPOXR3EXE_LIBS                = network iconv stdc++ supc++
TEMPLATE_VPOXR3EXE_LIBPATH            += \
	/boot/common/lib
# Haiku uses PIC by default...
TEMPLATE_VPOXR3EXE_CFLAGS             += -fno-pic
TEMPLATE_VPOXR3EXE_CXXFLAGS           += -fno-pic
TEMPLATE_VPOXR3EXE_LDFLAGS            += -fno-pic
 else if1of ($(KBUILD_TARGET), freebsd openbsd)
TEMPLATE_VPOXR3EXE_TOOL                = GXX3
TEMPLATE_VPOXR3EXE_LIBS                = pthread
TEMPLATE_VPOXR3EXE_INCS               += \
	/usr/include \
	/usr/X11R6/include \
	/usr/local/include
TEMPLATE_VPOXR3EXE_LIBPATH            += \
	/usr/lib \
	/usr/X11R6/lib \
	/usr/local/lib
 else ifeq ($(KBUILD_TARGET),netbsd)
TEMPLATE_VPOXR3EXE_TOOL                = GXX3
TEMPLATE_VPOXR3EXE_LIBS                = pthread
TEMPLATE_VPOXR3EXE_INCS               += \
	/usr/include \
	/usr/X11R7/include
TEMPLATE_VPOXR3EXE_LIBPATH            += \
	/usr/lib \
	/usr/X11R7/lib
 else ifeq ($(KBUILD_TARGET),solaris)
TEMPLATE_VPOXR3EXE_TOOL                = GXX3PLAIN
TEMPLATE_VPOXR3EXE_DEFS               += LIBICONV_PLUG _REENTRANT # Avoid the GNU libiconv, for now at least.
TEMPLATE_VPOXR3EXE_LIBS                = rt socket
 else
$(warning Warning: VPOX Build: Target $(KBUILD_TARGET) is not officially supported!)
TEMPLATE_VPOXR3EXE_CXXFLAGS.profile    = $(TEMPLATE_VPOXR3EXE_CXXFLAGS.release)
TEMPLATE_VPOXR3EXE_CXXFLAGS.kprofile   = $(TEMPLATE_VPOXR3EXE_CXXFLAGS.krelease)
 endif
 ifdef VPOX_WITH_RUNPATH
  TEMPLATE_VPOXR3EXE_LDFLAGS          += '$(VPOX_GCC_RPATH_OPT)$(VPOX_WITH_RUNPATH)'
 else ifdef VPOX_WITH_RELATIVE_RUNPATH
  TEMPLATE_VPOXR3EXE_LDFLAGS          += '$(VPOX_GCC_RPATH_OPT)$(VPOX_WITH_RELATIVE_RUNPATH)'
 endif
 ifdef VPOX_WITH_ORIGIN
  TEMPLATE_VPOXR3EXE_LDFLAGS.linux    += $(VPOX_GCC_ORIGIN_OPT)
 endif
endif

#
# Template for building R3 shared objects / DLLs.
# This is mostly identical to the VPOXR3EXE template. (Avoid PIC if possible!)
#				       -
TEMPLATE_VPOXR3                        = VPox Ring 3 SO/DLLs
TEMPLATE_VPOXR3_EXTENDS                = VPOXR3EXE
TEMPLATE_VPOXR3_DEFS.darwin            = $(TEMPLATE_VPOXR3EXE_DEFS.darwin) PIC
TEMPLATE_VPOXR3_LDFLAGS.darwin         = $(TEMPLATE_VPOXR3EXE_LDFLAGS.darwin) \
	-current_version $(VPOX_VERSION_MAJOR).$(VPOX_VERSION_MINOR).$(VPOX_VERSION_BUILD) \
	-compatibility_version $(VPOX_VERSION_MAJOR).$(VPOX_VERSION_MINOR).$(VPOX_VERSION_BUILD)
ifn1of ($(KBUILD_TARGET), darwin win os2)
 TEMPLATE_VPOXR3_DEFS                  = $(TEMPLATE_VPOXR3EXE_DEFS) PIC
 TEMPLATE_VPOXR3_CFLAGS                = $(TEMPLATE_VPOXR3EXE_CFLAGS) -fPIC
 TEMPLATE_VPOXR3_CXXFLAGS              = $(TEMPLATE_VPOXR3EXE_CXXFLAGS) -fPIC
 TEMPLATE_VPOXR3_PCHFLAGS              = $(TEMPLATE_VPOXR3EXE_PCHFLAGS) -fPIC
 TEMPLATE_VPOXR3_LDFLAGS               = $(TEMPLATE_VPOXR3EXE_LDFLAGS) -fPIC
endif
ifeq ($(KBUILD_TARGET),haiku)
 # Haiku uses PIC by default...
 TEMPLATE_VPOXR3_CFLAGS               = $(TEMPLATE_VPOXR3EXE_CFLAGS) -fno-pic
 TEMPLATE_VPOXR3_CXXFLAGS             = $(TEMPLATE_VPOXR3EXE_CXXFLAGS) -fno-pic
 TEMPLATE_VPOXR3_PCHFLAGS             = $(TEMPLATE_VPOXR3EXE_PCHFLAGS) -fno-pic
 TEMPLATE_VPOXR3_LDFLAGS              = $(TEMPLATE_VPOXR3EXE_LDFLAGS) -fno-pic
endif

#
# Temporary: Renaming the template and warnings will be errors ("soon").
#
TEMPLATE_VPoxR3Dll                     += VPox ring-3 SO/DLLs, no warnings
TEMPLATE_VPoxR3Dll_EXTENDS             += VPOXR3
TEMPLATE_VPoxR3Dll_EXTENDS_BY          += appending
ifeq ($(KBUILD_TARGET),win)
 TEMPLATE_VPoxR3Dll_CFLAGS            += $(VPOX_VCC_WERR)
 TEMPLATE_VPoxR3Dll_CXXFLAGS          += $(VPOX_VCC_WERR)
 TEMPLATE_VPoxR3Dll_PCHFLAGS          += $(VPOX_VCC_WERR)
 TEMPLATE_VPoxR3Dll_LDFLAGS           += $(VPOX_VCC_LD_WERR)
else
 TEMPLATE_VPoxR3Dll_CFLAGS            += $(VPOX_GCC_WERR)
 TEMPLATE_VPoxR3Dll_CXXFLAGS          += $(VPOX_GCC_WERR)
 TEMPLATE_VPoxR3Dll_PCHFLAGS          += $(VPOX_GCC_WERR)
endif

# x86 edition of the above template for use on AMD64 targets.
TEMPLATE_VPoxR3Dll-x86                = 32-bit VPox ring-3 SO/DLLs, no warnings
TEMPLATE_VPoxR3Dll-x86_EXTENDS        = VPoxR3Dll
TEMPLATE_VPoxR3Dll-x86_BLD_TRG_ARCH   = x86
TEMPLATE_VPoxR3Dll-x86_DEFS           = $(filter-out HC_ARCH_BITS%,$(TEMPLATE_VPoxR3Dll_DEFS)) \
	HC_ARCH_BITS=32 ARCH_BITS=32
ifeq ($(KBUILD_TARGET),solaris)
 ifdef VPOX_WITH_RUNPATH
  TEMPLATE_VPoxR3Dll-x86_LDFLAGS = \
	$(filter-out '$(VPOX_GCC_RPATH_OPT)$(VPOX_WITH_RUNPATH)',$(TEMPLATE_VPoxR3Dll_LDFLAGS)) \
	'$(VPOX_GCC_RPATH_OPT)$(VPOX_PATH_APP_PRIVATE)' \
	'$(VPOX_GCC_RPATH_OPT)$(VPOX_WITH_RUNPATH)'
 endif
endif


#
# Template for building performance critical stuff with warnings-as-errors.
#
TEMPLATE_VPoxR3DllNoPic                    = VPox ring-3 SO/DLLs without PIC, without warnings.
TEMPLATE_VPoxR3DllNoPic_EXTENDS            = VPOXR3
if1of ($(KBUILD_TARGET).$(KBUILD_TARGET_ARCH), linux.x86 freebsd.x86)
 TEMPLATE_VPoxR3DllNoPic_DEFS              = $(TEMPLATE_VPOXR3EXE_DEFS)
 TEMPLATE_VPoxR3DllNoPic_CFLAGS            = $(TEMPLATE_VPOXR3EXE_CFLAGS)   $(VPOX_GCC_WERR)
 TEMPLATE_VPoxR3DllNoPic_CXXFLAGS          = $(TEMPLATE_VPOXR3EXE_CXXFLAGS) $(VPOX_GCC_WERR)
 TEMPLATE_VPoxR3DllNoPic_PCHFLAGS          = $(TEMPLATE_VPOXR3EXE_CXXFLAGS) $(VPOX_GCC_WERR)
 TEMPLATE_VPoxR3DllNoPic_LDFLAGS           = $(TEMPLATE_VPOXR3EXE_LDFLAGS)
else ifeq ($(KBUILD_TARGET),win)
 TEMPLATE_VPoxR3DllNoPic_CFLAGS            = $(filter-out -W3 -wd%,$(TEMPLATE_VPOXR3_CFLAGS)) $(VPOX_VCC_WARN_ALL) $(VPOX_VCC_WERR)
 TEMPLATE_VPoxR3DllNoPic_CFLAGS.debug      = $(filter-out -RTC%,$(TEMPLATE_VPOXR3_CFLAGS.debug))
 TEMPLATE_VPoxR3DllNoPic_CFLAGS.release    = $(TEMPLATE_VPOXR3_CFLAGS.release) -GS-
 TEMPLATE_VPoxR3DllNoPic_CXXFLAGS          = $(filter-out -W3 -wd%,$(TEMPLATE_VPOXR3_CXXFLAGS)) $(VPOX_VCC_WARN_ALL) $(VPOX_VCC_WERR)
 TEMPLATE_VPoxR3DllNoPic_CXXFLAGS.debug    = $(filter-out -RTC%,$(TEMPLATE_VPOXR3_CXXFLAGS.debug)) # RTCsu Prevents IEM opt.
 TEMPLATE_VPoxR3DllNoPic_CXXFLAGS.release  = $(TEMPLATE_VPOXR3_CXXFLAGS.release) -GS-
 TEMPLATE_VPoxR3DllNoPic_PCHFLAGS          = $(filter-out -W3 -wd%,$(TEMPLATE_VPOXR3_PCHFLAGS)) $(VPOX_VCC_WARN_ALL) $(VPOX_VCC_WERR)
 TEMPLATE_VPoxR3DllNoPic_PCHFLAGS.debug    = $(filter-out -RTC%,$(TEMPLATE_VPOXR3_PCHFLAGS.debug)) # RTCsu Prevents IEM opt.
 TEMPLATE_VPoxR3DllNoPic_PCHFLAGS.release  = $(TEMPLATE_VPOXR3_PCHFLAGS.release) -GS-
 TEMPLATE_VPoxR3DllNoPic_LDFLAGS           = $(TEMPLATE_VPOXR3_LDFLAGS)  $(VPOX_VCC_LD_WERR)
else
 TEMPLATE_VPoxR3DllNoPic_CFLAGS            = $(TEMPLATE_VPOXR3_CFLAGS)   $(VPOX_GCC_WERR)
 TEMPLATE_VPoxR3DllNoPic_CXXFLAGS          = $(TEMPLATE_VPOXR3_CXXFLAGS) $(VPOX_GCC_WERR)
 TEMPLATE_VPoxR3DllNoPic_PCHFLAGS          = $(TEMPLATE_VPOXR3_PCHFLAGS) $(VPOX_GCC_WERR)
endif

# x86 edition of the above template for use on AMD64 targets.
TEMPLATE_VPoxR3DllNoPic-x86                = 32-bit VPox ring-3 SO/DLLs without PIC, without warnings.
TEMPLATE_VPoxR3DllNoPic-x86_EXTENDS        = VPoxR3DllNoPic
TEMPLATE_VPoxR3DllNoPic-x86_BLD_TRG_ARCH   = x86
TEMPLATE_VPoxR3DllNoPic-x86_DEFS           = $(filter-out HC_ARCH_BITS%,$(TEMPLATE_VPoxR3DllNoPic_DEFS)) \
	HC_ARCH_BITS=32 ARCH_BITS=32


#
# Template for building performance critical stuff without warnings-as-errors.
#
TEMPLATE_VPoxR3DllWarnNoPic                = VPox ring-3 SO/DLLs without PIC, with warnings.
TEMPLATE_VPoxR3DllWarnNoPic_EXTENDS        = VPOXR3
if1of ($(KBUILD_TARGET).$(KBUILD_TARGET_ARCH), linux.x86 freebsd.x86)
 TEMPLATE_VPoxR3DllWarnNoPic_DEFS          = $(TEMPLATE_VPOXR3EXE_DEFS)
 TEMPLATE_VPoxR3DllWarnNoPic_CFLAGS        = $(TEMPLATE_VPOXR3EXE_CFLAGS)
 TEMPLATE_VPoxR3DllWarnNoPic_CXXFLAGS      = $(TEMPLATE_VPOXR3EXE_CXXFLAGS)
 TEMPLATE_VPoxR3DllWarnNoPic_PCHFLAGS      = $(TEMPLATE_VPOXR3EXE_PCHFLAGS)
 TEMPLATE_VPoxR3DllWarnNoPic_LDFLAGS       = $(TEMPLATE_VPOXR3EXE_LDFLAGS)
else ifeq ($(KBUILD_TARGET),win)
 TEMPLATE_VPoxR3DllWarnNoPic_CFLAGS.release   = $(TEMPLATE_VPOXR3_CFLAGS.release) -GS-
 TEMPLATE_VPoxR3DllWarnNoPic_CXXFLAGS.release = $(TEMPLATE_VPOXR3_CXXFLAGS.release) -GS-
 TEMPLATE_VPoxR3DllWarnNoPic_PCHFLAGS.release = $(TEMPLATE_VPOXR3_PCHFLAGS.release) -GS-
endif

#
# Template for building static R3 executables and any static
# libraries they link with.
#
TEMPLATE_VPOXR3STATIC                  = VPox Static Ring 3 EXE
TEMPLATE_VPOXR3STATIC_EXTENDS          = VPOXR3EXE
TEMPLATE_VPOXR3STATIC_DEFS             = IN_RT_STATIC IN_RT_R3 IN_SUP_STATIC $(TEMPLATE_VPOXR3EXE_DEFS)
ifeq ($(KBUILD_TARGET),win)
 TEMPLATE_VPOXR3STATIC_CFLAGS          = $(filter-out -MD$(VPOX_VCC_CRT_TYPE), $(TEMPLATE_VPOXR3EXE_CFLAGS)) -MT$(VPOX_VCC_CRT_TYPE)
 TEMPLATE_VPOXR3STATIC_CXXFLAGS        = $(filter-out -MD$(VPOX_VCC_CRT_TYPE), $(TEMPLATE_VPOXR3EXE_CXXFLAGS)) -MT$(VPOX_VCC_CRT_TYPE)
 TEMPLATE_VPOXR3STATIC_PCHFLAGS        = $(filter-out -MD$(VPOX_VCC_CRT_TYPE), $(TEMPLATE_VPOXR3EXE_PCHFLAGS)) -MT$(VPOX_VCC_CRT_TYPE)
 TEMPLATE_VPOXR3STATIC_LDFLAGS         = $(filter-out /DISALLOWLIB:libcmt$(VPOX_VCC_CRT_TYPE).lib /DISALLOWLIB:libcpmt$(VPOX_VCC_CRT_TYPE).lib, $(TEMPLATE_VPOXR3EXE_LDFLAGS)) \
	/DISALLOWLIB:msvcrt.lib \
	/DISALLOWLIB:msvcrtd.lib \
	/DISALLOWLIB:msvcprt.lib \
	/DISALLOWLIB:msvcprtd.lib
 TEMPLATE_VPOXR3STATIC_LIBS.x86           = \
 	$(PATH_TOOL_$(TEMPLATE_VPOXR3STATIC_TOOL.win.x86)_LIB)/oldnames.lib \
 	$(PATH_TOOL_$(TEMPLATE_VPOXR3STATIC_TOOL.win.x86)_LIB)/libcmt$(VPOX_VCC_CRT_TYPE).lib \
 	$(PATH_TOOL_$(TEMPLATE_VPOXR3STATIC_TOOL.win.x86)_LIB)/libcpmt$(VPOX_VCC_CRT_TYPE).lib
 TEMPLATE_VPOXR3STATIC_LIBS.amd64         = \
 	$(PATH_TOOL_$(TEMPLATE_VPOXR3STATIC_TOOL.win.amd64)_LIB)/libcmt$(VPOX_VCC_CRT_TYPE).lib \
 	$(PATH_TOOL_$(TEMPLATE_VPOXR3STATIC_TOOL.win.amd64)_LIB)/libcpmt$(VPOX_VCC_CRT_TYPE).lib \
 	$(PATH_TOOL_$(TEMPLATE_VPOXR3STATIC_TOOL.win.amd64)_LIB)/oldnames.lib
else ifn1of ($(KBUILD_TARGET), darwin linux solaris)
 # The gcc guys sans darwin, linux and solaris (don't depend on statically compiled system libs there)
 TEMPLATE_VPOXR3STATIC_CFLAGS          = $(TEMPLATE_VPOXR3EXE_CFLAGS) -static
 TEMPLATE_VPOXR3STATIC_CXXFLAGS        = $(TEMPLATE_VPOXR3EXE_CXXFLAGS) -static
 TEMPLATE_VPOXR3STATIC_PCHFLAGS        = $(TEMPLATE_VPOXR3EXE_PCHFLAGS) -static
 TEMPLATE_VPOXR3STATIC_OBJCFLAGS       = $(TEMPLATE_VPOXR3EXE_OBJCFLAGS) -static
 TEMPLATE_VPOXR3STATIC_OBJCXXFLAGS     = $(TEMPLATE_VPOXR3EXE_OBJCXXFLAGS) -static
 TEMPLATE_VPOXR3STATIC_LDFLAGS         = $(TEMPLATE_VPOXR3EXE_LDFLAGS) -static
else ifeq ($(KBUILD_TARGET),solaris)
 TEMPLATE_VPOXR3STATIC_LIBS            = $(TEMPLATE_VPOXR3EXE_LIBS) nsl
 TEMPLATE_VPOXR3STATIC_LDFLAGS         = $(filter-out '$(VPOX_GCC_RPATH_OPT)$(VPOX_WITH_RUNPATH)' '$(VPOX_GCC_RPATH_OPT)$(VPOX_WITH_RELATIVE_RUNPATH)',$(TEMPLATE_VPOXR3EXE_LDFLAGS))
else
 TEMPLATE_VPOXR3STATIC_LDFLAGS         = $(filter-out '$(VPOX_GCC_RPATH_OPT)$(VPOX_WITH_RUNPATH)' '$(VPOX_GCC_RPATH_OPT)$(VPOX_WITH_RELATIVE_RUNPATH)',$(TEMPLATE_VPOXR3EXE_LDFLAGS))
endif

#
# Temporary: Renaming the template and warnings will be errors (soon).
# Unlike VPOXR3STATIC, this is strict wrt warnings and includes IPRT.
#
TEMPLATE_VPoxR3Static               = New name for VPOXR3STATIC
TEMPLATE_VPoxR3Static_EXTENDS       = VPOXR3STATIC
TEMPLATE_VPoxR3Static_EXTENDS_BY    = appending
TEMPLATE_VPoxR3Static_SDKS         += VPOX_OPENSSL
TEMPLATE_VPoxR3Static_SDKS.win     += VPOX_NTDLL
ifeq ($(KBUILD_TARGET),win)
 TEMPLATE_VPoxR3Static_CFLAGS      += $(VPOX_VCC_WERR)
 TEMPLATE_VPoxR3Static_CXXFLAGS    += $(VPOX_VCC_WERR)
 TEMPLATE_VPoxR3Static_PCHFLAGS    += $(VPOX_VCC_WERR)
 TEMPLATE_VPoxR3Static_LDFLAGS     += $(VPOX_VCC_LD_WERR)
else
 TEMPLATE_VPoxR3Static_CFLAGS      += $(VPOX_GCC_WERR)
 TEMPLATE_VPoxR3Static_CXXFLAGS    += $(VPOX_GCC_WERR)
 TEMPLATE_VPoxR3Static_PCHFLAGS    += $(VPOX_GCC_WERR)
endif
TEMPLATE_VPoxR3Static_LIBS         += \
 	$(VPOX_LIB_RUNTIME_STATIC)
ifndef SDK_VPOX_LIBXML2_LIBS
 TEMPLATE_VPoxR3Static_LIBS        += \
 	$(PATH_STAGE_LIB)/VPox-libxml2-static$(VPOX_SUFF_LIB)
endif
if1of ($(KBUILD_TARGET),os2 win)
 TEMPLATE_VPoxR3Static_LIBS        += \
 	$(SDK_VPOX_LZF_STATIC_LIBS) \
 	$(SDK_VPOX_ZLIB_STATIC_LIBS)
else
 TEMPLATE_VPoxR3Static_LIBS        += \
 	$(SDK_VPOX_LZF_LIBS) \
 	$(SDK_VPOX_ZLIB_LIBS)
 if1of ($(KBUILD_TARGET),darwin freebsd)
  TEMPLATE_VPoxR3Static_LIBS       += iconv
 else ifeq ($(KBUILD_TARGET),solaris)
  TEMPLATE_VPoxR3Static_LIBS       += kstat
 endif
endif

#
# Non-pedantic variation of VPoxR3Static
#
TEMPLATE_VPoxR3StaticNonPedantic            = VPox Static Ring-3 EXE, non-pedantic.
TEMPLATE_VPoxR3StaticNonPedantic_EXTENDS   = VPoxR3Static
ifeq ($(KBUILD_TARGET),win)
 TEMPLATE_VPoxR3StaticNonPedantic_CFLAGS   = $(TEMPLATE_VPoxR3Static_CFLAGS)   $(VPOX_VCC_NON_PEDANTIC)
 TEMPLATE_VPoxR3StaticNonPedantic_CXXFLAGS = $(TEMPLATE_VPoxR3Static_CXXFLAGS) $(VPOX_VCC_NON_PEDANTIC)
 TEMPLATE_VPoxR3StaticNonPedantic_PCHFLAGS = $(TEMPLATE_VPoxR3Static_PCHFLAGS) $(VPOX_VCC_NON_PEDANTIC)
else # gcc:
 TEMPLATE_VPoxR3StaticNonPedantic_TOOL     = $(VPOX_GCC_TOOL)
 TEMPLATE_VPoxR3StaticNonPedantic_CFLAGS   = $(filter-out $(VPOX_GCC_WERR) $(VPOX_GCC_WARN_MASOCHISTIC) $(VPOX_GCC_PEDANTIC_C)  ,$(TEMPLATE_VPoxR3Static_CFLAGS)) \
 	$(VPOX_GCC_NON_PEDANTIC_CXX)
 TEMPLATE_VPoxR3StaticNonPedantic_CXXFLAGS = $(filter-out $(VPOX_GCC_WERR) $(VPOX_GCC_WARN_MASOCHISTIC) $(VPOX_GCC_PEDANTIC_CXX),$(TEMPLATE_VPoxR3Static_CXXFLAGS)) \
 	$(VPOX_GCC_NON_PEDANTIC_CXX)
 TEMPLATE_VPoxR3StaticNonPedantic_PCHFLAGS = $(filter-out $(VPOX_GCC_WERR) $(VPOX_GCC_WARN_MASOCHISTIC) $(VPOX_GCC_PEDANTIC_CXX),$(TEMPLATE_VPoxR3Static_PCHFLAGS)) \
 	$(VPOX_GCC_NON_PEDANTIC_CXX)
endif


#
# Same as VPOXR3EXE but without C++ exceptions.
#
# VPOXR3EXE does C++ exceptions and may assumes that extern "C" functions
# doesn't throw them. Use this template (and VPOXR3DLLNOXCPT) with care
# and only where the C++ overhead is really unwanted.
#
TEMPLATE_VPOXR3EXENOXCPT               = VPox Ring 3 Exe without C++ exception
TEMPLATE_VPOXR3EXENOXCPT_EXTENDS       = VPOXR3EXE
ifeq ($(KBUILD_TARGET),win)
 TEMPLATE_VPOXR3EXENOXCPT_CFLAGS       = $(filter-out -EH%,$(TEMPLATE_VPOXR3EXE_CFLAGS)  ) -EHs-
 TEMPLATE_VPOXR3EXENOXCPT_CXXFLAGS     = $(filter-out -EH%,$(TEMPLATE_VPOXR3EXE_CXXFLAGS)) -EHs-
 TEMPLATE_VPOXR3EXENOXCPT_PCHFLAGS     = $(filter-out -EH%,$(TEMPLATE_VPOXR3EXE_PCHFLAGS)) -EHs-
else
 TEMPLATE_VPOXR3EXENOXCPT_CXXFLAGS     = $(TEMPLATE_VPOXR3EXE_CXXFLAGS) -fno-exceptions
 TEMPLATE_VPOXR3EXENOXCPT_PCHFLAGS     = $(TEMPLATE_VPOXR3EXE_PCHFLAGS) -fno-exceptions
endif

#
# Same as VPOXR3 but without C++ exceptions.
#
TEMPLATE_VPOXR3DLLNOXCPT               = VPox Ring 3 SO/DLLs without C++ exception
TEMPLATE_VPOXR3DLLNOXCPT_EXTENDS       = VPOXR3
ifeq ($(KBUILD_TARGET),win)
 TEMPLATE_VPOXR3DLLNOXCPT_CFLAGS       = $(filter-out -EH%,$(TEMPLATE_VPOXR3_CFLAGS)  ) -EHs-
 TEMPLATE_VPOXR3DLLNOXCPT_CXXFLAGS     = $(filter-out -EH%,$(TEMPLATE_VPOXR3_CXXFLAGS)) -EHs-
 TEMPLATE_VPOXR3DLLNOXCPT_PCHFLAGS     = $(filter-out -EH%,$(TEMPLATE_VPOXR3_PCHFLAGS)) -EHs-
else
 TEMPLATE_VPOXR3DLLNOXCPT_CXXFLAGS     = $(TEMPLATE_VPOXR3_CXXFLAGS) -fno-exceptions
 TEMPLATE_VPOXR3DLLNOXCPT_PCHFLAGS     = $(TEMPLATE_VPOXR3_PCHFLAGS) -fno-exceptions
endif

#
# Template for building hardened Ring-3 executables.
# These shall have no extra runpaths, esp. not origin ones.
#
TEMPLATE_VPOXR3HARDENEDEXE = Hardened VPox Ring-3 EXE
TEMPLATE_VPOXR3HARDENEDEXE_EXTENDS = VPOXR3EXE
TEMPLATE_VPOXR3HARDENEDEXE_DEBUG_INST.win = $(INST_DEBUG)hardened-exes/
ifdef VPOX_WITH_HARDENING
 TEMPLATE_VPOXR3HARDENEDEXE_LIBS = $(VPOX_LIB_SUPHARDENED) $(TEMPLATE_VPOXR3EXE_LIBS)
else
 TEMPLATE_VPOXR3HARDENEDEXE_LIBS = $(TEMPLATE_VPOXR3EXE_LIBS)
endif
TEMPLATE_VPOXR3HARDENEDEXE_LDFLAGS.darwin = $(TEMPLATE_VPOXR3EXE_LDFLAGS.darwin) -framework IOKit
ifeq ($(KBUILD_TARGET),linux)
# not necessary except USE_LIB_PCAP is defined in SUPR3HardenedMain.cpp
# TEMPLATE_VPOXR3HARDENEDEXE_LIBS += cap
endif
ifeq ($(KBUILD_TARGET),win) # No CRT!
 TEMPLATE_VPOXR3HARDENEDEXE_SDKS          = VPOX_NTDLL $(TEMPLATE_VPOXR3EXE_SDKS)
 TEMPLATE_VPOXR3HARDENEDEXE_LIBS.x86      = \
	$(PATH_SDK_$(VPOX_WINDDK)_LIB.x86)/int64.lib \
 	$(PATH_TOOL_$(TEMPLATE_VPOXR3HARDENEDEXE_TOOL.win.x86)_LIB)/chkstk.obj
 TEMPLATE_VPOXR3HARDENEDEXE_CXXFLAGS      = $(filter-out -RTC% -GZ -GS,$(TEMPLATE_VPOXR3EXE_CXXFLAGS)) -GS-
 TEMPLATE_VPOXR3HARDENEDEXE_CXXFLAGS.debug= $(filter-out -RTC% -GZ -GS,$(TEMPLATE_VPOXR3EXE_CXXFLAGS.debug)) -GS- #-O2 -Oy-
 TEMPLATE_VPOXR3HARDENEDEXE_PCHFLAGS      = $(filter-out -RTC% -GZ -GS,$(TEMPLATE_VPOXR3EXE_PCHFLAGS)) -GS-
 TEMPLATE_VPOXR3HARDENEDEXE_PCHFLAGS.debug= $(filter-out -RTC% -GZ -GS,$(TEMPLATE_VPOXR3EXE_PCHFLAGS.debug)) -GS- #-O2 -Oy-
 TEMPLATE_VPOXR3HARDENEDEXE_CFLAGS        = $(filter-out -RTC% -GZ -GS,$(TEMPLATE_VPOXR3EXE_CFLAGS)) -GS-
 TEMPLATE_VPOXR3HARDENEDEXE_CFLAGS.debug  = $(filter-out -RTC% -GZ -GS,$(TEMPLATE_VPOXR3EXE_CFLAGS.debug)) -GS- -O2 -Oy-
 TEMPLATE_VPOXR3HARDENEDEXE_LDFLAGS       = $(TEMPLATE_VPOXR3EXE_LDFLAGS) \
	/DISALLOWLIB:msvcrt$(VPOX_VCC_CRT_TYPE).lib \
	/DISALLOWLIB:msvcprt$(VPOX_VCC_CRT_TYPE).lib
 TEMPLATE_VPOXR3HARDENEDEXE_LDFLAGS.win.x86   = $(TEMPLATE_VPOXR3EXE_LDFLAGS.win.x86)   /entry:suplibHardenedWindowsMain
 TEMPLATE_VPOXR3HARDENEDEXE_LDFLAGS.win.amd64 = $(TEMPLATE_VPOXR3EXE_LDFLAGS.win.amd64) /entry:suplibHardenedWindowsMain
 TEMPLATE_VPOXR3HARDENEDEXE_LIBS.x86       = $(NOT_SUCH_VARIABLE)
 TEMPLATE_VPOXR3HARDENEDEXE_LIBS.amd64     = $(NOT_SUCH_VARIABLE)
else ifn1of ($(KBUILD_TARGET), os2 solaris)
 # We want to keep the RPATH on Solaris to be able to find libgcc_1/libstdc++ within $(VPOX_WITH_RUNPATH)
 TEMPLATE_VPOXR3HARDENEDEXE_LDFLAGS       = $(filter-out '$(VPOX_GCC_RPATH_OPT)%,$(TEMPLATE_VPOXR3EXE_LDFLAGS))
 TEMPLATE_VPOXR3HARDENEDEXE_LDFLAGS.linux = $(filter-out $(VPOX_GCC_ORIGIN_OPT),$(TEMPLATE_VPOXR3EXE_LDFLAGS.linux))
endif

#
# Template for building hardened Ring-3 libraries.
#
TEMPLATE_VPOXR3HARDENEDLIB = Hardened VPox Ring-3 LIB
TEMPLATE_VPOXR3HARDENEDLIB_EXTENDS = VPOXR3HARDENEDEXE
TEMPLATE_VPOXR3HARDENEDLIB_LIBS = $(NO_SUCH_VARIABLE)


#
# Template for building hardened Ring-3 testcase executables.
#
TEMPLATE_VPoxR3HardenedTstExe = VPox Ring-3 Hardened Testcase Exe (currently windows only!)
TEMPLATE_VPoxR3HardenedTstExe_EXTENDS = VPOXR3HARDENEDEXE
TEMPLATE_VPoxR3HardenedTstExe_INST = $(INST_TESTCASE)

#
# Template for building hardened Ring-3 testcase DLLs (pairs with VPoxR3HardenedTstExe).
#
TEMPLATE_VPoxR3HardenedTstDll = VPox Ring-3 Hardened Testcase Dll (currently windows only!)
TEMPLATE_VPoxR3HardenedTstDll_EXTENDS = VPoxR3TstDll
TEMPLATE_VPoxR3HardenedTstDll_INST = $(INST_TESTCASE)
 TEMPLATE_VPoxR3HardenedTstDll_LDFLAGS.win = $(TEMPLATE_VPoxR3TstDll_LDFLAGS.win) -IntegrityCheck
ifn1of ($(KBUILD_TARGET), win os2)
 TEMPLATE_VPoxR3HardenedTstDll_LDFLAGS       = $(filter-out '$(VPOX_GCC_RPATH_OPT)%,$(TEMPLATE_VPoxR3TstDll_LDFLAGS))
 TEMPLATE_VPoxR3HardenedTstDll_LDFLAGS.linux = $(filter-out $(VPOX_GCC_ORIGIN_OPT),$(TEMPLATE_VPoxR3TstDll_LDFLAGS.linux))
endif

#
# Template for building set-uid-to-root helper programs.
# In hardened builds, these may only contain absolute runpaths!
#
TEMPLATE_VPoxR3SetUidToRoot = Set-uid-to-root helper program.
if1of ($(KBUILD_TARGET),win)
 TEMPLATE_VPoxR3SetUidToRoot_EXTENDS = VPOXR3EXE
else
 TEMPLATE_VPoxR3SetUidToRoot_EXTENDS = VPOXR3HARDENEDEXE
endif
TEMPLATE_VPoxR3SetUidToRoot_LIBS = $(NO_SUCH_VARIABLE)
ifdef VPOX_WITH_RUNPATH
 TEMPLATE_VPoxR3SetUidToRoot_LDFLAGS += '$(VPOX_GCC_RPATH_OPT)$(VPOX_WITH_RUNPATH)'
endif
ifndef VPOX_WITH_HARDENING
 ifdef VPOX_WITH_RELATIVE_RUNPATH
  TEMPLATE_VPoxR3SetUidToRoot_LDFLAGS += '$(VPOX_GCC_RPATH_OPT)$(VPOX_WITH_RELATIVE_RUNPATH)'
 endif
 ifdef VPOX_WITH_ORIGIN
  TEMPLATE_VPoxR3SetUidToRoot_LDFLAGS.linux += $(VPOX_GCC_ORIGIN_OPT)
 endif
endif

#
# Template for building R3 tools.
#
TEMPLATE_VPoxR3Tool            = VPox Ring 3 Tools
TEMPLATE_VPoxR3Tool_EXTENDS    = VPOXR3EXE
TEMPLATE_VPoxR3Tool_INST       = $(VPOX_INST_TOOLS)
ifeq ($(KBUILD_TARGET),win)
 TEMPLATE_VPoxR3Tool_CFLAGS    = $(TEMPLATE_VPOXR3EXE_CFLAGS) $(VPOX_VCC_WERR)
 TEMPLATE_VPoxR3Tool_CXXFLAGS  = $(TEMPLATE_VPOXR3EXE_CXXFLAGS) $(VPOX_VCC_WERR)
 TEMPLATE_VPoxR3Tool_PCHFLAGS  = $(TEMPLATE_VPOXR3EXE_PCHFLAGS) $(VPOX_VCC_WERR)
 TEMPLATE_VPoxR3Tool_LDFLAGS   = $(TEMPLATE_VPOXR3EXE_LDFLAGS) $(VPOX_VCC_LD_WERR)
else
 TEMPLATE_VPoxR3Tool_CFLAGS    = $(TEMPLATE_VPOXR3EXE_CFLAGS) $(VPOX_GCC_WERR)
 TEMPLATE_VPoxR3Tool_CXXFLAGS  = $(TEMPLATE_VPOXR3EXE_CXXFLAGS) $(VPOX_GCC_WERR)
 TEMPLATE_VPoxR3Tool_PCHFLAGS  = $(TEMPLATE_VPOXR3EXE_PCHFLAGS) $(VPOX_GCC_WERR)
 ifdef VPOX_WITH_RUNPATH
  TEMPLATE_VPoxR3Tool_LDFLAGS  = '$(VPOX_GCC_RPATH_OPT)$(VPOX_WITH_RUNPATH)' $(TEMPLATE_VPOXR3EXE_LDFLAGS)
 else ifdef VPOX_WITH_RELATIVE_RUNPATH
  TEMPLATE_VPoxR3Tool_LDFLAGS  = '$(VPOX_GCC_RPATH_OPT)$(VPOX_WITH_RELATIVE_RUNPATH)/..' $(TEMPLATE_VPOXR3EXE_LDFLAGS)
 endif
endif
TEMPLATE_VPoxR3Tool_LIBS       = $(LIB_RUNTIME) $(TEMPLATE_VPOXR3EXE_LIBS)
if defined(VPOX_WITH_MORE_NT4_COMPAT_BINARIES) && "$(KBUILD_TARGET).$(KBUILD_TARGET_ARCH)" == "win.x86"
 TEMPLATE_VPoxR3Tool_LIBS.x86  = \
 	$(PATH_STAGE_LIB)/RuntimeR3VccTricks2$(VPOX_SUFF_LIB) \
 	$(PATH_TOOL_$(TEMPLATE_VPOXR3EXE_TOOL.win.x86)_LIB)/oldnames.lib
endif

#
# Template for building R3 shared objects / DLLs with the 10.5 Mac OS X SDK.
# Identical to VPOXR3EXE, except for the DYLIB, the classic_linker and SDK bits.
#
TEMPLATE_VPOXR3OSX105  = VPox Ring 3 SO/DLLs for OS X 10.5
TEMPLATE_VPOXR3OSX105_EXTENDS = VPOXR3EXE
TEMPLATE_VPOXR3OSX105_DEFS.darwin        = $(VPOX_DARWIN_DEF_SDK_10_5_DEFS) PIC
TEMPLATE_VPOXR3OSX105_CFLAGS.darwin      = $(VPOX_DARWIN_DEF_SDK_10_5_CFLAGS) -fno-common
TEMPLATE_VPOXR3OSX105_CXXFLAGS.darwin    = $(VPOX_DARWIN_DEF_SDK_10_5_CXXFLAGS)
TEMPLATE_VPOXR3OSX105_PCHFLAGS.darwin    = $(VPOX_DARWIN_DEF_SDK_10_5_PCHFLAGS)
TEMPLATE_VPOXR3OSX105_OBJCFLAGS.darwin   = $(VPOX_DARWIN_DEF_SDK_10_5_OBJCFLAGS)
TEMPLATE_VPOXR3OSX105_OBJCXXFLAGS.darwin = $(VPOX_DARWIN_DEF_SDK_10_5_OBJCFLAGS)
TEMPLATE_VPOXR3OSX105_LDFLAGS.darwin     = $(VPOX_DARWIN_DEF_SDK_10_5_LDFLAGS) \
	-read_only_relocs suppress \
	-current_version $(VPOX_VERSION_MAJOR).$(VPOX_VERSION_MINOR).$(VPOX_VERSION_BUILD) \
	-compatibility_version $(VPOX_VERSION_MAJOR).$(VPOX_VERSION_MINOR).$(VPOX_VERSION_BUILD)

#
# Template for building R3 shared objects / DLLs with the 10.7 Mac OS X SDK.
# Identical to VPoxR3Dll, except for the DYLIB, the classic_linker and SDK bits.
#
TEMPLATE_VPoxR3DllOsX107  = VPox Ring 3 SO/DLLs for OS X 10.7
TEMPLATE_VPoxR3DllOsX107_EXTENDS = VPoxR3Dll
TEMPLATE_VPoxR3DllOsX107_TOOL               = LLVMGXX42MACHO
TEMPLATE_VPoxR3DllOsX107_DEFS.darwin        = $(VPOX_DARWIN_DEF_SDK_10_7_DEFS) PIC
TEMPLATE_VPoxR3DllOsX107_CFLAGS.darwin      = $(VPOX_DARWIN_DEF_SDK_10_7_CFLAGS) -fno-common
TEMPLATE_VPoxR3DllOsX107_CXXFLAGS.darwin    = $(VPOX_DARWIN_DEF_SDK_10_7_CXXFLAGS)
TEMPLATE_VPoxR3DllOsX107_PCHFLAGS.darwin    = $(VPOX_DARWIN_DEF_SDK_10_7_PCHFLAGS)
TEMPLATE_VPoxR3DllOsX107_OBJCFLAGS.darwin   = $(VPOX_DARWIN_DEF_SDK_10_7_OBJCFLAGS)
TEMPLATE_VPoxR3DllOsX107_OBJCXXFLAGS.darwin = $(VPOX_DARWIN_DEF_SDK_10_7_OBJCFLAGS)
TEMPLATE_VPoxR3DllOsX107_LDFLAGS.darwin     = $(VPOX_DARWIN_DEF_SDK_10_7_LDFLAGS) \
	-current_version $(VPOX_VERSION_MAJOR).$(VPOX_VERSION_MINOR).$(VPOX_VERSION_BUILD) \
	-compatibility_version $(VPOX_VERSION_MAJOR).$(VPOX_VERSION_MINOR).$(VPOX_VERSION_BUILD)


#
# Ring-3 testcase, running automatically during the build.
# This is the VPOXR3EXE template only with a different install dir.
#
TEMPLATE_VPOXR3AUTOTST  = VPox Ring 3 Testcase Exe
ifeq ($(KBUILD_TARGET),win)
 TEMPLATE_VPOXR3AUTOTST_EXTENDS = VPoxR3Static
 TEMPLATE_VPOXR3AUTOTST_LIBS    = $(NO_SUCH_VARIABLE)
 TEMPLATE_VPOXR3AUTOTST_SDKS    = $(filter-out VPOX_OPENSSL,$(TEMPLATE_VPoxR3Static_SDKS))
else
 TEMPLATE_VPOXR3AUTOTST_EXTENDS = VPOXR3EXE
endif
TEMPLATE_VPOXR3AUTOTST_INST    = $(INST_TESTCASE)
if "$(KBUILD_TARGET)" == "win" && defined(VPOX_SIGNING_MODE)
 TEMPLATE_VPOXR3AUTOTST_POST_CMDS = $(NO_SUCH_VARIABLE)
 TEMPLATE_VPOXR3AUTOTST_LDFLAGS = $(filter-out -IntegrityCheck, $(TEMPLATE_VPoxR3Static_LDFLAGS))
endif

#
# Ring-3 testcase.
# This is the VPOXR3EXE template only with a different install dir.
#
TEMPLATE_VPOXR3TSTEXE  = VPox Ring 3 Testcase Exe
TEMPLATE_VPOXR3TSTEXE_EXTENDS = VPOXR3EXE
TEMPLATE_VPOXR3TSTEXE_INST    = $(INST_TESTCASE)
TEMPLATE_VPOXR3TSTEXE_LIBS    = $(LIB_RUNTIME) $(TEMPLATE_VPOXR3EXE_LIBS)
ifdef VPOX_WITH_RUNPATH
 TEMPLATE_VPOXR3TSTEXE_LDFLAGS = '$(VPOX_GCC_RPATH_OPT)$(VPOX_WITH_RUNPATH)' $(TEMPLATE_VPOXR3EXE_LDFLAGS)
else ifdef VPOX_WITH_RELATIVE_RUNPATH
 TEMPLATE_VPOXR3TSTEXE_LDFLAGS = '$(VPOX_GCC_RPATH_OPT)$(VPOX_WITH_RELATIVE_RUNPATH)/..' $(TEMPLATE_VPOXR3EXE_LDFLAGS)
endif
if "$(KBUILD_TARGET)" == "win" && defined(VPOX_SIGNING_MODE)
 TEMPLATE_VPOXR3TSTEXE_POST_CMDS =
 TEMPLATE_VPOXR3TSTEXE_LDFLAGS = $(filter-out -IntegrityCheck, $(TEMPLATE_VPOXR3EXE_LDFLAGS))
endif
if defined(VPOX_WITH_MORE_NT4_COMPAT_BINARIES) && "$(KBUILD_TARGET).$(KBUILD_TARGET_ARCH)" == "win.x86"
 TEMPLATE_VPOXR3TSTEXE_POST_CMDS.win.x86 = $(if $(eq $(tool_do),LINK_LIBRARY),,$(VPOX_PE_SET_VERSION) $(out))
 TEMPLATE_VPOXR3TSTEXE_LIBS.x86 = \
 	$(PATH_STAGE_LIB)/RuntimeR3VccTricks2$(VPOX_SUFF_LIB) \
 	$(PATH_TOOL_$(TEMPLATE_VPOXR3EXE_TOOL.win.x86)_LIB)/oldnames.lib
endif

#
# Ring-3 testcase (no -pedantic)
#
TEMPLATE_VPOXR3TSTNPEXE  = VPox Ring 3 Testcase Exe Non-pedantic
TEMPLATE_VPOXR3TSTNPEXE_EXTENDS = VPOXR3TSTEXE
ifneq ($(KBUILD_TARGET),win) # (only gcc)
 TEMPLATE_VPOXR3TSTNPEXE_TOOL             = $(VPOX_GCC_TOOL)
 TEMPLATE_VPOXR3TSTNPEXE_CFLAGS           = $(filter-out $(VPOX_GCC_WERR) $(VPOX_GCC_WARN_MASOCHISTIC) $(VPOX_GCC_PEDANTIC_C)  ,$(TEMPLATE_VPOXR3TSTEXE_CFLAGS)) \
 	-Wno-sign-compare
 TEMPLATE_VPOXR3TSTNPEXE_CXXFLAGS         = $(filter-out $(VPOX_GCC_WERR) $(VPOX_GCC_WARN_MASOCHISTIC) $(VPOX_GCC_PEDANTIC_CXX),$(TEMPLATE_VPOXR3TSTEXE_CXXFLAGS)) \
 	-Wno-sign-compare
 TEMPLATE_VPOXR3TSTNPEXE_PCHFLAGS         = $(filter-out $(VPOX_GCC_WERR) $(VPOX_GCC_WARN_MASOCHISTIC) $(VPOX_GCC_PEDANTIC_CXX),$(TEMPLATE_VPOXR3TSTEXE_PCHFLAGS)) \
 	-Wno-sign-compare
endif


#
# Ring-3 testcase DLL.
#
TEMPLATE_VPoxR3TstDll = VPox Ring-3 Testcase Dll
TEMPLATE_VPoxR3TstDll_EXTENDS = VPOXR3TSTEXE
ifn1of ($(KBUILD_TARGET), darwin win os2)
 TEMPLATE_VPoxR3TstDll_DEFS     = $(TEMPLATE_VPOXR3TSTEXE_DEFS) PIC
 TEMPLATE_VPoxR3TstDll_CFLAGS   = $(TEMPLATE_VPOXR3TSTEXE_CFLAGS) -fPIC
 TEMPLATE_VPoxR3TstDll_CXXFLAGS = $(TEMPLATE_VPOXR3TSTEXE_CXXFLAGS) -fPIC
 TEMPLATE_VPoxR3TstDll_PCHFLAGS = $(TEMPLATE_VPOXR3TSTEXE_PCHFLAGS) -fPIC
 TEMPLATE_VPoxR3TstDll_LDFLAGS  = $(TEMPLATE_VPOXR3TSTEXE_LDFLAGS) -fPIC
endif


#
# Template for the CppUnit kind of testcases.
#
TEMPLATE_VPOXCPPUNITEXE  = VPox CppUnit Testcase Exe
TEMPLATE_VPOXCPPUNITEXE_EXTENDS = VPOXR3TSTEXE
## @todo make a CPPUNIT SDK and add cppunit tools packages for windows, mac, solaris and OS/2.
#TEMPLATE_VPOXCPPUNITEXE_SDKS = CPPUNIT -
TEMPLATE_VPOXCPPUNITEXE_LIBS = \
	$(TEMPLATE_VPOXR3TSTEXE_LIBS) \
	cppunit

#
# Template for building bad C/C++ style R3 executables (no -pedantic).
#
TEMPLATE_VPOXR3NPEXE                     = VPox Ring 3 Non-pedantic
TEMPLATE_VPOXR3NPEXE_EXTENDS             = VPOXR3EXE
ifneq ($(KBUILD_TARGET),win) # (only gcc)
 TEMPLATE_VPOXR3NPEXE_TOOL               = $(VPOX_GCC_TOOL)
 TEMPLATE_VPOXR3NPEXE_CFLAGS             = $(filter-out $(VPOX_GCC_WERR) $(VPOX_GCC_WARN_MASOCHISTIC) $(VPOX_GCC_PEDANTIC_C)  ,$(TEMPLATE_VPOXR3EXE_CFLAGS)) \
 	$(VPOX_GCC_NON_PEDANTIC_C)
 TEMPLATE_VPOXR3NPEXE_CXXFLAGS           = $(filter-out $(VPOX_GCC_WERR) $(VPOX_GCC_WARN_MASOCHISTIC) $(VPOX_GCC_PEDANTIC_CXX),$(TEMPLATE_VPOXR3EXE_CXXFLAGS)) \
 	$(VPOX_GCC_NON_PEDANTIC_CXX)
 TEMPLATE_VPOXR3NPEXE_PCHFLAGS           = $(filter-out $(VPOX_GCC_WERR) $(VPOX_GCC_WARN_MASOCHISTIC) $(VPOX_GCC_PEDANTIC_CXX),$(TEMPLATE_VPOXR3EXE_PCHFLAGS)) \
 	$(VPOX_GCC_NON_PEDANTIC_CXX)
endif


#
# Template for building bad C/C++ style R3 shared libraries / Dlls (no -pedantic).
# (Same transformation as for VPOXR3NPEXE.)
#
# @deprecated Use VPoxR3DllNonPedantic!
#
TEMPLATE_VPOXR3NP = VPox Ring 3 Non-pedantic
TEMPLATE_VPOXR3NP_EXTENDS = VPOXR3
ifneq ($(KBUILD_TARGET),win) # (only gcc)
 TEMPLATE_VPOXR3NP_TOOL                  = $(VPOX_GCC_TOOL)
 TEMPLATE_VPOXR3NP_CFLAGS                = $(filter-out $(VPOX_GCC_WERR) $(VPOX_GCC_WARN_MASOCHISTIC) $(VPOX_GCC_PEDANTIC_C)  ,$(TEMPLATE_VPOXR3_CFLAGS)) \
	$(VPOX_GCC_NON_PEDANTIC_C)
 TEMPLATE_VPOXR3NP_CXXFLAGS              = $(filter-out $(VPOX_GCC_WERR) $(VPOX_GCC_WARN_MASOCHISTIC) $(VPOX_GCC_PEDANTIC_CXX),$(TEMPLATE_VPOXR3_CXXFLAGS)) \
 	$(VPOX_GCC_NON_PEDANTIC_CXX)
 TEMPLATE_VPOXR3NP_PCHFLAGS              = $(filter-out $(VPOX_GCC_WERR) $(VPOX_GCC_WARN_MASOCHISTIC) $(VPOX_GCC_PEDANTIC_CXX),$(TEMPLATE_VPOXR3_PCHFLAGS)) \
 	$(VPOX_GCC_NON_PEDANTIC_CXX)
 TEMPLATE_VPOXR3NP_OBJCFLAGS             = $(filter-out $(VPOX_GCC_WERR) $(VPOX_GCC_WARN_MASOCHISTIC) -pedantic -Wstrict-prototypes,$(TEMPLATE_VPOXR3_OBJCFLAGS))
 TEMPLATE_VPOXR3NP_OBJCXXFLAGS           = $(filter-out $(VPOX_GCC_WERR) $(VPOX_GCC_WARN_MASOCHISTIC) -pedantic,$(TEMPLATE_VPOXR3_OBJCXXFLAGS))
endif


#
# Template for building bad C/C++ style R3 shared libraries / Dlls (no -pedantic).
# (Same transformation as for VPoxR3ExeNonPedantic.)
#
TEMPLATE_VPoxR3DllNonPedantic               = VPox ring-3 Non-pedantic, with warnings.
TEMPLATE_VPoxR3DllNonPedantic_EXTENDS       = VPOXR3
ifeq ($(KBUILD_TARGET),win)
 TEMPLATE_VPoxR3DllNonPedantic_CFLAGS       = $(TEMPLATE_VPOXR3_CFLAGS)   $(VPOX_VCC_NON_PEDANTIC)
 TEMPLATE_VPoxR3DllNonPedantic_CXXFLAGS     = $(TEMPLATE_VPOXR3_CXXFLAGS) $(VPOX_VCC_NON_PEDANTIC)
 TEMPLATE_VPoxR3DllNonPedantic_PCHFLAGS     = $(TEMPLATE_VPOXR3_PCHFLAGS) $(VPOX_VCC_NON_PEDANTIC)
else # gcc:
 TEMPLATE_VPoxR3DllNonPedantic_TOOL         = $(VPOX_GCC_TOOL)
 TEMPLATE_VPoxR3DllNonPedantic_CFLAGS       = $(filter-out $(VPOX_GCC_WERR) $(VPOX_GCC_WARN_MASOCHISTIC) $(VPOX_GCC_PEDANTIC_C)  ,$(TEMPLATE_VPOXR3_CFLAGS)) \
	$(VPOX_GCC_NON_PEDANTIC_C)
 TEMPLATE_VPoxR3DllNonPedantic_CXXFLAGS     = $(filter-out $(VPOX_GCC_WERR) $(VPOX_GCC_WARN_MASOCHISTIC) $(VPOX_GCC_PEDANTIC_CXX),$(TEMPLATE_VPOXR3_CXXFLAGS)) \
 	$(VPOX_GCC_NON_PEDANTIC_CXX)
 TEMPLATE_VPoxR3DllNonPedantic_PCHFLAGS     = $(filter-out $(VPOX_GCC_WERR) $(VPOX_GCC_WARN_MASOCHISTIC) $(VPOX_GCC_PEDANTIC_CXX),$(TEMPLATE_VPOXR3_PCHFLAGS)) \
 	$(VPOX_GCC_NON_PEDANTIC_CXX)
endif

# x86 edition of the above template for use on AMD64 targets.
TEMPLATE_VPoxR3DllNonPedantic-x86           = 32-bit VPox ring-3 SO/DLLs, no warnings
TEMPLATE_VPoxR3DllNonPedantic-x86_EXTENDS   = VPoxR3DllNonPedantic
TEMPLATE_VPoxR3DllNonPedantic-x86_BLD_TRG_ARCH = x86
TEMPLATE_VPoxR3DllNonPedantic-x86_DEFS      = $(filter-out HC_ARCH_BITS%,$(TEMPLATE_VPoxR3DllNonPedantic_DEFS)) \
	HC_ARCH_BITS=32 ARCH_BITS=32



#
# Same as VPoxR3DllNonPedantic, only it optimizes debug builds.
#
TEMPLATE_VPoxR3DllNonPedanticFast            = VPox ring-3 Non-pedantic, with warnings, optimized debug.
TEMPLATE_VPoxR3DllNonPedanticFast_EXTENDS    = VPoxR3DllNonPedantic
ifeq ($(KBUILD_TYPE),debug)
 ifeq ($(KBUILD_TARGET),win)
  TEMPLATE_VPoxR3DllNonPedanticFast_CFLAGS         = $(filter-out -O0,   $(TEMPLATE_VPoxR3DllNonPedantic_CFLAGS)) -O2 -Oy-
  TEMPLATE_VPoxR3DllNonPedanticFast_CFLAGS.debug   = $(filter-out -RTC%, $(TEMPLATE_VPoxR3DllNonPedantic_CFLAGS.debug))
  TEMPLATE_VPoxR3DllNonPedanticFast_CXXFLAGS       = $(filter-out -O0,   $(TEMPLATE_VPoxR3DllNonPedantic_CXXFLAGS)) -O2 -Oy-
  TEMPLATE_VPoxR3DllNonPedanticFast_CXXFLAGS.debug = $(filter-out -RTC%, $(TEMPLATE_VPoxR3DllNonPedantic_CXXFLAGS.debug))
  TEMPLATE_VPoxR3DllNonPedanticFast_PCHFLAGS       = $(filter-out -O0,   $(TEMPLATE_VPoxR3DllNonPedantic_PCHFLAGS)) -O2 -Oy-
  TEMPLATE_VPoxR3DllNonPedanticFast_PCHFLAGS.debug = $(filter-out -RTC%, $(TEMPLATE_VPoxR3DllNonPedantic_PCHFLAGS.debug))
 else
  TEMPLATE_VPoxR3DllNonPedanticFast_CFLAGS         = $(TEMPLATE_VPoxR3DllNonPedantic_CFLAGS) -O2 -fno-omit-frame-pointer
  TEMPLATE_VPoxR3DllNonPedanticFast_CXXFLAGS       = $(TEMPLATE_VPoxR3DllNonPedantic_CXXFLAGS) -O2 -fno-omit-frame-pointer
  TEMPLATE_VPoxR3DllNonPedanticFast_PCHFLAGS       = $(TEMPLATE_VPoxR3DllNonPedantic_PCHFLAGS) -O2 -fno-omit-frame-pointer
 endif
endif


#
# Template for building libraries that are linked into VPoxRT.dll
# and it's variations, pedantic variation.
#
TEMPLATE_VPoxR3RuntimeDll = For libraries that are linked into VPoxRT.
TEMPLATE_VPoxR3RuntimeDll_EXTENDS = VPoxR3Dll
if defined(VPOX_WITH_MORE_NT4_COMPAT_BINARIES) && "$(KBUILD_TARGET).$(KBUILD_TARGET_ARCH)" == "win.x86"
 TEMPLATE_VPoxR3RuntimeDll_CFLAGS   = $(filter-out -MD$(VPOX_VCC_CRT_TYPE), $(TEMPLATE_VPoxR3Dll_CFLAGS)) -MT$(VPOX_VCC_CRT_TYPE)
 TEMPLATE_VPoxR3RuntimeDll_CXXFLAGS = $(filter-out -MD$(VPOX_VCC_CRT_TYPE), $(TEMPLATE_VPoxR3Dll_CXXFLAGS)) -MT$(VPOX_VCC_CRT_TYPE)
 TEMPLATE_VPoxR3RuntimeDll_PCHFLAGS = $(filter-out -MD$(VPOX_VCC_CRT_TYPE), $(TEMPLATE_VPoxR3Dll_PCHFLAGS)) -MT$(VPOX_VCC_CRT_TYPE)
 TEMPLATE_VPoxR3RuntimeDll_LIBS.x86 = $(filter-out $(PATH_TOOL_$(TEMPLATE_VPOXR3EXE_TOOL.win.x86)_LIB)/%, $(TEMPLATE_VPoxR3Dll_LIBS.x86)) \
 	$(PATH_TOOL_$(TEMPLATE_VPoxR3RuntimeDll_TOOL.win.x86)_LIB)/oldnames.lib \
 	$(PATH_TOOL_$(TEMPLATE_VPoxR3RuntimeDll_TOOL.win.x86)_LIB)/libcmt$(VPOX_VCC_CRT_TYPE).lib \
 	$(PATH_TOOL_$(TEMPLATE_VPoxR3RuntimeDll_TOOL.win.x86)_LIB)/libcpmt$(VPOX_VCC_CRT_TYPE).lib
endif

#
# Template for building libraries that are linked into VPoxRT.dll
# and it's variations, non-pedantic variation.
#
TEMPLATE_VPoxR3RuntimeDllNonPedantic = For libraries that are linked into VPoxRT, but must be excluded from -pedantic warnings.
TEMPLATE_VPoxR3RuntimeDllNonPedantic_EXTENDS = VPoxR3DllNonPedantic
if defined(VPOX_WITH_MORE_NT4_COMPAT_BINARIES) && $(KBUILD_TARGET_ARCH) == "x86"
 TEMPLATE_VPoxR3RuntimeDllNonPedantic_CFLAGS   = $(filter-out -MD$(VPOX_VCC_CRT_TYPE), $(TEMPLATE_VPoxR3DllNonPedantic_CFLAGS)) -MT$(VPOX_VCC_CRT_TYPE)
 TEMPLATE_VPoxR3RuntimeDllNonPedantic_CXXFLAGS = $(filter-out -MD$(VPOX_VCC_CRT_TYPE), $(TEMPLATE_VPoxR3DllNonPedantic_CXXFLAGS)) -MT$(VPOX_VCC_CRT_TYPE)
 TEMPLATE_VPoxR3RuntimeDllNonPedantic_PCHFLAGS = $(filter-out -MD$(VPOX_VCC_CRT_TYPE), $(TEMPLATE_VPoxR3DllNonPedantic_PCHFLAGS)) -MT$(VPOX_VCC_CRT_TYPE)
endif

#
# Same as VPoxR3RuntimeDllNonPedantic, only it optimized debug builds too.
#
TEMPLATE_VPoxR3RuntimeDllNonPedanticFast = For libraries that are linked into VPoxRT, but must be excluded from -pedantic warnings, optmized debug.
TEMPLATE_VPoxR3RuntimeDllNonPedanticFast_EXTENDS = VPoxR3RuntimeDllNonPedantic
ifeq ($(KBUILD_TYPE),debug)
 ifeq ($(KBUILD_TARGET),win)
  TEMPLATE_VPoxR3RuntimeDllNonPedanticFast_CFLAGS         = $(filter-out -O0,   $(TEMPLATE_VPoxR3RuntimeDllNonPedantic_CFLAGS)) -O2 -Oy-
  TEMPLATE_VPoxR3RuntimeDllNonPedanticFast_CFLAGS.debug   = $(filter-out -RTC%, $(TEMPLATE_VPoxR3RuntimeDllNonPedantic_CFLAGS.debug))
  TEMPLATE_VPoxR3RuntimeDllNonPedanticFast_CXXFLAGS       = $(filter-out -O0,   $(TEMPLATE_VPoxR3RuntimeDllNonPedantic_CXXFLAGS)) -O2 -Oy-
  TEMPLATE_VPoxR3RuntimeDllNonPedanticFast_CXXFLAGS.debug = $(filter-out -RTC%, $(TEMPLATE_VPoxR3RuntimeDllNonPedantic_CXXFLAGS.debug))
  TEMPLATE_VPoxR3RuntimeDllNonPedanticFast_PCHFLAGS       = $(filter-out -O0,   $(TEMPLATE_VPoxR3RuntimeDllNonPedantic_PCHFLAGS)) -O2 -Oy-
  TEMPLATE_VPoxR3RuntimeDllNonPedanticFast_PCHFLAGS.debug = $(filter-out -RTC%, $(TEMPLATE_VPoxR3RuntimeDllNonPedantic_PCHFLAGS.debug))
 else
  TEMPLATE_VPoxR3RuntimeDllNonPedanticFast_CFLAGS         = $(TEMPLATE_VPoxR3RuntimeDllNonPedantic_CFLAGS) -O2 -fno-omit-frame-pointer
  TEMPLATE_VPoxR3RuntimeDllNonPedanticFast_CXXFLAGS       = $(TEMPLATE_VPoxR3RuntimeDllNonPedantic_CXXFLAGS) -O2 -fno-omit-frame-pointer
  TEMPLATE_VPoxR3RuntimeDllNonPedanticFast_PCHFLAGS       = $(TEMPLATE_VPoxR3RuntimeDllNonPedantic_PCHFLAGS) -O2 -fno-omit-frame-pointer
 endif
endif


#
# Template for building libraries, shared libraries / modules
# which only depends on IPRT for crt.
#
TEMPLATE_VPoxNoCrtGccLib = VPox no-crt GCC libraries and modules, yasm/nasm.
TEMPLATE_VPoxNoCrtGccLib_DEFS              = IN_RING3 IPRT_NO_CRT $(ARCH_BITS_DEFS)
TEMPLATE_VPoxNoCrtGccLib_ASDEFS            = ASM_CALL64_GCC
TEMPLATE_VPoxNoCrtGccLib_CFLAGS            = -nostdinc -fno-strict-aliasing -fno-math-errno $(VPOX_GCC_WARN) -Werror-implicit-function-declaration
TEMPLATE_VPoxNoCrtGccLib_CFLAGS.x86        = -m32
TEMPLATE_VPoxNoCrtGccLib_CFLAGS.amd64      = -m64 -mcmodel=medium -fno-common
TEMPLATE_VPoxNoCrtGccLib_CFLAGS.sparc32    = -m32
TEMPLATE_VPoxNoCrtGccLib_CFLAGS.sparc64    = -m64
TEMPLATE_VPoxNoCrtGccLib_CFLAGS.release    = -O2 -fno-strict-aliasing
TEMPLATE_VPoxNoCrtGccLib_CFLAGS.profile    = $(TEMPLATE_VPoxNoCrtGccLib_CFLAGS.release)
TEMPLATE_VPoxNoCrtGccLib_CFLAGS.kprofile   = $(TEMPLATE_VPoxNoCrtGccLib_CFLAGS.release)
TEMPLATE_VPoxNoCrtGccLib_CFLAGS.darwin     = -static
TEMPLATE_VPoxNoCrtGccLib_CXXFLAGS          = $(filter-out -Werror-implicit-function-declaration,$(TEMPLATE_VPoxNoCrtGccLib_CFLAGS))
TEMPLATE_VPoxNoCrtGccLib_CXXFLAGS.$(KBUILD_TARGET) = $(TEMPLATE_VPoxNoCrtGccLib_CFLAGS.$(KBUILD_TARGET))
TEMPLATE_VPoxNoCrtGccLib_CXXFLAGS.$(KBUILD_TARGET_ARCH) = $(TEMPLATE_VPoxNoCrtGccLib_CFLAGS.$(KBUILD_TARGET_ARCH))
TEMPLATE_VPoxNoCrtGccLib_PCHFLAGS          = $(TEMPLATE_VPoxNoCrtGccLib_CXXFLAGS)
TEMPLATE_VPoxNoCrtGccLib_PCHFLAGS.$(KBUILD_TARGET) = $(TEMPLATE_VPoxNoCrtGccLib_CXXFLAGS.$(KBUILD_TARGET))
TEMPLATE_VPoxNoCrtGccLib_PCHFLAGS.$(KBUILD_TARGET_ARCH) =  $(TEMPLATE_VPoxNoCrtGccLib_CXXFLAGS.$(KBUILD_TARGET_ARCH))
TEMPLATE_VPoxNoCrtGccLib_INCS              = $(PATH_ROOT)/include/iprt/nocrt

ifeq (disabled-by-mingw-w64 $(KBUILD_TARGET).$(KBUILD_TARGET_ARCH),win.amd64)
 # cross compile to 64-bit ELF (linux).
 TEMPLATE_VPoxNoCrtGccLib_TOOL             = XGCCAMD64LINUX
 TEMPLATE_VPoxNoCrtGccLib_ASTOOL           = YASM
 TEMPLATE_VPoxNoCrtGccLib_ASFLAGS          = -f elf64 -DASM_FORMAT_ELF -D__YASM__ -g dwarf2 -w+orphan-labels $(VPOX_YASM_Wno-segreg-in-64bit)
 TEMPLATE_VPoxNoCrtGccLib_LIBS             = $(KBUILD_DEVTOOLS)/win.x86/x86_64-unknown-linux-gnu/20060701-r2/lib/gcc/x86_64-unknown-linux-gnu/3.4.6/libgcc.a
 TEMPLATE_VPoxNoCrtGccLib_LDFLAGS          = -nostdlib

else if1of ($(KBUILD_TARGET).$(KBUILD_TARGET_ARCH), win.x86 win.amd64)
 # Use the default GCC (MinGW) with the Microsoft linker.
 # (Drop all '-g' options as we're unable to strip the debug info.)
 TEMPLATE_VPoxNoCrtGccLib_TOOL             = $(VPOX_GCC_TOOL)
 if $(VPOX_GCC_VERSION_CC) < 30400
  TEMPLATE_VPoxNoCrtGccLib_DEFS           += RT_WITHOUT_PRAGMA_ONCE
 endif
 TEMPLATE_VPoxNoCrtGccLib_ASTOOL           = $(VPOX_ASTOOL)
 TEMPLATE_VPoxNoCrtGccLib_ASFLAGS          = $(VPOX_ASFLAGS)
 TEMPLATE_VPoxNoCrtGccLib_LDTOOL           = $(VPOX_VCC_TOOL)
 TEMPLATE_VPoxNoCrtGccLib_LDFLAGS          = -Incremental:NO -MapInfo:Exports -NoD -Ignore:4197
 TEMPLATE_VPoxNoCrtGccLib_LIBS             = $(VPOX_GCC_LIBGCC)
 TEMPLATE_VPoxNoCrtGccLib_CFLAGS          := $(filter-out -g,$(TEMPLATE_VPoxNoCrtGccLib_CFLAGS)) -s
 TEMPLATE_VPoxNoCrtGccLib_CXXFLAGS        := $(filter-out -g,$(TEMPLATE_VPoxNoCrtGccLib_CXXFLAGS)) -s
 TEMPLATE_VPoxNoCrtGccLib_PCHFLAGS        := $(filter-out -g,$(TEMPLATE_VPoxNoCrtGccLib_PCHFLAGS)) -s

else
 # Use the default GCC.
 # The use of --exclude-libs ALL is to avoid confusing the linux ld.so.
 TEMPLATE_VPoxNoCrtGccLib_TOOL             = $(VPOX_GCC_TOOL)
 if $(VPOX_GCC_VERSION_CC) < 30400
  TEMPLATE_VPoxNoCrtGccLib_DEFS           += RT_WITHOUT_PRAGMA_ONCE
 endif
 TEMPLATE_VPoxNoCrtGccLib_ASTOOL           = $(VPOX_ASTOOL)
 TEMPLATE_VPoxNoCrtGccLib_ASFLAGS          = $(VPOX_ASFLAGS)
 TEMPLATE_VPoxNoCrtGccLib_CFLAGS          += $(VPOX_GCC_fno-stack-protector)
 TEMPLATE_VPoxNoCrtGccLib_CXXFLAGS        += $(VPOX_GCC_fno-stack-protector)
 TEMPLATE_VPoxNoCrtGccLib_PCHFLAGS        += $(VPOX_GCC_fno-stack-protector)
 ifeq ($(KBUILD_TARGET_ARCH),amd64)
  # in 64-bit mode we'll build a sys-module (VPoxREM2).
  if1of ($(KBUILD_TARGET), darwin solaris)
   TEMPLATE_VPoxNoCrtGccLib_LDFLAGS.solaris= -64 -r
  else
   TEMPLATE_VPoxNoCrtGccLib_LDFLAGS        = -nostdlib
  endif
 else # x86:
  TEMPLATE_VPoxNoCrtGccLib_LDFLAGS         = -nostdlib
  ifn1of ($(KBUILD_TARGET), os2 darwin solaris)
   TEMPLATE_VPoxNoCrtGccLib_LDFLAGS       += $(VPOX_GCC_NO_UNDEFINED)
  endif
 endif # x86
 TEMPLATE_VPoxNoCrtGccLib_LDFLAGS.darwin   = $(VPOX_DARWIN_DEF_SDK_LDFLAGS)
 TEMPLATE_VPoxNoCrtGccLib_LIBS             = # FIXME - has unwind mess.
endif


#
# Same as VPoxNoCrtGccLib only it uses GAS as the assembler instead of yasm/nasm.
#
TEMPLATE_VPOXNOCRTGAS = VPox no-crt GCC libraries and modules, gas.
TEMPLATE_VPOXNOCRTGAS_EXTENDS = VPoxNoCrtGccLib
TEMPLATE_VPOXNOCRTGAS_ASTOOL = $(TEMPLATE_VPoxNoCrtGccLib_TOOL)
ifeq ($(KBUILD_TARGET).$(KBUILD_TARGET_ARCH),win.x86)
 TEMPLATE_VPOXNOCRTGAS_ASFLAGS = -s
else
 TEMPLATE_VPOXNOCRTGAS_ASFLAGS = -g
endif
TEMPLATE_VPOXNOCRTGAS_ASFLAGS.x86 = -m32
TEMPLATE_VPOXNOCRTGAS_ASFLAGS.amd64 = -m64


#
# Template for building executables that are part of the VPox Main component
# (COM/XPCOM interface to VirtualPox).
#
TEMPLATE_VPOXMAINEXE         = VPox Main Executable
TEMPLATE_VPOXMAINEXE_ASTOOL              = $(VPOX_ASTOOL)
TEMPLATE_VPOXMAINEXE_ASFLAGS             = $(VPOX_ASFLAGS)
TEMPLATE_VPOXMAINEXE_DEFS                = IN_RING3 UNICODE NDEBUG=1
TEMPLATE_VPOXMAINEXE_DEFS.win            = _UNICODE
TEMPLATE_VPOXMAINEXE_RCDEFS              = $(TEMPLATE_VPOXR3EXE_RCDEFS)
TEMPLATE_VPOXMAINEXE_LIBS.kprofile       = $(LIB_KPROFILE)
TEMPLATE_VPOXMAINEXE_USES                = dtrace
if defined(VPOX_WITH_DTRACE_R3_MAIN) && defined(VPOX_WITH_NATIVE_DTRACE)
 TEMPLATE_VPOXMAINEXE_DTRACETOOL         = DTraceAndVPoxTpG
 TEMPLATE_VPOXMAINEXE_DTRACE_OBJ_FLAGS   = -C
 TEMPLATE_VPOXMAINEXE_DTRACE_HDR_FLAGS   = -C
 TEMPLATE_VPOXMAINEXE_DEFS              += VPOX_WITH_DTRACE VPOX_WITH_DTRACE_R3 VPOX_WITH_DTRACE_R3_MAIN VPOX_WITH_NATIVE_DTRACE
else
  TEMPLATE_VPOXMAINEXE_DTRACE_HDR_FLAGS  = --ring-3-context
  TEMPLATE_VPOXMAINEXE_DTRACE_OBJ_FLAGS  = --ring-3-context --pic --probe-fn-imported --probe-fn-name "SUPTracerFireProbe"
 if defined(VPOX_WITH_DTRACE_R3_MAIN)
  TEMPLATE_VPOXMAINEXE_DTRACETOOL        = VPoxTpG
  TEMPLATE_VPOXMAINEXE_DEFS             += VPOX_WITH_DTRACE VPOX_WITH_DTRACE_R3 VPOX_WITH_DTRACE_R3_MAIN
 else
  TEMPLATE_VPOXMAINEXE_DTRACETOOL        = VPoxTpG-Disabled
 endif
endif

ifeq ($(KBUILD_TARGET),win)
 TEMPLATE_VPOXMAINEXE_SDKS               = ReorderCompilerIncs $(VPOX_WINPSDK) $(VPOX_WINDDK)
 #TEMPLATE_VPOXMAINEXE_TOOL               = $(VPOX_VCC_TOOL)
 TEMPLATE_VPOXMAINEXE_TOOL.win.x86       = $(VPOX_VCC_TOOL_STEM)X86
 TEMPLATE_VPOXMAINEXE_TOOL.win.amd64     = $(VPOX_VCC_TOOL_STEM)AMD64
 TEMPLATE_VPOXMAINEXE_CXXFLAGS           = -Zi -Zl -GR -EHsc -GF -MD$(VPOX_VCC_CRT_TYPE) -Zc:wchar_t- $(VPOX_VCC_OPT) $(VPOX_VCC_FP)
 #    -wd4625: 'DisplaySourceBitmap' : copy constructor could not be generated because a base class copy constructor is inaccessible
 #    -wd4626: 'DisplaySourceBitmap' : assignment operator could not be generated because a base class assignment operator is inaccessible
 #             The two above can be cured by adding private: DECLARE_CLS_COPY_CTOR_ASSIGN_NOOP(xxxx); but too much work.
 #    -wd4355: 'this' : used in base member initializer list (e.g. VirtualPoxBase.cpp)
 TEMPLATE_VPOXMAINEXE_CXXFLAGS          += $(VPOX_VCC_WARN_ALL) -wd4625 -wd4626 -wd4355 $(VPOX_VCC_WERR)
 TEMPLATE_VPOXMAINEXE_CXXFLAGS.debug     = -RTCsu
 TEMPLATE_VPOXMAINEXE_CXXFLAGS.dbgopt    = $(NO_SUCH_VARIABLE)
 TEMPLATE_VPOXMAINEXE_CXXFLAGS.kprofile  = -Gh -GH
 TEMPLATE_VPOXMAINEXE_CFLAGS             = $(TEMPLATE_VPOXMAINEXE_CXXFLAGS)
 TEMPLATE_VPOXMAINEXE_CFLAGS.debug       = $(TEMPLATE_VPOXMAINEXE_CXXFLAGS.debug)
 TEMPLATE_VPOXMAINEXE_CFLAGS.dbgopt      = $(TEMPLATE_VPOXMAINEXE_CXXFLAGS.dbgopt)
 TEMPLATE_VPOXMAINEXE_CFLAGS.kprofile    = $(TEMPLATE_VPOXMAINEXE_CXXFLAGS.kprofile)
 TEMPLATE_VPOXMAINEXE_PCHFLAGS           = $(TEMPLATE_VPOXMAINEXE_CXXFLAGS)
 TEMPLATE_VPOXMAINEXE_PCHFLAGS.debug     = $(TEMPLATE_VPOXMAINEXE_CXXFLAGS.debug)
 TEMPLATE_VPOXMAINEXE_PCHFLAGS.dbgopt    = $(TEMPLATE_VPOXMAINEXE_CXXFLAGS.dbgopt)
 TEMPLATE_VPOXMAINEXE_PCHFLAGS.kprofile  = $(TEMPLATE_VPOXMAINEXE_CXXFLAGS.kprofile)
 TEMPLATE_VPOXMAINEXE_LDFLAGS            = -Ignore:4197 \
	/NOD /INCREMENTAL:NO /MAPINFO:EXPORTS /LargeAddressAware /DynamicBase /NxCompat /Release /Debug /Opt:Ref /Opt:Icf \
	/Version:$(VPOX_VERSION_MAJOR)0$(VPOX_VERSION_MINOR).$(VPOX_VERSION_BUILD) \
	/STUB:$(PATH_ROOT)/src/VPox/HostDrivers/Support/win/winstub.com \
	/DISALLOWLIB:libc.lib \
	/DISALLOWLIB:libcd.lib \
	/DISALLOWLIB:libcmt.lib \
	/DISALLOWLIB:libcmtd.lib \
	/DISALLOWLIB:msvcrt$(VPOX_VCC_CRT_TYPE_N).lib \
	/DISALLOWLIB:msvcprt$(VPOX_VCC_CRT_TYPE_N).lib
 if defined(VPOX_SIGNING_MODE) && defined(VPOX_WITH_HARDENING)
  TEMPLATE_VPOXMAINEXE_LDFLAGS          += -IntegrityCheck
 endif
 ifdef VPOX_WITH_DTRACE_R3_MAIN
  TEMPLATE_VPOXMAINEXE_LDFLAGS          += -Merge:VTGPrLc.Data=VTGPrLc.Begin -Merge:VTGPrLc.End=VTGPrLc.Begin -Merge:VTGPrLc.Begin=VTGObj
 endif
 TEMPLATE_VPOXMAINEXE_LIBS               = \
	$(LIB_RUNTIME)
 TEMPLATE_VPOXMAINEXE_LIBS.x86           = \
	$(PATH_TOOL_$(TEMPLATE_VPOXMAINEXE_TOOL.win.x86)_LIB)/msvcrt$(VPOX_VCC_CRT_TYPE).lib \
	$(PATH_TOOL_$(TEMPLATE_VPOXMAINEXE_TOOL.win.x86)_LIB)/msvcprt$(VPOX_VCC_CRT_TYPE).lib \
	$(PATH_TOOL_$(TEMPLATE_VPOXMAINEXE_TOOL.win.x86)_LIB)/oldnames.lib
 TEMPLATE_VPOXMAINEXE_LIBS.amd64         = \
	$(PATH_TOOL_$(TEMPLATE_VPOXMAINEXE_TOOL.win.amd64)_LIB)/msvcrt$(VPOX_VCC_CRT_TYPE).lib \
	$(PATH_TOOL_$(TEMPLATE_VPOXMAINEXE_TOOL.win.amd64)_LIB)/msvcprt$(VPOX_VCC_CRT_TYPE).lib \
	$(PATH_TOOL_$(TEMPLATE_VPOXMAINEXE_TOOL.win.amd64)_LIB)/oldnames.lib
 TEMPLATE_VPOXMAINEXE_POST_CMDS          = $(VPOX_SIGN_IMAGE_CMDS)
 TEMPLATE_VPOXMAINEXE_ORDERDEPS          = $(VPOX_SIGN_IMAGE_CMDS_ORDERDEPS)

else # the GCC guys:

TEMPLATE_VPOXMAINEXE_TOOL                = $(VPOX_GCC_TOOL)
 if $(VPOX_GCC_VERSION_CC) < 30400
  TEMPLATE_VPOXMAINEXE_DEFS             += RT_WITHOUT_PRAGMA_ONCE
 endif
TEMPLATE_VPOXMAINEXE_CXXFLAGS            = -g $(VPOX_GCC_pipe) \
	$(VPOX_GCC_PEDANTIC_CXX) $(VPOX_GCC_Wno-variadic-macros) $(VPOX_GCC_Wno-multistatement-macros) $(VPOX_GCC_Wno-class-memaccess) -Wshadow \
	-fshort-wchar -fpermissive -fexceptions -frtti $(VPOX_GCC_OPT) $(VPOX_GCC_FP) -fno-strict-aliasing \
	$(VPOX_GCC_fvisibility-inlines-hidden) $(VPOX_GCC_fvisibility-hidden) $(VPOX_GCC_std) $(VPOX_GCC_IPRT_FMT_CHECK)
 if !defined("VPOX_GCC_Wno-delete-non-virtual-dtor") && defined("VPOX_GCC_Wno-non-virtual-dtor")
  TEMPLATE_VPOXMAINEXE_CXXFLAGS         += $(VPOX_GCC_Wno-non-virtual-dtor)
 endif
 ifdef VPOX_WITH_NO_GCC_WARNING_POLICY
  TEMPLATE_VPOXMAINEXE_CXXFLAGS         += $(VPOX_GCC_WERR)
 endif
 ifdef VPOX_WITH_DTRACE_R3_MAIN
  TEMPLATE_VPOXMAINEXE_CXXFLAGS := $(filter-out -pedantic,$(TEMPLATE_VPOXMAINEXE_CXXFLAGS)) -fdollars-in-identifiers # annoying gcc option precedence.
 endif
TEMPLATE_VPOXMAINEXE_CXXFLAGS.x86        = -m32
TEMPLATE_VPOXMAINEXE_CXXFLAGS.amd64      = -m64
TEMPLATE_VPOXMAINEXE_CXXFLAGS.kprofile   = -finstrument-functions
TEMPLATE_VPOXMAINEXE_CXXFLAGS.debug      = $(VPOX_GCC_SANITIZER_FLAGS)
TEMPLATE_VPOXMAINEXE_CFLAGS              = -g $(VPOX_GCC_pipe) $(VPOX_GCC_PEDANTIC_C) $(VPOX_GCC_Wno-variadic-macros) \
	$(VPOX_GCC_OPT) $(VPOX_GCC_FP) -fno-strict-aliasing $(VPOX_GCC_fvisibility-hidden) $(VPOX_GCC_IPRT_FMT_CHECK)
 ifdef VPOX_WITH_NO_GCC_WARNING_POLICY
  TEMPLATE_VPOXMAINEXE_CFLAGS           += $(VPOX_GCC_WERR)
 endif
TEMPLATE_VPOXMAINEXE_CFLAGS.x86          = -m32
TEMPLATE_VPOXMAINEXE_CFLAGS.amd64        = -m64
TEMPLATE_VPOXMAINEXE_CFLAGS.kprofile     = $(TEMPLATE_VPOXMAINEXE_CXXFLAGS.kprofile)
TEMPLATE_VPOXMAINEXE_CFLAGS.debug        = $(TEMPLATE_VPOXMAINEXE_CXXFLAGS.debug)
TEMPLATE_VPOXMAINEXE_OBJCFLAGS           = $(TEMPLATE_VPOXMAINEXE_CFLAGS)
TEMPLATE_VPOXMAINEXE_OBJCFLAGS.x86       = $(TEMPLATE_VPOXMAINEXE_CFLAGS.x86)
TEMPLATE_VPOXMAINEXE_OBJCFLAGS.amd64     = $(TEMPLATE_VPOXMAINEXE_CFLAGS.amd64)
TEMPLATE_VPOXMAINEXE_OBJCFLAGS.debug     = $(TEMPLATE_VPOXMAINEXE_CFLAGS.debug)
TEMPLATE_VPOXMAINEXE_OBJCFLAGS.kprofile  = $(TEMPLATE_VPOXMAINEXE_CFLAGS.kprofile)
TEMPLATE_VPOXMAINEXE_OBJCXXFLAGS         = $(TEMPLATE_VPOXMAINEXE_CXXFLAGS)
TEMPLATE_VPOXMAINEXE_OBJCXXFLAGS.x86     = $(TEMPLATE_VPOXMAINEXE_CXXFLAGS.x86)
TEMPLATE_VPOXMAINEXE_OBJCXXFLAGS.amd64   = $(TEMPLATE_VPOXMAINEXE_CXXFLAGS.amd64)
TEMPLATE_VPOXMAINEXE_OBJCXXFLAGS.debug   = $(TEMPLATE_VPOXMAINEXE_CXXFLAGS.debug)
TEMPLATE_VPOXMAINEXE_OBJCXXFLAGS.kprofile= $(TEMPLATE_VPOXMAINEXE_CXXFLAGS.kprofile)
TEMPLATE_VPOXMAINEXE_PCHFLAGS            = $(TEMPLATE_VPOXMAINEXE_CXXFLAGS)
TEMPLATE_VPOXMAINEXE_PCHFLAGS.x86        = $(TEMPLATE_VPOXMAINEXE_CXXFLAGS.x86)
TEMPLATE_VPOXMAINEXE_PCHFLAGS.amd64      = $(TEMPLATE_VPOXMAINEXE_CXXFLAGS.amd64)
TEMPLATE_VPOXMAINEXE_PCHFLAGS.debug      = $(TEMPLATE_VPOXMAINEXE_CXXFLAGS.debug)
TEMPLATE_VPOXMAINEXE_PCHFLAGS.kprofile   = $(TEMPLATE_VPOXMAINEXE_CXXFLAGS.kprofile)
TEMPLATE_VPOXMAINEXE_LDFLAGS.x86         = -m32
TEMPLATE_VPOXMAINEXE_LDFLAGS.amd64       = -m64
TEMPLATE_VPOXMAINEXE_LDFLAGS.debug       = $(VPOX_GCC_SANITIZER_FLAGS) $(VPOX_GCC_SANITIZER_LDFLAGS)
 ifeq ($(KBUILD_TARGET),linux)
TEMPLATE_VPOXMAINEXE_LIBS                = pthread m rt $(LIB_RUNTIME) dl
TEMPLATE_VPOXMAINEXE_LDFLAGS.linux       = -Wl,-z,noexecstack,-z,relro $(VPOX_LD_as_needed)
 else ifeq ($(KBUILD_TARGET),os2)
TEMPLATE_VPOXMAINEXE_TOOL                = GXX3OMF
TEMPLATE_VPOXMAINEXE_LIBS                = $(LIB_RUNTIME)
 else ifeq ($(KBUILD_TARGET),darwin)
TEMPLATE_VPOXMAINEXE_TOOL                = $(VPOX_GCC_TOOL)
TEMPLATE_VPOXMAINEXE_DEFS               += $(VPOX_DARWIN_DEF_SDK_DEFS)
TEMPLATE_VPOXMAINEXE_CFLAGS             += $(VPOX_DARWIN_DEF_SDK_CFLAGS)
TEMPLATE_VPOXMAINEXE_CXXFLAGS           += $(VPOX_DARWIN_DEF_SDK_CXXFLAGS)
TEMPLATE_VPOXMAINEXE_OBJCFLAGS          += $(VPOX_DARWIN_DEF_SDK_OBJCFLAGS)
TEMPLATE_VPOXMAINEXE_OBJCXXFLAGS        += $(VPOX_DARWIN_DEF_SDK_OBJCXXFLAGS)
TEMPLATE_VPOXMAINEXE_LDFLAGS.darwin     += -bind_at_load
TEMPLATE_VPOXMAINEXE_LDFLAGS            += $(VPOX_DARWIN_DEF_SDK_LDFLAGS) -framework Carbon
TEMPLATE_VPOXMAINEXE_LIBS                = $(LIB_RUNTIME)
 else ifeq ($(KBUILD_TARGET),haiku)
TEMPLATE_VPOXMAINEXE_TOOL                = GXX3
TEMPLATE_VPOXMAINEXE_LIBS                = $(LIB_RUNTIME) network stdc++ supc++
 else if1of ($(KBUILD_TARGET), freebsd openbsd)
TEMPLATE_VPOXMAINEXE_TOOL                = GXX3
TEMPLATE_VPOXMAINEXE_LIBS                = $(LIB_RUNTIME)
TEMPLATE_VPOXMAINEXE_INCS               += \
	/usr/include \
	/usr/X11R6/include \
	/usr/local/include
TEMPLATE_VPOXMAINEXE_LIBPATH            += \
	/usr/lib \
	/usr/X11R6/lib \
	/usr/local/lib
 else ifeq ($(KBUILD_TARGET),netbsd)
TEMPLATE_VPOXMAINEXE_TOOL                = GXX3
TEMPLATE_VPOXMAINEXE_LIBS                = $(LIB_RUNTIME)
TEMPLATE_VPOXMAINEXE_INCS               += \
	/usr/include \
	/usr/X11R7/include
TEMPLATE_VPOXMAINEXE_LIBPATH            += \
	/usr/lib \
	/usr/X11R7/lib
else ifeq ($(KBUILD_TARGET),solaris)
TEMPLATE_VPOXMAINEXE_TOOL                = GXX3PLAIN
TEMPLATE_VPOXMAINEXE_DEFS               += _REENTRANT
TEMPLATE_VPOXMAINEXE_LIBS                = $(LIB_RUNTIME) rt thread
 else
$(warning Warning: VPOX Build: Target $(KBUILD_TARGET) is not officially supported!)
TEMPLATE_VPOXMAINEXE_LIBS                =
 endif
TEMPLATE_VPOXMAINEXE_LDFLAGS.solaris     = -Wl,-z,ignore # Same as VPOX_LD_as_needed.
 ifdef VPOX_WITH_RUNPATH
TEMPLATE_VPOXMAINEXE_LDFLAGS            += '$(VPOX_GCC_RPATH_OPT)$(VPOX_WITH_RUNPATH)'
 else ifdef VPOX_WITH_RELATIVE_RUNPATH
TEMPLATE_VPOXMAINEXE_LDFLAGS            += '$(VPOX_GCC_RPATH_OPT)$(VPOX_WITH_RELATIVE_RUNPATH)'
 endif
 ifdef VPOX_WITH_ORIGIN
TEMPLATE_VPOXMAINEXE_LDFLAGS.linux      += $(VPOX_GCC_ORIGIN_OPT)
 endif

endif # !win

# Add COM/XPCOM stuff
TEMPLATE_VPOXMAINEXE_LIBS               += \
	$(PATH_STAGE_LIB)/VPoxCOM$(VPOX_SUFF_LIB)
ifdef VPOX_WITH_XPCOM
 ## @todo may be worth creating the VPOX_XPCOM SDK def
 TEMPLATE_VPOXMAINEXE_DEFS              += VPOX_WITH_XPCOM
 ifdef VPOX_WITH_XPCOM_NAMESPACE_CLEANUP
  TEMPLATE_VPOXMAINEXE_DEFS             += VPOX_WITH_XPCOM_NAMESPACE_CLEANUP
 endif
 TEMPLATE_VPOXMAINEXE_INCS              += \
	$(VPOX_XPCOM_INCS)
 TEMPLATE_VPOXMAINEXE_LIBS              += \
	$(LIB_XPCOM)
 TEMPLATE_VPOXMAINEXE_INTERMEDIATES     += \
	$(VPOX_PATH_SDK)/bindings/xpcom/include/VirtualPox_XPCOM.h

else  # COM
 TEMPLATE_VPOXMAINEXE_INCS              += \
	$(VPOX_PATH_SDK)/bindings/mscom/include
 TEMPLATE_VPOXMAINEXE_INTERMEDIATES     += \
	$(VPOX_PATH_SDK)/bindings/mscom/include/VirtualPox.h
endif # COM

#
# Template for building the Main DLL modules (such as in-process COM/XPCOM
# components for Main).
#
# This differs from VPOXMAINEXE only in PIC handling and similar DLL stuff.
#
TEMPLATE_VPOXMAINDLL  = VPox Main Component (shared library)
TEMPLATE_VPOXMAINDLL_EXTENDS = VPOXMAINEXE
ifn1of ($(KBUILD_TARGET), darwin haiku os2 win)
 TEMPLATE_VPOXMAINDLL_DEFS     = PIC $(TEMPLATE_VPOXMAINEXE_DEFS)
 TEMPLATE_VPOXMAINDLL_CFLAGS   = -fPIC $(TEMPLATE_VPOXMAINEXE_CFLAGS)
 TEMPLATE_VPOXMAINDLL_CXXFLAGS = -fPIC $(TEMPLATE_VPOXMAINEXE_CXXFLAGS)
 TEMPLATE_VPOXMAINDLL_PCHFLAGS = -fPIC $(TEMPLATE_VPOXMAINEXE_PCHFLAGS)
 TEMPLATE_VPOXMAINDLL_LDFLAGS  = -fPIC $(TEMPLATE_VPOXMAINEXE_LDFLAGS)
endif
TEMPLATE_VPOXMAINDLL_LDFLAGS.darwin = $(filter-out -bind_at_load,$(TEMPLATE_VPOXMAINEXE_LDFLAGS.darwin)) \
	-current_version $(VPOX_VERSION_MAJOR).$(VPOX_VERSION_MINOR).$(VPOX_VERSION_BUILD) \
	-compatibility_version $(VPOX_VERSION_MAJOR).$(VPOX_VERSION_MINOR).$(VPOX_VERSION_BUILD)

#
# Template identical to VPOXMAINDLL except for where the stuff is
# installed when using XPCOM (components/).
#
# Note! In the hardened build this gets a bit ugly since $ORIGIN/..
#       doesn't work. So, we keep the $ORIGIN from VPOXMAINEXE and let
#       the installers do the necessary .so symlinking.
#
# (No difference when building against COM on Windows.)
#
TEMPLATE_VPOXMAINCOMP            = VPox Main COM/XPCOM Component (shared library)
TEMPLATE_VPOXMAINCOMP_EXTENDS    = VPOXMAINEXE
ifn1of ($(KBUILD_TARGET), win)
 TEMPLATE_VPOXMAINCOMP_INST      = $(INST_BIN)components/
endif
ifneq ($(KBUILD_TARGET),win)
 ifeq ($(filter-out solaris.x86 %.amd64 %.sparc32 %.sparc64,$(KBUILD_TARGET).$(KBUILD_TARGET_ARCH)),) ## TODO: cleanup!
  TEMPLATE_VPOXMAINCOMP_DEFS     = PIC $(TEMPLATE_VPOXMAINEXE_DEFS)
  TEMPLATE_VPOXMAINCOMP_CFLAGS   = -fPIC $(TEMPLATE_VPOXMAINEXE_CFLAGS)
  TEMPLATE_VPOXMAINCOMP_CXXFLAGS = -fPIC $(TEMPLATE_VPOXMAINEXE_CXXFLAGS)
  TEMPLATE_VPOXMAINCOMP_PCHFLAGS = -fPIC $(TEMPLATE_VPOXMAINEXE_PCHFLAGS)
  if defined(VPOX_WITH_RELATIVE_RUNPATH) && !defined(VPOX_WITH_HARDENING)
   TEMPLATE_VPOXMAINCOMP_LDFLAGS = -fPIC $(filter-out '$(VPOX_GCC_RPATH_OPT)%',$(TEMPLATE_VPOXMAINEXE_LDFLAGS)) '$(VPOX_GCC_RPATH_OPT)$(VPOX_WITH_RELATIVE_RUNPATH)/..'
  else
   TEMPLATE_VPOXMAINCOMP_LDFLAGS = -fPIC $(TEMPLATE_VPOXMAINEXE_LDFLAGS)
  endif
 else ifndef VPOX_WITH_HARDENING
  ifdef VPOX_WITH_RELATIVE_RUNPATH
   TEMPLATE_VPOXMAINCOMP_LDFLAGS = $(filter-out '$(VPOX_GCC_RPATH_OPT)%',$(TEMPLATE_VPOXMAINEXE_LDFLAGS)) '$(VPOX_GCC_RPATH_OPT)$(VPOX_WITH_RELATIVE_RUNPATH)/..'
  endif
 endif
endif
TEMPLATE_VPOXMAINCOMP_LDFLAGS.darwin = $(filter-out -bind_at_load,$(TEMPLATE_VPOXMAINEXE_LDFLAGS.darwin)) \
	-current_version $(VPOX_VERSION_MAJOR).$(VPOX_VERSION_MINOR).$(VPOX_VERSION_BUILD) \
	-compatibility_version $(VPOX_VERSION_MAJOR).$(VPOX_VERSION_MINOR).$(VPOX_VERSION_BUILD)

TEMPLATE_VPoxMainComp-x86  = 32-bit VPox Main Component (shared library)
TEMPLATE_VPoxMainComp-x86_EXTENDS = VPOXMAINCOMP
TEMPLATE_VPoxMainComp-x86_BLD_TRG_ARCH = x86
TEMPLATE_VPoxMainComp-x86_INST.win = $(INST_DLL)x86/
TEMPLATE_VPoxMainComp-x86_DEFS = $(filter-out HC_ARCH_BITS%,$(TEMPLATE_VPOXMAINCOMP_DEFS)) HC_ARCH_BIT=32 ARCH_BITS=32 \
	VPOX_IN_32_ON_64_MAIN_API
TEMPLATE_VPoxMainComp-x86_LIBS = \
	$(subst $(PATH_STAGE_LIB)/VPoxCOM$(VPOX_SUFF_LIB),$(PATH_STAGE_LIB)/VPoxCOM-x86$(VPOX_SUFF_LIB),\
	$(subst $(LIB_RUNTIME),$(VPOX_LIB_RUNTIME_X86),\
	$(subst $(LIB_XPCOM),$(VPOX_LIB_XPCOM_X86),\
	$(TEMPLATE_VPOXMAINCOMP_LIBS))))
ifeq ($(KBUILD_TARGET),solaris)
 ifdef VPOX_WITH_RUNPATH
  TEMPLATE_VPoxMainComp-x86_LDFLAGS = \
	$(filter-out '$(VPOX_GCC_RPATH_OPT)$(VPOX_WITH_RUNPATH)',$(TEMPLATE_VPOXMAINCOMP_LDFLAGS)) \
	'$(VPOX_GCC_RPATH_OPT)$(VPOX_PATH_APP_PRIVATE)' \
	'$(VPOX_GCC_RPATH_OPT)$(VPOX_WITH_RUNPATH)'
 endif
endif


#
# Template for building the Main static libraries.
#
# This differs from VPOXMAINDLL only that it zeroes out the _LIBS definition.
#
TEMPLATE_VPoxMainLib  = VPox Main Component (static library)
TEMPLATE_VPoxMainLib_EXTENDS = VPOXMAINDLL
TEMPLATE_VPoxMainLib_LIBS =

TEMPLATE_VPoxMainLib-x86  = 32-bit VPox Main Component (static library)
TEMPLATE_VPoxMainLib-x86_EXTENDS = VPoxMainLib
TEMPLATE_VPoxMainLib-x86_BLD_TRG_ARCH = x86
TEMPLATE_VPoxMainLib-x86_DEFS = $(filter-out HC_ARCH_BITS%,$(TEMPLATE_VPoxMainLib_DEFS)) HC_ARCH_BIT=32 ARCH_BITS=32 \
	VPOX_IN_32_ON_64_MAIN_API

#
# Main unit testing, for compiling API implementation files into a testcase.
# This is the VPOXMAINEXE template only with a different install dir.
#
TEMPLATE_VPOXMAINTSTEXE  = VPox Main Testcase Exe
TEMPLATE_VPOXMAINTSTEXE_EXTENDS = VPOXMAINEXE
TEMPLATE_VPOXMAINTSTEXE_INST    = $(INST_TESTCASE)
ifdef VPOX_WITH_RUNPATH
 TEMPLATE_VPOXMAINTSTEXE_LDFLAGS = '$(VPOX_GCC_RPATH_OPT)$(VPOX_WITH_RUNPATH)' $(TEMPLATE_VPOXMAINEXE_LDFLAGS)
else ifdef VPOX_WITH_RELATIVE_RUNPATH
 TEMPLATE_VPOXMAINTSTEXE_LDFLAGS = '$(VPOX_GCC_RPATH_OPT)$(VPOX_WITH_RELATIVE_RUNPATH)/..' $(TEMPLATE_VPOXMAINEXE_LDFLAGS)
endif
if "$(KBUILD_TARGET)" == "win" && defined(VPOX_SIGNING_MODE)
 TEMPLATE_VPOXMAINTSTEXE_POST_CMDS =
endif

#
# Template for building executables that use the VPox Main component.
#
TEMPLATE_VPOXMAINCLIENTEXE              = VPox Main Client (executable)
TEMPLATE_VPOXMAINCLIENTEXE_EXTENDS      = VPOXMAINEXE
ifeq ($(KBUILD_TARGET),win)
 TEMPLATE_VPOXMAINCLIENTEXE_DEPS		= $(VPOX_PATH_SDK)/bindings/mscom/include/VirtualPox.h
 TEMPLATE_VPOXMAINCLIENTEXE_LIBS.win	= $(TEMPLATE_VPOXMAINEXE_LIBS.win) \
   $(PATH_SDK_$(VPOX_WINPSDK)_LIB)/User32.Lib \
   $(PATH_SDK_$(VPOX_WINPSDK)_LIB)/Shell32.Lib \
   $(PATH_SDK_$(VPOX_WINPSDK)_LIB)/ShLwApi.Lib \
   $(PATH_SDK_$(VPOX_WINPSDK)_LIB)/Ole32.Lib \
   $(PATH_SDK_$(VPOX_WINPSDK)_LIB)/OleAut32.Lib \
   $(PATH_SDK_$(VPOX_WINPSDK)_LIB)/Uuid.Lib
else
 TEMPLATE_VPOXMAINCLIENTEXE_DEPS		= $(VPOX_PATH_SDK)/bindings/xpcom/include/VirtualPox_XPCOM.h
 TEMPLATE_VPOXMAINCLIENTEXE_DEFS		= $(TEMPLATE_VPOXMAINEXE_DEFS) \
	NDEBUG TRIMMED
 TEMPLATE_VPOXMAINCLIENTEXE_CXXFLAGS.linux = $(TEMPLATE_VPOXMAINEXE_CXXFLAGS.linux) -pthread
 TEMPLATE_VPOXMAINCLIENTEXE_PCHFLAGS.linux = $(TEMPLATE_VPOXMAINEXE_PCHFLAGS.linux) -pthread
endif

#
# Template for building shared libraries / DLLs that use the VPox Main component.
#
# This differs from VPOXMAINCLIENTEXE only in PIC handling and similar DLL stuff.
#
TEMPLATE_VPOXMAINCLIENTDLL              = VPox MAIN Client (shared library)
TEMPLATE_VPOXMAINCLIENTDLL_EXTENDS      = VPOXMAINCLIENTEXE
ifn1of ($(KBUILD_TARGET), darwin os2 win)
 TEMPLATE_VPOXMAINCLIENTDLL_DEFS        = PIC $(TEMPLATE_VPOXMAINCLIENTEXE_DEFS)
 TEMPLATE_VPOXMAINCLIENTDLL_CFLAGS      = -fPIC $(TEMPLATE_VPOXMAINCLIENTEXE_CFLAGS)
 TEMPLATE_VPOXMAINCLIENTDLL_CXXFLAGS    = -fPIC $(TEMPLATE_VPOXMAINCLIENTEXE_CXXFLAGS)
 TEMPLATE_VPOXMAINCLIENTDLL_PCHFLAGS    = -fPIC $(TEMPLATE_VPOXMAINCLIENTEXE_PCHFLAGS)
 TEMPLATE_VPOXMAINCLIENTDLL_LDFLAGS     = -fPIC $(TEMPLATE_VPOXMAINCLIENTEXE_LDFLAGS)
endif
TEMPLATE_VPOXMAINCLIENTDLL_LDFLAGS.darwin = $(filter-out -bind_at_load,$(TEMPLATE_VPOXMAINCLIENTEXE_LDFLAGS.darwin))

#
# Template for building testcases which are API clients.
#
TEMPLATE_VPOXMAINCLIENTTSTEXE           = VPox Main Client Testcase (executable)
TEMPLATE_VPOXMAINCLIENTTSTEXE_EXTENDS   = VPOXMAINCLIENTEXE
TEMPLATE_VPOXMAINCLIENTTSTEXE_INST      = $(INST_TESTCASE)
ifdef VPOX_WITH_RUNPATH
 TEMPLATE_VPOXMAINCLIENTTSTEXE_LDFLAGS = '$(VPOX_GCC_RPATH_OPT)$(VPOX_WITH_RUNPATH)' $(TEMPLATE_VPOXMAINCLIENTEXE_LDFLAGS)
else ifdef VPOX_WITH_RELATIVE_RUNPATH
 TEMPLATE_VPOXMAINCLIENTTSTEXE_LDFLAGS = '$(VPOX_GCC_RPATH_OPT)$(VPOX_WITH_RELATIVE_RUNPATH)/..' $(TEMPLATE_VPOXMAINCLIENTEXE_LDFLAGS)
endif
if "$(KBUILD_TARGET)" == "win" && defined(VPOX_SIGNING_MODE)
 TEMPLATE_VPOXMAINCLIENTTSTEXE_POST_CMDS =
endif



#
# Templates used for building the extension packs.
#
ifdef VPOX_WITH_EXTPACK
 # Base templates (native or portable).
 TEMPLATE_VPoxR3ExtPack = For the ring-3 context extension pack modules.
 if 1 # Native for now.
  TEMPLATE_VPoxR3ExtPack_EXTENDS = VPOXR3DLLNOXCPT
  TEMPLATE_VPoxR3ExtPack_DEFS = $(TEMPLATE_VPOXR3DLLNOXCPT_DEFS) VPOX_IN_EXTPACK VPOX_IN_EXTPACK_R3
 else
  TEMPLATE_VPoxR3ExtPack_EXTENDS = VPoxNoCrtGccLib
  TEMPLATE_VPoxR3ExtPack_DEFS = $(TEMPLATE_VPoxNoCrtGccLib_DEFS) VPOX_IN_EXTPACK VPOX_IN_EXTPACK_R3 IPRT_NO_CRT IN_RING3
  TEMPLATE_VPoxR3ExtPack_INCS = $(PATH_ROOT)/include/iprt/nocrt $(TEMPLATE_VPOXR3DLLNOXCPT_INCS)
 endif
 ifneq ($(KBUILD_TARGET),win)
  TEMPLATE_VPoxR3ExtPack_CXXFLAGS = $(TEMPLATE_VPOXR3DLLNOXCPT_CXXFLAGS) -fno-rtti
  TEMPLATE_VPoxR3ExtPack_PCHFLAGS = $(TEMPLATE_VPOXR3DLLNOXCPT_PCHFLAGS) -fno-rtti
 endif
 TEMPLATE_VPoxR3ExtPack_INST = $(INST_EXTPACK)YouShallOverrideThis/
 ifeq ($(KBUILD_TARGET),linux)
  TEMPLATE_VPoxR3ExtPack_LDFLAGS = $(filter-out '$(VPOX_GCC_RPATH_OPT)$(VPOX_WITH_RUNPATH)' '$(VPOX_GCC_RPATH_OPT)$(VPOX_WITH_RELATIVE_RUNPATH)', $(TEMPLATE_VPOXR3DLLNOXCPT_LDFLAGS))
 else if !defined(VPOX_WITH_RUNPATH) && defined(VPOX_WITH_RELATIVE_RUNPATH)
   TEMPLATE_VPoxR3ExtPack_LDFLAGS = '$(VPOX_GCC_RPATH_OPT)$(VPOX_WITH_RELATIVE_RUNPATH)/../../..' $(filter-out '$(VPOX_GCC_RPATH_OPT)$(VPOX_WITH_RELATIVE_RUNPATH)', $(TEMPLATE_VPOXR3DLLNOXCPT_LDFLAGS))
 endif
 ifdef VPOX_ONLY_EXTPACKS_USE_IMPLIBS
  if1of ($(KBUILD_TARGET), win os2)
   TEMPLATE_VPoxR3ExtPack_LIBS = \
   	$(TEMPLATE_LIBS_VPOXR3) \
   	$(if-expr "$(VPOX_LIB_VMM_LAZY)" == "$(LIB_VMM)", $(PATH_STAGE_LIB)/VMMR3Imp$(VPOX_SUFF_LIB), $(VPOX_LIB_VMM_LAZY)) \
   	$(PATH_STAGE_LIB)/VPoxRTImp$(VPOX_SUFF_LIB)
  else
   TEMPLATE_VPoxR3ExtPack_LIBS = \
   	$(TEMPLATE_LIBS_VPOXR3) \
   	$(if-expr "$(VPOX_LIB_VMM_LAZY)" == "$(LIB_VMM)", $(PATH_STAGE_LIB)/VMMR3Imp$(VPOX_SUFF_DLL), $(VPOX_LIB_VMM_LAZY)) \
   	$(PATH_STAGE_LIB)/VPoxRTImp$(VPOX_SUFF_DLL)
  endif
 else
  TEMPLATE_VPoxR3ExtPack_LIBS = \
  	$(TEMPLATE_LIBS_VPOXR3) \
  	$(LIB_RUNTIME) \
  	$(VPOX_LIB_VMM_LAZY)
 endif
 ifeq ($(KBUILD_TARGET),darwin)
  TEMPLATE_VPoxR3ExtPack_POST_CMDS = $(VPOX_SIGN_EXTPACK_DYLIB_CMDS)
 endif

 TEMPLATE_VPoxR3ExtPackApi = For the ring-3 context extension pack modules using the Main API.
 TEMPLATE_VPoxR3ExtPackApi_EXTENDS = VPOXMAINDLL
 TEMPLATE_VPoxR3ExtPackApi_DEFS = $(TEMPLATE_VPOXMAINDLL_DEFS) VPOX_IN_EXTPACK VPOX_IN_EXTPACK_R3
 TEMPLATE_VPoxR3ExtPackApi_INST = $(INST_EXTPACK)YouShallOverrideThis/
 ifeq ($(KBUILD_TARGET),linux)
  TEMPLATE_VPoxR3ExtPackApi_LDFLAGS = $(filter-out '$(VPOX_GCC_RPATH_OPT)$(VPOX_WITH_RUNPATH)' '$(VPOX_GCC_RPATH_OPT)$(VPOX_WITH_RELATIVE_RUNPATH)', $(TEMPLATE_VPOXMAINDLL_LDFLAGS))
 else if !defined(VPOX_WITH_RUNPATH) && defined(VPOX_WITH_RELATIVE_RUNPATH)
   TEMPLATE_VPoxR3ExtPackApi_LDFLAGS = '$(VPOX_GCC_RPATH_OPT)$(VPOX_WITH_RELATIVE_RUNPATH)/../../..' $(filter-out '$(VPOX_GCC_RPATH_OPT)$(VPOX_WITH_RELATIVE_RUNPATH)', $(TEMPLATE_VPOXMAINDLL_LDFLAGS))
 endif
 ifdef VPOX_ONLY_EXTPACKS_USE_IMPLIBS
  if1of ($(KBUILD_TARGET), win os2)
   TEMPLATE_VPoxR3ExtPackApi_LIBS = \
   	$(TEMPLATE_LIBS_VPOXR3) \
   	$(if-expr "$(VPOX_LIB_VMM_LAZY)" == "$(LIB_VMM)", $(PATH_STAGE_LIB)/VMMR3Imp$(VPOX_SUFF_LIB), $(VPOX_LIB_VMM_LAZY)) \
   	$(PATH_STAGE_LIB)/VPoxRTImp$(VPOX_SUFF_LIB)
  else
   TEMPLATE_VPoxR3ExtPackApi_LIBS = \
   	$(TEMPLATE_LIBS_VPOXR3) \
   	$(if-expr "$(VPOX_LIB_VMM_LAZY)" == "$(LIB_VMM)", $(PATH_STAGE_LIB)/VMMR3Imp$(VPOX_SUFF_DLL), $(VPOX_LIB_VMM_LAZY)) \
   	$(PATH_STAGE_LIB)/VPoxRTImp$(VPOX_SUFF_DLL)
  endif
 else
  TEMPLATE_VPoxR3ExtPackApi_LIBS = \
  	$(TEMPLATE_LIBS_VPOXR3) \
  	$(LIB_RUNTIME) \
  	$(VPOX_LIB_VMM_LAZY)
 endif
 ifeq ($(KBUILD_TARGET),darwin)
  TEMPLATE_VPoxR3ExtPackApi_POST_CMDS = $(VPOX_SIGN_EXTPACK_DYLIB_CMDS)
 endif

 TEMPLATE_VPoxR0ExtPack = For the ring-0 context extension pack modules.
 TEMPLATE_VPoxR0ExtPack_EXTENDS = VPoxR0
 TEMPLATE_VPoxR0ExtPack_EXTENDS_BY = appending
 TEMPLATE_VPoxR0ExtPack_INST = $(INST_EXTPACK)YouShallOverrideThis/
 TEMPLATE_VPoxR0ExtPack_DEFS = VPOX_IN_EXTPACK VPOX_IN_EXTPACK_R0
 if1of ($(VPOX_LDR_FMT), pe lx)
  TEMPLATE_VPoxR0ExtPack_LIBS = \
	$(PATH_STAGE_LIB)/VMMR0Imp$(VPOX_SUFF_LIB)
 endif
 TEMPLATE_VPoxR0ExtPack_LIBS += \
 	$(VPOX_LIB_SUPR0)

 TEMPLATE_VPoxRcExtPack = For the raw-mode context extension pack modules.
 TEMPLATE_VPoxRcExtPack_EXTENDS = VPoxRc
 TEMPLATE_VPoxRcExtPack_EXTENDS_BY = appending
 TEMPLATE_VPoxRcExtPack_SYSSUFF = .rc
 TEMPLATE_VPoxRcExtPack_INST = $(INST_EXTPACK)YouShallOverrideThis/
 TEMPLATE_VPoxRcExtPack_DEFS = VPOX_IN_EXTPACK VPOX_IN_EXTPACK_RC
 if1of ($(VPOX_LDR_FMT32), pe lx)
  TEMPLATE_VPoxRcExtPack_LIBS = \
	$(PATH_STAGE_LIB)/VMMRCBuiltin$(VPOX_SUFF_LIB) \
	$(PATH_STAGE_LIB)/VMMRCImp$(VPOX_SUFF_LIB)
 endif

 TEMPLATE_VPoxInsExtPack = For the install targets of an extension pack.
 TEMPLATE_VPoxInsExtPack_MODE = 0644
 TEMPLATE_VPoxInsExtPack_INST = $(INST_EXTPACK)YouShallOverrideThis/

 # For each individual extension pack
 ifdef VPOX_WITH_EXTPACK_PUEL
  TEMPLATE_VPoxR3ExtPackPuel = For the ring-3 context modules in the PUEL extension pack.
  TEMPLATE_VPoxR3ExtPackPuel_EXTENDS = VPoxR3ExtPack
  TEMPLATE_VPoxR3ExtPackPuel_INST = $(INST_EXTPACK_PUEL)$(KBUILD_TARGET).$(KBUILD_TARGET_ARCH)/
  TEMPLATE_VPoxR3ExtPackPuel_DEFS = $(TEMPLATE_VPoxR3ExtPack_DEFS) VPOX_IN_PUEL_EXTPACK
  TEMPLATE_VPoxR3ExtPackPuel_LD_DEBUG = split

  TEMPLATE_VPoxR3ExtPackApiPuel = For the ring-3 context modules in the PUEL extension pack.
  TEMPLATE_VPoxR3ExtPackApiPuel_EXTENDS = VPoxR3ExtPackApi
  TEMPLATE_VPoxR3ExtPackApiPuel_INST = $(INST_EXTPACK_PUEL)$(KBUILD_TARGET).$(KBUILD_TARGET_ARCH)/
  TEMPLATE_VPoxR3ExtPackApiPuel_DEFS = $(TEMPLATE_VPoxR3ExtPackApi_DEFS) VPOX_IN_PUEL_EXTPACK
  TEMPLATE_VPoxR3ExtPackApiPuel_LD_DEBUG = split

  TEMPLATE_VPoxR3ExtPackPuelWithOpenSsl = For the ring-3 context modules in the PUEL extension pack using ExtPack OpenSSL.
  TEMPLATE_VPoxR3ExtPackPuelWithOpenSsl_EXTENDS = VPoxR3ExtPackPuel
  ifdef VPOX_NEED_EXTPACK_OPENSSL
   TEMPLATE_VPoxR3ExtPackPuelWithOpenSsl_INCS = \
   	$(TEMPLATE_VPoxR3ExtPack_INCS) \
   	$(SDK_VPOX_OPENSSL_VPOX_DEFAULT_INCS)
   TEMPLATE_VPoxR3ExtPackPuelWithOpenSsl_LIBS = \
   	$(PATH_STAGE_LIB)/VPoxExtPack-libssl$(VPOX_SUFF_LIB) \
   	$(PATH_STAGE_LIB)/VPoxExtPack-libcrypto$(VPOX_SUFF_LIB) \
   	$(TEMPLATE_VPoxR3ExtPack_LIBS) # Must come after the two libraries or we'll pick up SSL from VPoxRT!
  endif

  TEMPLATE_VPoxR0ExtPackPuel = For the ring-0 context modules in the PUEL extension pack.
  TEMPLATE_VPoxR0ExtPackPuel_EXTENDS = VPoxR0ExtPack
  TEMPLATE_VPoxR0ExtPackPuel_INST = $(INST_EXTPACK_PUEL)$(KBUILD_TARGET).$(KBUILD_TARGET_ARCH)/
  TEMPLATE_VPoxR0ExtPackPuel_DEFS = $(TEMPLATE_VPoxR0ExtPack_DEFS) VPOX_IN_PUEL_EXTPACK

  TEMPLATE_VPoxRcExtPackPuel = For the raw-mode context modules in the PUEL extension pack.
  TEMPLATE_VPoxRcExtPackPuel_EXTENDS = VPoxRcExtPack
  TEMPLATE_VPoxRcExtPackPuel_INST = $(INST_EXTPACK_PUEL)$(KBUILD_TARGET).$(KBUILD_TARGET_ARCH)/
  TEMPLATE_VPoxRcExtPackPuel_DEFS = $(TEMPLATE_VPoxRcExtPack_DEFS) VPOX_IN_PUEL_EXTPACK

  TEMPLATE_VPoxInsExtPackPuel = For the install targets of an extension pack.
  TEMPLATE_VPoxInsExtPackPuel_EXTENDS = VPoxR0ExtPack
  TEMPLATE_VPoxInsExtPackPuel_INST = $(INST_EXTPACK_PUEL)
 endif

endif # VPOX_WITH_EXTPACK


#
# Qt
# Qt
# Qt
#
ifdef VPOX_WITH_QTGUI

 # Guess VPOX_WITH_ORACLE_QT
 ifndef VPOX_WITH_ORACLE_QT
  ifndef VPOX_OSE
   if1of ($(KBUILD_TARGET), darwin solaris win)
    VPOX_WITH_ORACLE_QT := 1
   endif
  endif
 endif

 #
 # Handmade configuration of Qt - very annoying, this needs to
 # be cleaned up properly later some time (not important now).
 #
 ifeq ($(VPOX_PATH_QT),)
  ifeq ($(KBUILD_TARGET),darwin)
   VPOX_PATH_QT := $(lastword $(sort $(wildcard $(KBUILD_DEVTOOLS_TRG)/qt/v5*)))
   ifeq ($(VPOX_PATH_QT),)
    ifneq ($(wildcard /Library/Frameworks/QtCore.framework),)
     # Using the global installation (for OSE).
     VPOX_PATH_QT ?= /usr
     VPOX_PATH_QT_FRAMEWORKS ?= /Library/Frameworks
    endif
   endif
  else if1of ($(KBUILD_TARGET), win)
   VPOX_PATH_QT ?= $(lastword $(filter %-$(tolower $(VPOX_VCC_TOOL_STEM)),$(sort $(wildcard $(KBUILD_DEVTOOLS_TRG)/qt/v5*))))
  else if1of ($(KBUILD_TARGET), linux solaris)
   VPOX_PATH_QT ?= $(lastword $(sort $(wildcard $(KBUILD_DEVTOOLS_TRG)/qt/v5*)))
   ifneq ($(VPOX_PATH_QT),)
    VPOX_WITH_ORACLE_QT = 1
   endif
  endif
 endif
 ifeq ($(VPOX_PATH_QT),)
  if1of ($(USERNAME), bird)
   # gentoo (64-bit)
   VPOX_PATH_QT          ?= /usr
   VPOX_PATH_QT_LIB      ?= /usr/lib/qt5
  endif
 endif
 VPOX_PATH_QT            ?= /usr
 VPOX_PATH_QT_LIB        ?= $(VPOX_PATH_QT)/lib

 ifdef VPOX_WITH_ORACLE_QT
  VPOX_QT_INFIX=VPox
 endif

 ifeq ($(KBUILD_TARGET), darwin)
  VPOX_QT_MOD = \
   QtCore QtGui QtWidgets QtPrintSupport QtMacExtras \
   $(if $(VPOX_GUI_USE_QGL),QtOpenGL,)
 else if1of ($(KBUILD_TARGET), linux freebsd netbsd openbsd solaris win)
  VPOX_QT_MOD += \
   Qt5Core Qt5Gui Qt5Widgets Qt5PrintSupport \
   $(if $(VPOX_GUI_USE_QGL),Qt5OpenGL,)
   if1of ($(KBUILD_TARGET), linux freebsd netbsd openbsd solaris)
    VPOX_QT_MOD += \
     Qt5DBus Qt5XcbQpa Qt5X11Extras
    # legacy libraries required to be installed on EL5
    VPOX_QT_LEGACY_LIBS = \
     $(if $(VPOX_LD_HAS_LIBXCB),,libxcb.so.1 libX11.so.6 libX11-xcb.so.1)
    VPOX_QT_PLUGINS = \
      plugins/platforms/libqxcb.so \
      plugins/xcbglintegrations/libqxcb-glx-integration.so
   else ifeq ($(KBUILD_TARGET), win)
    VPOX_QT_MOD += \
     Qt5WinExtras
   endif # win
 endif # linux freebsd netbsd openbsd solaris win

 VPOX_QT_MOD_NAMES = $(foreach qtmod,$(VPOX_QT_MOD),$(qtmod)$(VPOX_QT_INFIX))

 # Hack LD_LIBRARY_PATH for stuff in tools.
 ifdef VPOX_WITH_ORACLE_QT
  if1of ($(KBUILD_TARGET), linux solaris)
   export LD_LIBRARY_PATH := $(VPOX_PATH_QT_LIB):$(LD_LIBRARY_PATH)
  endif
 endif


 #
 # Template for building Qt GUI executables.
 #
 TEMPLATE_VPOXQTGUIEXE = VPox Qt GUI Executable
 TEMPLATE_VPOXQTGUIEXE_USES = qt5
 TEMPLATE_VPOXQTGUIEXE_QTTOOL = QT5
 TEMPLATE_VPOXQTGUIEXE_MOCTOOL = QT5
 TEMPLATE_VPOXQTGUIEXE_UICTOOL = QT5
 TEMPLATE_VPOXQTGUIEXE_RCCTOOL = QT5
 TEMPLATE_VPOXQTGUIEXE_LRCTOOL = QT5
 TEMPLATE_VPOXQTGUIEXE_SDKS = QT5
 TEMPLATE_VPOXQTGUIEXE_MOCDEFS.darwin += QT_VERSION=0x050602
 TEMPLATE_VPOXQTGUIEXE_QT_INFIX = $(VPOX_QT_INFIX)
 TEMPLATE_VPOXQTGUIEXE_DEFS = IN_RING3 QT_NO_DEBUG QT_THREAD_SUPPORT QT_SHARED HAVE_CONFIG_H $(ARCH_BITS_DEFS)
 TEMPLATE_VPOXQTGUIEXE_RCDEFS = $(TEMPLATE_VPOXR3EXE_RCDEFS)

 ifeq ($(KBUILD_TARGET),win)
  # Note! No use of VPOX_VCC_CRT_TYPE here yet as it requires a /MDd build of Qt as well.
  TEMPLATE_VPOXQTGUIEXE_TOOL = $(VPOX_VCC_TOOL)
  TEMPLATE_VPOXQTGUIEXE_DEFS += \
     _WIN32_WINNT=0x0500 UNICODE _UNICODE \
     QT_DLL _CRT_SECURE_NO_DEPRECATE \
     $(QMAKE_PRL_DEFINES)
  TEMPLATE_VPOXQTGUIEXE_CXXFLAGS = -nologo -Zm200 -MD -Zi -EHsc -Zc:wchar_t-
  #    -wd4481: nonstandard extension used: override specifier 'override'
  #    -wd4625: 'QRubberBand' : copy constructor could not be generated because a base class copy constructor is inaccessible
  #    -wd4626: 'QRubberBand' : assignment operator could not be generated because a base class assignment operator is inaccessible
  #    -wd4640: qmetatype.h(2210): warning C4640: 'f' : construction of local static object is not thread-safe [too bad]
  #    -wd4350: behavior change: 'int QStringList::indexOf(const QRegExp &,int) const' called instead of 'int QStringList::indexOf(QRegExp &,int) const'
  #    -wd4121: UIActionPool.h(393) : warning C4121: 'UIActionPool::PointerToFunction' : alignment of a member was sensitive to packing
  #    -wd4718: qmap.h(222) : warning C4718: 'QMapNode<enum DetailsElementType,bool>::destroySubTree' : recursive call has no side effects, deleting
  TEMPLATE_VPOXQTGUIEXE_CXXFLAGS += $(VPOX_VCC_WARN_ALL) -wd4481 -wd4625 -wd4626 -wd4640 -wd4350 -wd4371 -wd4121 -wd4718 $(VPOX_VCC_WERR)
  if1of ($(VPOX_VCC_TOOL_STEM), VCC120)
   #   -wd4619: qvectro.h(305 : warning C4619: #pragma warning : there is no warning number '4345'
   TEMPLATE_VPOXQTGUIEXE_CXXFLAGS += -wd4619
  endif
  TEMPLATE_VPOXQTGUIEXE_CXXFLAGS.debug = -RTCsu
  TEMPLATE_VPOXQTGUIEXE_CXXFLAGS.debug = -RTCsu
  TEMPLATE_VPOXQTGUIEXE_CXXFLAGS.dbgopt = $(NO_SUCH_VARIABLE)
  TEMPLATE_VPOXQTGUIEXE_PCHFLAGS        = $(TEMPLATE_VPOXQTGUIEXE_CXXFLAGS)
  TEMPLATE_VPOXQTGUIEXE_PCHFLAGS.debug  = $(TEMPLATE_VPOXQTGUIEXE_CXXFLAGS.debug)
  TEMPLATE_VPOXQTGUIEXE_PCHFLAGS.dbgopt = $(TEMPLATE_VPOXQTGUIEXE_CXXFLAGS.dbgopt)
  TEMPLATE_VPOXQTGUIEXE_LDFLAGS = -Ignore:4197 \
	/NOD /INCREMENTAL:NO /MAPINFO:EXPORTS /LargeAddressAware /DynamicBase /NxCompat /Release /Debug /Opt:Ref /Opt:Icf \
	/Version:$(VPOX_VERSION_MAJOR)0$(VPOX_VERSION_MINOR).$(VPOX_VERSION_BUILD) \
	/STUB:$(PATH_ROOT)/src/VPox/HostDrivers/Support/win/winstub.com
  if defined(VPOX_SIGNING_MODE) && defined(VPOX_WITH_HARDENING)
   TEMPLATE_VPOXQTGUIEXE_LDFLAGS += -IntegrityCheck
  endif
  TEMPLATE_VPOXQTGUIEXE_SDKS += $(VPOX_WINPSDK)
  TEMPLATE_VPOXQTGUIEXE_LIBS = \
	$(VPOX_LIBS_QT) \
	$(LIB_RUNTIME) \
	$(VPOX_LIB_VMM_LAZY) \
	$(PATH_TOOL_$(VPOX_VCC_TOOL)_LIB)/msvcprt.lib \
	$(PATH_TOOL_$(VPOX_VCC_TOOL)_LIB)/msvcrt.lib \
	$(PATH_TOOL_$(VPOX_VCC_TOOL)_LIB)/oldnames.lib \
	$(PATH_TOOL_$(VPOX_VCC_TOOL)_LIB)/delayimp.lib
  TEMPLATE_VPOXQTGUIEXE_POST_CMDS = $(VPOX_SIGN_IMAGE_CMDS)
  TEMPLATE_VPOXQTGUIEXE_ORDERDEPS     = $(VPOX_SIGN_IMAGE_CMDS_ORDERDEPS)

 else # the gcc guys:
  TEMPLATE_VPOXQTGUIEXE_TOOL = $(VPOX_GCC_TOOL)
  if $(VPOX_GCC_VERSION_CC) < 30400
   TEMPLATE_VPOXQTGUIEXE_DEFS += RT_WITHOUT_PRAGMA_ONCE
  endif
  TEMPLATE_VPOXQTGUIEXE_DEFS.linux = _REENTRANT
  TEMPLATE_VPOXQTGUIEXE_DEFS.solaris = _REENTRANT

  ## @todo Use VPOX_GCC_PEDANTIC_CXX?
  TEMPLATE_VPOXQTGUIEXE_CXXFLAGS = \
	-g $(VPOX_GCC_pipe) $(filter-out -Wno-unused $(VPOX_GCC_Wno-unused-parameter),$(VPOX_GCC_WARN)) -frtti -fno-exceptions \
	-Wno-long-long -fshort-wchar -fno-strict-aliasing \
	$(VPOX_GCC_fvisibility-hidden) $(VPOX_GCC_fvisibility-inlines-hidden) $(VPOX_GCC_Wno-multistatement-macros) $(VPOX_GCC_Wno-ignored-qualifiers) \
	$(VPOX_GCC_Wno-return-type-c-linkage) $(VPOX_GCC_std) $(VPOX_GCC_IPRT_FMT_CHECK)
  ifdef VPOX_WITH_NO_GCC_WARNING_POLICY
   TEMPLATE_VPOXQTGUIEXE_CXXFLAGS += $(VPOX_GCC_WERR)
  endif
  ifn1of ($(USERNAME),dsen serkan) # Bunch of stuff deprecated after 5.6.*. These guys knows how to deal with it. :)
   TEMPLATE_VPOXQTGUIEXE_CXXFLAGS += $(VPOX_GCC_Wno-deprecated-declarations)
  endif
  TEMPLATE_VPOXQTGUIEXE_CXXFLAGS.x86 = -m32
  TEMPLATE_VPOXQTGUIEXE_CXXFLAGS.amd64 = -m64
  TEMPLATE_VPOXQTGUIEXE_CXXFLAGS.linux = -pthread
  TEMPLATE_VPOXQTGUIEXE_CXXFLAGS.debug = $(VPOX_GCC_SANITIZER_FLAGS)
  TEMPLATE_VPOXQTGUIEXE_PCHFLAGS       = $(TEMPLATE_VPOXQTGUIEXE_CXXFLAGS)
  TEMPLATE_VPOXQTGUIEXE_PCHFLAGS.x86   = $(TEMPLATE_VPOXQTGUIEXE_CXXFLAGS.x86)
  TEMPLATE_VPOXQTGUIEXE_PCHFLAGS.amd64 = $(TEMPLATE_VPOXQTGUIEXE_CXXFLAGS.amd64)
  TEMPLATE_VPOXQTGUIEXE_PCHFLAGS.linux = $(TEMPLATE_VPOXQTGUIEXE_CXXFLAGS.linux)
  TEMPLATE_VPOXQTGUIEXE_PCHFLAGS.debug = $(TEMPLATE_VPOXQTGUIEXE_CXXFLAGS.debug)
  TEMPLATE_VPOXQTGUIEXE_PCHFLAGS.dbgopt = $(TEMPLATE_VPOXQTGUIEXE_CXXFLAGS.dbgopt)
  TEMPLATE_VPOXQTGUIEXE_OBJCFLAGS = -g $(VPOX_GCC_pipe) $(VPOX_GCC_PEDANTIC_C) -fno-exceptions $(VPOX_GCC_IPRT_FMT_CHECK)
  TEMPLATE_VPOXQTGUIEXE_OBJCFLAGS.x86 = $(TEMPLATE_VPOXQTGUIEXE_CXXFLAGS.x86)
  TEMPLATE_VPOXQTGUIEXE_OBJCFLAGS.amd64 = $(TEMPLATE_VPOXQTGUIEXE_CXXFLAGS.amd64)
  TEMPLATE_VPOXQTGUIEXE_OBJCXXFLAGS = \
	-g $(VPOX_GCC_pipe) $(VPOX_GCC_PEDANTIC_CXX) \
	-frtti -fno-exceptions $(VPOX_GCC_fvisibility-hidden) $(VPOX_GCC_fvisibility-inlines-hidden) $(VPOX_GCC_IPRT_FMT_CHECK)
  ifdef VPOX_WITH_NO_GCC_WARNING_POLICY
   TEMPLATE_VPOXQTGUIEXE_OBJCXXFLAGS += $(VPOX_GCC_WERR)
  endif
  TEMPLATE_VPOXQTGUIEXE_OBJCXXFLAGS.x86 = $(TEMPLATE_VPOXQTGUIEXE_CXXFLAGS.x86)
  TEMPLATE_VPOXQTGUIEXE_OBJCXXFLAGS.amd64 = $(TEMPLATE_VPOXQTGUIEXE_CXXFLAGS.amd64)
  TEMPLATE_VPOXQTGUIEXE_LDFLAGS.x86 = -m32
  TEMPLATE_VPOXQTGUIEXE_LDFLAGS.amd64 = -m64
  TEMPLATE_VPOXQTGUIEXE_LDFLAGS.debug = $(VPOX_GCC_SANITIZER_FLAGS) $(VPOX_GCC_SANITIZER_LDFLAGS)
  TEMPLATE_VPOXQTGUIEXE_LIBS = \
	$(VPOX_LIBS_QT) \
	$(LIB_RUNTIME) \
	$(if-expr "$(LIB_VMM)" == "$(VPOX_LIB_VMM_LAZY)",$(LIB_REM),) \
	$(VPOX_LIB_VMM_LAZY)

  ifeq ($(KBUILD_TARGET),linux)
   TEMPLATE_VPOXQTGUIEXE_LDFLAGS += -Wl,-z,noexecstack,-z,relro $(VPOX_LD_as_needed)
   TEMPLATE_VPOXQTGUIEXE_LIBS += \
     $(VPOX_XCURSOR_LIBS) \
	Xext \
	X11
    TEMPLATE_VPOXQTGUIEXE_LIBPATH += \
	$(VPOX_LIBPATH_X11)
   if defined(VPOX_WITH_ORACLE_QT) && !defined(VPOX_LD_HAS_LIBXCB)
    TEMPLATE_VPOXQTGUIEXE_LIBPATH += $(PATH_SDK_QT5_LIB)/legacy
    TEMPLATE_VPOXQTGUIEXE_INCS    += $(PATH_SDK_QT5_INC)/legacy
   endif
  else ifeq ($(KBUILD_TARGET),darwin)
   TEMPLATE_VPOXQTGUIEXE_DEFS.darwin        += $(VPOX_DARWIN_DEF_SDK_DEFS)
   TEMPLATE_VPOXQTGUIEXE_CFLAGS.darwin      += $(VPOX_DARWIN_DEF_SDK_CFLAGS)
   TEMPLATE_VPOXQTGUIEXE_CXXFLAGS.darwin    += $(VPOX_DARWIN_DEF_SDK_CXXFLAGS)
   TEMPLATE_VPOXQTGUIEXE_PCHFLAGS.darwin    += $(TEMPLATE_VPOXQTGUIEXE_CXXFLAGS.darwin)
   TEMPLATE_VPOXQTGUIEXE_OBJCFLAGS.darwin   += $(VPOX_DARWIN_DEF_SDK_OBJCFLAGS)
   TEMPLATE_VPOXQTGUIEXE_OBJCXXFLAGS.darwin += $(VPOX_DARWIN_DEF_SDK_OBJCXXFLAGS)
   TEMPLATE_VPOXQTGUIEXE_LDFLAGS.darwin     += $(VPOX_DARWIN_DEF_SDK_LDFLAGS) -bind_at_load
   TEMPLATE_VPOXQTGUIEXE_LIBS +=
   TEMPLATE_VPOXQTGUIEXE_LIBPATH +=
  else
   TEMPLATE_VPOXQTGUIEXE_INCS += \
	$(VPOX_XCURSOR_INCS)
   TEMPLATE_VPOXQTGUIEXE_LIBS += \
     $(VPOX_XCURSOR_LIBS) \
	Xext \
	X11 \
	m \
	$(LIB_PTHREAD)
   TEMPLATE_VPOXQTGUIEXE_LIBPATH += \
	$(VPOX_LIBPATH_X11)
   ifeq ($(KBUILD_TARGET),freebsd)
    TEMPLATE_VPOXQTGUIEXE_INCS += \
	/usr/include \
	/usr/X11R6/include \
	/usr/local/include
    TEMPLATE_VPOXQTGUIEXE_LIBPATH += \
	/usr/lib \
	/usr/X11R6/lib \
	/usr/local/lib
   endif
   ifeq ($(KBUILD_TARGET),solaris)
    TEMPLATE_VPOXQTGUIEXE_LDFLAGS.solaris = -Wl,-z,ignore # Same as VPOX_LD_as_needed.
    TEMPLATE_VPOXQTGUIEXE_LIBS += \
         rt socket nsl
   endif
  endif
  # Assume the Qt shared objects are in the same directory as the executable, on Solaris too.
  ifdef VPOX_WITH_RUNPATH
   TEMPLATE_VPOXQTGUIEXE_LDFLAGS += '$(VPOX_GCC_RPATH_OPT)$(VPOX_WITH_RUNPATH)'
  else ifdef VPOX_WITH_RELATIVE_RUNPATH
   TEMPLATE_VPOXQTGUIEXE_LDFLAGS += '$(VPOX_GCC_RPATH_OPT)$(VPOX_WITH_RELATIVE_RUNPATH)'
  endif

 endif

 # Add COM/XPCOM stuff
 TEMPLATE_VPOXQTGUIEXE_LIBS += \
	$(PATH_STAGE_LIB)/VPoxCOM$(if-expr defined(VPOX_WITH_DEBUG_VCC_CRT) && $(KBUILD_TARGET) == win,-GUI,)$(VPOX_SUFF_LIB)
 ifdef VPOX_WITH_XPCOM
  ## @todo may be worth creating the VPOX_XPCOM SDK def, or just a SDK_VPOXXPCOM.
  TEMPLATE_VPOXQTGUIEXE_DEFS += VPOX_WITH_XPCOM
  ifdef VPOX_WITH_XPCOM_NAMESPACE_CLEANUP
   TEMPLATE_VPOXQTGUIEXE_DEFS += VPOX_WITH_XPCOM_NAMESPACE_CLEANUP
  endif
  TEMPLATE_VPOXQTGUIEXE_INCS += \
	$(VPOX_XPCOM_INCS)
  TEMPLATE_VPOXQTGUIEXE_LIBS += \
	$(LIB_XPCOM)
  TEMPLATE_VPOXQTGUIEXE_INTERMEDIATES += \
	$(VPOX_PATH_SDK)/bindings/xpcom/include/VirtualPox_XPCOM.h
 else  # COM
  TEMPLATE_VPOXQTGUIEXE_INCS += \
	$(VPOX_PATH_SDK)/bindings/mscom/include
  TEMPLATE_VPOXQTGUIEXE_INTERMEDIATES += \
	$(VPOX_PATH_SDK)/bindings/mscom/include/VirtualPox.h
 endif # COM

 ifn1of ($(KBUILD_TARGET), darwin os2 win)
   TEMPLATE_VPOXQTGUIEXE_DEFS     += PIC
   TEMPLATE_VPOXQTGUIEXE_CFLAGS   += -fPIC
   TEMPLATE_VPOXQTGUIEXE_CXXFLAGS += -fPIC
   # Needed for GCC 9. Even system's Qt 5.12.4 (on Ubuntu 19.10) did not have this fixed yet.
   TEMPLATE_VPOXQTGUIEXE_CXXFLAGS.linux = -Wno-deprecated-copy $(TEMPLATE_VPOXQTGUIEXE_CXXFLAGS)
   TEMPLATE_VPOXQTGUIEXE_LDFLAGS  += -fPIC
 endif # not darwin, os2 or win

 ifeq ($(KBUILD_TARGET),darwin)
  TEMPLATE_VPOXQTGUIEXE_POST_CMDS = $(QUIET)install_name_tool $(foreach qtmod, $(VPOX_QT_MOD_NAMES), \
	$(foreach prefix, @executable_path/../Frameworks/ $(VPOX_PATH_QT)/Frameworks/ $(PATH_SDK_QT)/, \
		-change "$(prefix)$(qtmod).framework/Versions/5/$(qtmod)" \
			"$(if $(VPOX_WITH_HARDENING),/Applications/VirtualPox.app/Contents/Frameworks,@rpath)/$(qtmod).framework/Versions/5/$(qtmod)" ) ) "$(out)"
 endif

 #
 # Template for building Qt GUI components.
 #
 TEMPLATE_VPOXQTGUI = VPox Qt GUI Components
 TEMPLATE_VPOXQTGUI_EXTENDS = VPOXQTGUIEXE
 TEMPLATE_VPOXQTGUI_LIBS = $(filter-out $(QTMAIN),$(TEMPLATE_VPOXQTGUIEXE_LIBS))
 ifeq ($(KBUILD_TARGET),darwin)
  TEMPLATE_VPOXQTGUI_LDFLAGS.darwin += $(filter-out -bind_at_load,$(TEMPLATE_VPOXQTGUIEXE_LDFLAGS.darwin)) \
	-current_version $(VPOX_VERSION_MAJOR).$(VPOX_VERSION_MINOR).$(VPOX_VERSION_BUILD) \
	-compatibility_version $(VPOX_VERSION_MAJOR).$(VPOX_VERSION_MINOR).$(VPOX_VERSION_BUILD)
 endif
 ifn1of ($(KBUILD_TARGET), darwin os2 win)
   TEMPLATE_VPOXQTGUI_DEFS     = PIC $(TEMPLATE_VPOXQTGUIEXE_DEFS)
   TEMPLATE_VPOXQTGUI_CFLAGS   = -fPIC $(TEMPLATE_VPOXQTGUIEXE_CFLAGS)
   TEMPLATE_VPOXQTGUI_CXXFLAGS = -fPIC $(TEMPLATE_VPOXQTGUIEXE_CXXFLAGS)
   TEMPLATE_VPOXQTGUI_PCHFLAGS = $(TEMPLATE_VPOXQTGUI_CXXFLAGS)
   TEMPLATE_VPOXQTGUI_LDFLAGS  = -fPIC $(TEMPLATE_VPOXQTGUIEXE_LDFLAGS)
 endif

endif # VPOX_WITH_QTGUI


#
# Template for installing symbol files that we wish to ship.
#
TEMPLATE_VPoxDbgSyms = Symbol files for VPoxDbg and gurus.
TEMPLATE_VPoxDbgSyms_INST = $(INST_VPOXDBG_SYMS)


#
# Template for building build bldprogs.
# HACK ALERT! The BLD_TRG_* is a hack to allow building libraries as well.
#
TEMPLATE_VPoxBldProg  = VPox Build Program
TEMPLATE_VPoxBldProg_BLD_TRG            := $(KBUILD_HOST)
TEMPLATE_VPoxBldProg_BLD_TRG_ARCH       := $(KBUILD_HOST_ARCH)
TEMPLATE_VPoxBldProg_BLD_TRG_CPU        := $(KBUILD_HOST_CPU)
TEMPLATE_VPoxBldProg_DEFS               := IN_RING3 LOG_DISABLED IN_BLD_PROG
TEMPLATE_VPoxBldProg_DEFS.win           := _CRT_SECURE_NO_DEPRECATE
ifeq ($(KBUILD_TARGET),$(KBUILD_HOST))
 TEMPLATE_VPoxBldProg_ASTOOL            := $(VPOX_ASTOOL)
 TEMPLATE_VPoxBldProg_ASFLAGS.x86       := $(VPOX_ASFLAGS32)
 TEMPLATE_VPoxBldProg_ASFLAGS.amd64     := $(VPOX_ASFLAGS64)
else
 TEMPLATE_VPoxBldProg_ASTOOL            := YASM
 TEMPLATE_VPoxBldProg_ASFLAGS           := -D__YASM__ -Worphan-labels $(VPOX_YASM_Wno-segreg-in-64bit)
 if1of ($(KBUILD_HOST),win)
  TEMPLATE_VPoxBldProg_ASFLAGS          += -g cv8 -DASM_FORMAT_ELF
  TEMPLATE_VPoxBldProg_ASFLAGS.x86      := -f win32
  TEMPLATE_VPoxBldProg_ASFLAGS.amd64    := -f win64
 else if1of ($(KBUILD_HOST),darwin)
  TEMPLATE_VPoxBldProg_ASFLAGS          += -DASM_FORMAT_MACHO
  TEMPLATE_VPoxBldProg_ASFLAGS.x86      := -f macho32
  TEMPLATE_VPoxBldProg_ASFLAGS.amd64    := -f macho64
 else
  TEMPLATE_VPoxBldProg_ASFLAGS          += -g dwarf2 -DASM_FORMAT_ELF
  TEMPLATE_VPoxBldProg_ASFLAGS.x86      := -f elf32
  TEMPLATE_VPoxBldProg_ASFLAGS.amd64    := -f elf64
 endif
endif
ifeq ($(KBUILD_HOST),win)
 TEMPLATE_VPoxBldProg_TOOL              := $(VPOX_VCC_TOOL_STEM)$(toupper $(KBUILD_HOST_ARCH))
 TEMPLATE_VPoxBldProg_SDKS              := ReorderCompilerIncs $(VPOX_WINPSDK)
 TEMPLATE_VPoxBldProg_CXXFLAGS          := -Zi -Zl -GR- -EHsc -GF -Zc:wchar_t- $(VPOX_VCC_OPT) $(VPOX_VCC_FP) -MT$(VPOX_VCC_CRT_TYPE) \
	$(VPOX_VCC_WARN_ALL) $(VPOX_VCC_WERR)
 TEMPLATE_VPoxBldProg_CXXFLAGS.debug    := -RTCsu
 TEMPLATE_VPoxBldProg_CXXFLAGS.dbgopt    = $(NO_SUCH_VARIABLE)
 TEMPLATE_VPoxBldProg_CXXFLAGS.profile   = $(TEMPLATE_VPoxBldProg_CXXFLAGS.release)
 TEMPLATE_VPoxBldProg_CXXFLAGS.kprofile  = $(TEMPLATE_VPoxBldProg_CXXFLAGS.release)
 TEMPLATE_VPoxBldProg_CFLAGS             = $(TEMPLATE_VPoxBldProg_CXXFLAGS)
 TEMPLATE_VPoxBldProg_CFLAGS.debug       = $(TEMPLATE_VPoxBldProg_CXXFLAGS.debug)
 TEMPLATE_VPoxBldProg_CFLAGS.dbgopt      = $(TEMPLATE_VPoxBldProg_CXXFLAGS.dbgopt)
 TEMPLATE_VPoxBldProg_CFLAGS.release     = $(TEMPLATE_VPoxBldProg_CXXFLAGS.release)
 TEMPLATE_VPoxBldProg_CFLAGS.profile     = $(TEMPLATE_VPoxBldProg_CXXFLAGS.profile)
 TEMPLATE_VPoxBldProg_CFLAGS.kprofile    = $(TEMPLATE_VPoxBldProg_CXXFLAGS.kprofile)
 TEMPLATE_VPoxBldProg_PCHFLAGS           = $(TEMPLATE_VPoxBldProg_CXXFLAGS)
 TEMPLATE_VPoxBldProg_PCHFLAGS.debug     = $(TEMPLATE_VPoxBldProg_CXXFLAGS.debug)
 TEMPLATE_VPoxBldProg_PCHFLAGS.dbgopt    = $(TEMPLATE_VPoxBldProg_CXXFLAGS.dbgopt)
 TEMPLATE_VPoxBldProg_PCHFLAGS.release   = $(TEMPLATE_VPoxBldProg_CXXFLAGS.release)
 TEMPLATE_VPoxBldProg_PCHFLAGS.profile   = $(TEMPLATE_VPoxBldProg_CXXFLAGS.profile)
 TEMPLATE_VPoxBldProg_PCHFLAGS.kprofile  = $(TEMPLATE_VPoxBldProg_CXXFLAGS.kprofile)
 TEMPLATE_VPoxBldProg_LDFLAGS            = -Ignore:4197 \
	/NOD /INCREMENTAL:NO /MAPINFO:EXPORTS /LargeAddressAware /DynamicBase /NxCompat /Release /Debug /Opt:Ref /Opt:Icf \
	/Version:$(VPOX_VERSION_MAJOR)0$(VPOX_VERSION_MINOR).$(VPOX_VERSION_BUILD) \
	/DISALLOWLIB:libc$(VPOX_VCC_CRT_TYPE_N).lib \
	/DISALLOWLIB:libcmt$(VPOX_VCC_CRT_TYPE_N).lib \
	/DISALLOWLIB:msvcrt.lib \
	/DISALLOWLIB:msvcrtd.lib \
	/DISALLOWLIB:msvcprt.lib \
	/DISALLOWLIB:msvcprtd.lib
 TEMPLATE_VPoxBldProg_LIBS               = \
	$(PATH_TOOL_$(TEMPLATE_VPoxBldProg_TOOL)_LIB)/oldnames.lib \
	$(PATH_TOOL_$(TEMPLATE_VPoxBldProg_TOOL)_LIB)/libcmt$(VPOX_VCC_CRT_TYPE).lib \
	$(PATH_TOOL_$(TEMPLATE_VPoxBldProg_TOOL)_LIB)/libcpmt$(VPOX_VCC_CRT_TYPE).lib

else
# (gcc of some kind )
TEMPLATE_VPoxBldProg_TOOL                = GXX3
 if $(VPOX_GCC_VERSION_CC) < 30400
TEMPLATE_VPoxBldProg_DEFS               += RT_WITHOUT_PRAGMA_ONCE
 endif
TEMPLATE_VPoxBldProg_CFLAGS              = -g $(VPOX_GCC_pipe) $(VPOX_GCC_PEDANTIC_C) $(VPOX_GCC_Wno-variadic-macros)
 ifdef VPOX_WITH_NO_GCC_WARNING_POLICY
  TEMPLATE_VPoxBldProg_CFLAGS           += $(VPOX_GCC_WERR)
 endif
TEMPLATE_VPoxBldProg_CFLAGS.x86          = -m32
TEMPLATE_VPoxBldProg_CFLAGS.sparc32      = -m32
TEMPLATE_VPoxBldProg_CFLAGS.amd64        = -m64
TEMPLATE_VPoxBldProg_CFLAGS.sparc64      = -m64
TEMPLATE_VPoxBldProg_CFLAGS.release      = -O2 -fno-omit-frame-pointer -fno-strict-aliasing
TEMPLATE_VPoxBldProg_CFLAGS.profile      = $(TEMPLATE_VPoxBldProg_CXXFLAGS.profile)
TEMPLATE_VPoxBldProg_CFLAGS.kprofile     = $(TEMPLATE_VPoxBldProg_CXXFLAGS.kprofile)
TEMPLATE_VPoxBldProg_CXXFLAGS            = -g $(VPOX_GCC_pipe) $(VPOX_GCC_PEDANTIC_CXX) $(VPOX_GCC_Wno-variadic-macros)
 ifdef VPOX_WITH_NO_GCC_WARNING_POLICY
  TEMPLATE_VPoxBldProg_CXXFLAGS         += $(VPOX_GCC_WERR)
 endif
TEMPLATE_VPoxBldProg_CXXFLAGS.x86        = -m32
TEMPLATE_VPoxBldProg_CXXFLAGS.sparc32    = -m32
TEMPLATE_VPoxBldProg_CXXFLAGS.amd64      = -m64
TEMPLATE_VPoxBldProg_CXXFLAGS.sparc64    = -m64
TEMPLATE_VPoxBldProg_CXXFLAGS.release    = -O2 -fno-omit-frame-pointer -fno-strict-aliasing
TEMPLATE_VPoxBldProg_CXXFLAGS.profile    = $(TEMPLATE_VPoxBldProg_CXXFLAGS.release)
TEMPLATE_VPoxBldProg_CXXFLAGS.kprofile   = $(TEMPLATE_VPoxBldProg_CXXFLAGS.release)
TEMPLATE_VPoxBldProg_OBJCFLAGS           = $(TEMPLATE_VPoxBldProg_CFLAGS)
TEMPLATE_VPoxBldProg_OBJCFLAGS.x86       = $(TEMPLATE_VPoxBldProg_CFLAGS.x86)
TEMPLATE_VPoxBldProg_OBJCFLAGS.amd64     = $(TEMPLATE_VPoxBldProg_CFLAGS.amd64)
TEMPLATE_VPoxBldProg_OBJCFLAGS.release   = $(TEMPLATE_VPoxBldProg_CFLAGS.release)
TEMPLATE_VPoxBldProg_OBJCFLAGS.profile   = $(TEMPLATE_VPoxBldProg_CFLAGS.profile)
TEMPLATE_VPoxBldProg_OBJCFLAGS.kprofile  = $(TEMPLATE_VPoxBldProg_CFLAGS.kprofile)
TEMPLATE_VPoxBldProg_OBJCXXFLAGS         = $(TEMPLATE_VPoxBldProg_CXXFLAGS)
TEMPLATE_VPoxBldProg_OBJCXXFLAGS.x86     = $(TEMPLATE_VPoxBldProg_CXXFLAGS.x86)
TEMPLATE_VPoxBldProg_OBJCXXFLAGS.amd64   = $(TEMPLATE_VPoxBldProg_CXXFLAGS.amd64)
TEMPLATE_VPoxBldProg_OBJCXXFLAGS.release = $(TEMPLATE_VPoxBldProg_CXXFLAGS.release)
TEMPLATE_VPoxBldProg_OBJCXXFLAGS.profile = $(TEMPLATE_VPoxBldProg_CXXFLAGS.profile)
TEMPLATE_VPoxBldProg_OBJCXXFLAGS.kprofile= $(TEMPLATE_VPoxBldProg_CXXFLAGS.kprofile)
TEMPLATE_VPoxBldProg_PCHFLAGS         = $(TEMPLATE_VPoxBldProg_CXXFLAGS)
TEMPLATE_VPoxBldProg_PCHFLAGS.x86     = $(TEMPLATE_VPoxBldProg_CXXFLAGS.x86)
TEMPLATE_VPoxBldProg_PCHFLAGS.amd64   = $(TEMPLATE_VPoxBldProg_CXXFLAGS.amd64)
TEMPLATE_VPoxBldProg_PCHFLAGS.release = $(TEMPLATE_VPoxBldProg_CXXFLAGS.release)
TEMPLATE_VPoxBldProg_PCHFLAGS.profile = $(TEMPLATE_VPoxBldProg_CXXFLAGS.profile)
TEMPLATE_VPoxBldProg_PCHFLAGS.kprofile= $(TEMPLATE_VPoxBldProg_CXXFLAGS.kprofile)
TEMPLATE_VPoxBldProg_LDFLAGS.x86         = -m32
TEMPLATE_VPoxBldProg_LDFLAGS.sparc32     = -m32
TEMPLATE_VPoxBldProg_LDFLAGS.amd64       = -m64
TEMPLATE_VPoxBldProg_LDFLAGS.sparc64     = -m64
 ifeq ($(KBUILD_HOST),linux)
TEMPLATE_VPoxBldProg_LIBS                = pthread m rt dl
 else ifeq ($(KBUILD_HOST),os2)
TEMPLATE_VPoxBldProg_TOOL                = GXX3OMF
TEMPLATE_VPoxBldProg_LIBS                = socket iconv
 else ifeq ($(KBUILD_HOST),darwin)
TEMPLATE_VPoxBldProg_TOOL                = $(VPOX_GCC_TOOL)
  if "$(VPOX_DEF_MACOSX_VERSION_MIN)" == "10.7" || "$(VPOX_DARWIN_HOST_VERSION_MAJOR)" == "7"
TEMPLATE_VPoxBldProg_DEFS.darwin         = $(VPOX_DARWIN_DEF_SDK_10_7_DEFS)
TEMPLATE_VPoxBldProg_CFLAGS.darwin       = $(VPOX_DARWIN_DEF_SDK_10_7_CFLAGS) -fno-common
TEMPLATE_VPoxBldProg_CXXFLAGS.darwin     = $(VPOX_DARWIN_DEF_SDK_10_7_CXXFLAGS)
TEMPLATE_VPoxBldProg_PCHFLAGS.darwin     = $(VPOX_DARWIN_DEF_SDK_10_7_CXXFLAGS)
TEMPLATE_VPoxBldProg_OBJCFLAGS.darwin    = $(VPOX_DARWIN_DEF_SDK_10_7_OBJCFLAGS) $(VPOX_GCC_PEDANTIC_C)
TEMPLATE_VPoxBldProg_OBJCXXFLAGS.darwin  = $(VPOX_DARWIN_DEF_SDK_10_7_OBJCXXFLAGS) $(VPOX_GCC_PEDANTIC_CXX)
TEMPLATE_VPoxBldProg_LDFLAGS.darwin      = $(VPOX_DARWIN_DEF_SDK_10_7_LDFLAGS)
  else if "$(VPOX_DEF_MACOSX_VERSION_MIN)" == "10.6" || "$(VPOX_DARWIN_HOST_VERSION_MAJOR)" == "6"
TEMPLATE_VPoxBldProg_DEFS.darwin         = $(VPOX_DARWIN_DEF_SDK_10_6_DEFS)
TEMPLATE_VPoxBldProg_CFLAGS.darwin       = $(VPOX_DARWIN_DEF_SDK_10_6_CFLAGS) -fno-common
TEMPLATE_VPoxBldProg_CXXFLAGS.darwin     = $(VPOX_DARWIN_DEF_SDK_10_6_CXXFLAGS)
TEMPLATE_VPoxBldProg_PCHFLAGS.darwin     = $(VPOX_DARWIN_DEF_SDK_10_6_CXXFLAGS)
TEMPLATE_VPoxBldProg_OBJCFLAGS.darwin    = $(VPOX_DARWIN_DEF_SDK_10_6_OBJCFLAGS) $(VPOX_GCC_PEDANTIC_C)
TEMPLATE_VPoxBldProg_OBJCXXFLAGS.darwin  = $(VPOX_DARWIN_DEF_SDK_10_6_OBJCXXFLAGS) $(VPOX_GCC_PEDANTIC_CXX)
TEMPLATE_VPoxBldProg_LDFLAGS.darwin      = $(VPOX_DARWIN_DEF_SDK_10_6_LDFLAGS)
  else if "$(VPOX_DEF_MACOSX_VERSION_MIN)" == "10.5" || "$(VPOX_DARWIN_HOST_VERSION_MAJOR)" == "5" || defined(VPOX_MACOS_10_5_WORKAROUND)
TEMPLATE_VPoxBldProg_DEFS.darwin         = $(VPOX_DARWIN_DEF_SDK_10_5_DEFS)
TEMPLATE_VPoxBldProg_CFLAGS.darwin       = $(VPOX_DARWIN_DEF_SDK_10_5_CFLAGS) -fno-common
TEMPLATE_VPoxBldProg_CXXFLAGS.darwin     = $(VPOX_DARWIN_DEF_SDK_10_5_CXXFLAGS)
TEMPLATE_VPoxBldProg_PCHFLAGS.darwin     = $(VPOX_DARWIN_DEF_SDK_10_5_CXXFLAGS)
TEMPLATE_VPoxBldProg_OBJCFLAGS.darwin    = $(VPOX_DARWIN_DEF_SDK_10_5_OBJCFLAGS) $(VPOX_GCC_PEDANTIC_C)
TEMPLATE_VPoxBldProg_OBJCXXFLAGS.darwin  = $(VPOX_DARWIN_DEF_SDK_10_5_OBJCXXFLAGS) $(VPOX_GCC_PEDANTIC_CXX)
TEMPLATE_VPoxBldProg_LDFLAGS.darwin      = $(VPOX_DARWIN_DEF_SDK_10_5_LDFLAGS)
  else
TEMPLATE_VPoxBldProg_DEFS.darwin         = $(VPOX_DARWIN_DEF_SDK_DEFS)
TEMPLATE_VPoxBldProg_CFLAGS.darwin       = $(VPOX_DARWIN_DEF_SDK_CFLAGS) -fno-common
TEMPLATE_VPoxBldProg_CXXFLAGS.darwin     = $(VPOX_DARWIN_DEF_SDK_CXXFLAGS)
TEMPLATE_VPoxBldProg_PCHFLAGS.darwin     = $(VPOX_DARWIN_DEF_SDK_CXXFLAGS)
TEMPLATE_VPoxBldProg_OBJCFLAGS.darwin    = $(VPOX_DARWIN_DEF_SDK_OBJCFLAGS) $(VPOX_GCC_PEDANTIC_C)
TEMPLATE_VPoxBldProg_OBJCXXFLAGS.darwin  = $(VPOX_DARWIN_DEF_SDK_OBJCXXFLAGS) $(VPOX_GCC_PEDANTIC_CXX)
TEMPLATE_VPoxBldProg_LDFLAGS.darwin      = $(VPOX_DARWIN_DEF_SDK_LDFLAGS)
  endif
TEMPLATE_VPoxBldProg_LIBS                =
 else ifeq ($(KBUILD_HOST),haiku)
TEMPLATE_VPoxBldProg_TOOL                = GXX3
TEMPLATE_VPoxBldProg_LIBS                = network iconv
TEMPLATE_VPoxBldProg_LIBPATH            += \
	/boot/common/lib
 else if1of ($(KBUILD_HOST), freebsd openbsd)
TEMPLATE_VPoxBldProg_TOOL                = GXX3
TEMPLATE_VPoxBldProg_LIBS                = pthread
TEMPLATE_VPoxBldProg_INCS               += \
	/usr/include \
	/usr/X11R6/include \
	/usr/local/include
TEMPLATE_VPoxBldProg_LIBPATH            += \
	/usr/lib \
	/usr/X11R6/lib \
	/usr/local/lib
 else ifeq ($(KBUILD_HOST),netbsd)
TEMPLATE_VPoxBldProg_TOOL                = GXX3
TEMPLATE_VPoxBldProg_LIBS                = pthread
TEMPLATE_VPoxBldProg_INCS               += \
	/usr/include \
	/usr/X11R7/include
TEMPLATE_VPoxBldProg_LIBPATH            += \
	/usr/lib \
	/usr/X11R7/lib
 else ifeq ($(KBUILD_HOST),solaris)
TEMPLATE_VPoxBldProg_TOOL                = GXX3PLAIN
TEMPLATE_VPoxBldProg_LIBS                = rt
 else
$(warning Warning: VPOX Build: Target $(KBUILD_HOST) is not officially supported!)
 endif

endif # !win


#
# Advanced build programs using IPRT and stuff.
#
TEMPLATE_VPoxAdvBldProg = Advanced VPox Build Program
TEMPLATE_VPoxAdvBldProg_EXTENDS = VPoxBldProg
TEMPLATE_VPoxAdvBldProg_SDKS    = $(TEMPLATE_VPoxBldProg_SDKS)
TEMPLATE_VPoxAdvBldProg_SDKS.win= $(TEMPLATE_VPoxBldProg_SDKS.win) VPOX_NTDLL
TEMPLATE_VPoxAdvBldProg_DEFS    = $(TEMPLATE_VPoxBldProg_DEFS) IN_RT_R3 IN_ADV_BLD_PROG
ifeq ($(KBUILD_HOST),win)
 TEMPLATE_VPoxAdvBldProg_CFLAGS = $(TEMPLATE_VPoxBldProg_CFLAGS) $(VPOX_VCC_WERR)
 TEMPLATE_VPoxAdvBldProg_CXXFLAGS = $(TEMPLATE_VPoxBldProg_CXXFLAGS) $(VPOX_VCC_WERR)
 TEMPLATE_VPoxAdvBldProg_PCHFLAGS = $(TEMPLATE_VPoxAdvBldProg_CXXFLAGS)
endif
TEMPLATE_VPoxAdvBldProg_LIBS    = \
	$(PATH_STAGE_LIB)/RuntimeBldProg$(VPOX_HOSTSUFF_LIB) \
	$(TEMPLATE_VPoxBldProg_LIBS)
TEMPLATE_VPoxAdvBldProg_LIBS.darwin = \
	$(TEMPLATE_VPoxAdvBldProg_LIBS) \
	iconv \
	$(TEMPLATE_VPoxBldProg_LIBS.darwin)
TEMPLATE_VPoxAdvBldProg_LIBS.freebsd = \
	$(TEMPLATE_VPoxAdvBldProg_LIBS) \
	iconv \
	rt \
	$(TEMPLATE_VPoxBldProg_LIBS.freebsd)
TEMPLATE_VPoxAdvBldProg_LIBS.linux = \
	$(TEMPLATE_VPoxAdvBldProg_LIBS) \
	$(TEMPLATE_VPoxBldProg_LIBS.linux)
TEMPLATE_VPoxAdvBldProg_LIBS.solaris = \
	$(TEMPLATE_VPoxAdvBldProg_LIBS) \
	contract \
	kstat \
	rt \
	socket \
	nsl \
	$(TEMPLATE_VPoxBldProg_LIBS.solaris)


#
# Windows rc workaround for crosscompiling.
# (Some (old) Wine versions fails loading msvcrt.dll from the VCC bin directory.)
#
ifneq ($(KBUILD_HOST),win)
 TOOL_VCC80X86_RC    := $(EXEC_X86_WIN32) $(KBUILD_DEVTOOLS)/win.x86/bin/rc.exe
 TOOL_VCC80AMD64_RC  := $(EXEC_X86_WIN32) $(KBUILD_DEVTOOLS)/win.x86/bin/rc.exe
 TOOL_VCC70_RC       := $(EXEC_X86_WIN32) $(KBUILD_DEVTOOLS)/win.x86/bin/rc.exe
 WIN32_MC = $(EXEC_X86_WIN32) $(KBUILD_DEVTOOLS)/win.x86/bin/mc.exe
else
 WIN32_MC = $(EXEC_X86_WIN32) $(firstword $(wildcard \
	$(PATH_SDK_$(VPOX_WINPSDK)_BIN)/MC.Exe\
	$(PATH_SDK_WINPSDK_BIN)/MC.Exe\
	$(PATH_SDK_WINPSDK)/Bin/MC.Exe\
	$(PATH_SDK_WIN32SDK_BIN)/MC.Exe\
	$(PATH_SDK_WIN64SDK_BIN)/MC.Exe\
	$(KBUILD_DEVTOOLS)/win.x86/bin/mc.exe\
	) Sorry_Cannot_find_mc_in_the_PSDK)
endif


#
# Template for building R3 programs for the guest additions.
#
TEMPLATE_VPOXGUESTR3EXE           = VPox Guest Program
ifeq ($(KBUILD_TARGET),win)
 TEMPLATE_VPOXGUESTR3EXE_EXTENDS  = VPOXR3EXE
 TEMPLATE_VPOXGUESTR3EXE_SDKS     = ReorderCompilerIncs $(VPOX_WINPSDK_GST) VPOX_NTDLL
 TEMPLATE_VPOXGUESTR3EXE_CFLAGS   = $(filter-out -MD$(VPOX_VCC_CRT_TYPE), $(TEMPLATE_VPOXR3EXE_CFLAGS)) -MT$(VPOX_VCC_CRT_TYPE)
 TEMPLATE_VPOXGUESTR3EXE_CXXFLAGS = $(filter-out -MD$(VPOX_VCC_CRT_TYPE), $(TEMPLATE_VPOXR3EXE_CFLAGS)) -MT$(VPOX_VCC_CRT_TYPE)
 TEMPLATE_VPOXGUESTR3EXE_LDFLAGS  = $(filter-out -IntegrityCheck /DISALLOWLIB:libcmt$(VPOX_VCC_CRT_TYPE).lib /DISALLOWLIB:libcpmt$(VPOX_VCC_CRT_TYPE).lib, $(TEMPLATE_VPOXR3EXE_LDFLAGS)) \
	/DISALLOWLIB:msvcrt$(VPOX_VCC_CRT_TYPE).lib \
	/DISALLOWLIB:msvcprt$(VPOX_VCC_CRT_TYPE).lib
 TEMPLATE_VPOXGUESTR3EXE_LIBS.x86           = \
 	$(PATH_TOOL_$(TEMPLATE_VPOXGUESTR3EXE_TOOL.win.x86)_LIB)/oldnames.lib \
 	$(PATH_TOOL_$(TEMPLATE_VPOXGUESTR3EXE_TOOL.win.x86)_LIB)/libcmt$(VPOX_VCC_CRT_TYPE).lib \
 	$(PATH_TOOL_$(TEMPLATE_VPOXGUESTR3EXE_TOOL.win.x86)_LIB)/libcpmt$(VPOX_VCC_CRT_TYPE).lib
 TEMPLATE_VPOXGUESTR3EXE_LIBS.amd64         = \
 	$(PATH_TOOL_$(TEMPLATE_VPOXGUESTR3EXE_TOOL.win.amd64)_LIB)/oldnames.lib \
 	$(PATH_TOOL_$(TEMPLATE_VPOXGUESTR3EXE_TOOL.win.amd64)_LIB)/libcmt$(VPOX_VCC_CRT_TYPE).lib \
 	$(PATH_TOOL_$(TEMPLATE_VPOXGUESTR3EXE_TOOL.win.amd64)_LIB)/libcpmt$(VPOX_VCC_CRT_TYPE).lib
 # Hack for running on NT3x, NT4, W2K and XP w/o SP: Change OS and subsystem version in the image.
 # The .bss section trick is for NT 3.1 which doesn't support merging initialized and uninitialized
 # section because it doesn't recognize Misc.VirtualSize.  VPOX_PE_SET_VERSION will unset the !K flag.
 # HACK ALERT! Double expansion of $$(NLTAB).
 TEMPLATE_VPOXGUESTR3EXE_POST_CMDS.win.x86  = $(if $(eq $(tool_do),LINK_LIBRARY),,$(VPOX_PE_SET_VERSION) $(out)$$(NLTAB)$(TEMPLATE_VPOXR3EXE_POST_CMDS))
 TEMPLATE_VPOXGUESTR3EXE_LNK_DEPS.win.x86   = $(if $(eq $(tool_do),LINK_LIBRARY),,$(VPOX_PE_SET_VERSION))
 TEMPLATE_VPOXGUESTR3EXE_LDFLAGS.win.x86    = -Section:.bss,RW!K $(TEMPLATE_VPOXR3EXE_LDFLAGS.win.x86)

 if defined(VPOX_WITH_MORE_NT4_COMPAT_BINARIES) && "$(KBUILD_TARGET).$(KBUILD_TARGET_ARCH)" == "win.x86"
  TEMPLATE_VPOXGUESTR3EXE_LIBS.win.x86 = $(NO_SUCH_VARIABLE)# Ditch RuntimeR3VccTricks2
 endif
else # the gcc guys
 TEMPLATE_VPOXGUESTR3EXE_EXTENDS  = VPOXR3EXE
 TEMPLATE_VPOXGUESTR3EXE_TOOL    := $(subst GXX,GCC,$(TEMPLATE_VPOXR3EXE_TOOL))
 TEMPLATE_VPOXGUESTR3EXE_CXXFLAGS = $(TEMPLATE_VPOXR3EXE_CXXFLAGS) -fno-exceptions -fno-rtti
 # Do not inherit sanitizer flags from VPOXR3EXE in guest executables.  Deal with them separately.
 TEMPLATE_VPOXGUESTR3EXE_CXXFLAGS.debug = $(NO_SUCH_VARIABLE)
 TEMPLATE_VPOXGUESTR3EXE_CFLAGS.debug = $(NO_SUCH_VARIABLE)
 TEMPLATE_VPOXGUESTR3EXE_LDFLAGS.linux = $(filter-out $(VPOX_GCC_ORIGIN_OPT),$(TEMPLATE_VPOXR3EXE_LDFLAGS.linux))
 TEMPLATE_VPOXGUESTR3EXE_LDFLAGS.debug = $(NO_SUCH_VARIABLE)
 TEMPLATE_VPOXGUESTR3EXE_LDFLAGS  = $(filter-out '$(VPOX_GCC_RPATH_OPT)%,$(TEMPLATE_VPOXR3EXE_LDFLAGS))
endif
TEMPLATE_VPOXGUESTR3EXE_INST      = $(INST_ADDITIONS)
TEMPLATE_VPOXGUESTR3EXE_DEFS     := $(filter-out $(ARCH_BITS_DEFS), $(TEMPLATE_VPOXR3EXE_DEFS)) IN_GUEST IN_GUEST_R3 IN_RT_R3 $(VPOX_GC_ARCH_BITS_DEFS) RT_NEED_NEW_AND_DELETE
TEMPLATE_VPOXGUESTR3EXE_DEFS.linux := $(TEMPLATE_VPOXR3EXE_DEFS.linux) LOG_USE_C99 RT_WITHOUT_EXEC_ALLOC
ifeq ($(KBUILD_TARGET),linux) # As few libs as possible on linux.
 TEMPLATE_VPOXGUESTR3EXE_LIBS     = pthread rt m dl
else if1of ($(KBUILD_TARGET), darwin freebsd openbsd)
 TEMPLATE_VPOXGUESTR3EXE_LIBS     = $(TEMPLATE_VPOXR3EXE_LIBS) iconv
else ifeq ($(KBUILD_TARGET), solaris)
 TEMPLATE_VPOXGUESTR3EXE_LIBS     = $(TEMPLATE_VPOXR3EXE_LIBS) nsl
endif

# Use older versions of APIs which were improved in versions of glibc later
# than what we are targetting, and do not use the stack protector, which
# needs glibc 2.4 or later.
TEMPLATE_VPOXGUESTR3EXE_CXXFLAGS.linux    = \
	-include $(PATH_ROOT)/include/iprt/linux/symvers.h \
	$(VPOX_GCC_fno-stack-protector)
TEMPLATE_VPOXGUESTR3EXE_CFLAGS.linux      = $(TEMPLATE_VPOXGUESTR3EXE_CXXFLAGS.linux)
# The GNU_HASH ELF tag is not supported by older systems.
TEMPLATE_VPOXGUESTR3EXE_LDFLAGS.linux      += $(VPOX_LD_hash_style_sysv)

#
# Template for building normal R3 programs for the guest additions.
#
TEMPLATE_NewVPoxGuestR3Exe = VPox Guest Program w/ IPRT and VBGL.
TEMPLATE_NewVPoxGuestR3Exe_EXTENDS  = VPOXGUESTR3EXE
TEMPLATE_NewVPoxGuestR3Exe_LIBS     = \
	$(VPOX_LIB_IPRT_GUEST_R3) \
	$(VPOX_LIB_VBGL_R3) \
	$(VPOX_LIB_IPRT_GUEST_R3) \
	$(TEMPLATE_VPOXGUESTR3EXE_LIBS)
ifeq ($(KBUILD_TARGET),solaris)
TEMPLATE_NewVPoxGuestR3Exe_LIBS += contract
endif

#
# Template for building normal R3 programs for the guest additions, strict.
#
TEMPLATE_VPoxGuestR3Exe = VPox Guest Program w/ IPRT and VBGL.
TEMPLATE_VPoxGuestR3Exe_EXTENDS  = NewVPoxGuestR3Exe
TEMPLATE_VPoxGuestR3Exe_EXTENDS_BY = appending
ifeq ($(KBUILD_TARGET),win)
 TEMPLATE_VPoxGuestR3Exe_CFLAGS      += $(VPOX_VCC_WERR)
 TEMPLATE_VPoxGuestR3Exe_CXXFLAGS    += $(VPOX_VCC_WERR)
 if1of ($(VPOX_VCC_TOOL_STEM), VCC120)
  # VPoxDrvInst.cpp(520) : warning C4313: 'wprintf'  : '%d' in format string conflicts with argument 1 of type 'const TCHAR *' [false positive - buggy compiler?]
  TEMPLATE_VPoxGuestR3Exe_CXXFLAGS   += -wd4313
 endif
 TEMPLATE_VPoxGuestR3Exe_LDFLAGS     += $(VPOX_VCC_LD_WERR)
else
 TEMPLATE_VPoxGuestR3Exe_CFLAGS      += $(VPOX_GCC_WERR)
 TEMPLATE_VPoxGuestR3Exe_CXXFLAGS    += $(VPOX_GCC_WERR)
endif

#
# Template for building R3 (dynamic) libraries for the guest additions.
#
TEMPLATE_VPOXGUESTR3DLL           = VPox Guest User Dynamic Libraries
TEMPLATE_VPOXGUESTR3DLL_EXTENDS   = VPOXGUESTR3EXE
## @todo add a INSTFUN that separates dlls and libs.
ifn1of ($(KBUILD_TARGET), darwin os2 win)
 TEMPLATE_VPOXGUESTR3DLL_DEFS     = $(TEMPLATE_VPOXGUESTR3EXE_DEFS) PIC
 TEMPLATE_VPOXGUESTR3DLL_CFLAGS   = $(TEMPLATE_VPOXGUESTR3EXE_CFLAGS) -fPIC
 TEMPLATE_VPOXGUESTR3DLL_CXXFLAGS = $(TEMPLATE_VPOXGUESTR3EXE_CXXFLAGS) -fPIC -fno-exceptions
 TEMPLATE_VPOXGUESTR3DLL_LDFLAGS  = $(TEMPLATE_VPOXGUESTR3EXE_LDFLAGS) -fPIC
endif

#
# Template for building normal R3 (dynamic) libraries for the guest additions, allows warnings.
#
## @todo rename to VPoxGuestR3DllWarn
TEMPLATE_NewVPoxGuestR3Dll = VPox Guest User Dynamic Libraries w/ IPRT and VBGL.
TEMPLATE_NewVPoxGuestR3Dll_EXTENDS  = VPOXGUESTR3DLL
TEMPLATE_NewVPoxGuestR3Dll_LIBS     = \
	$(VPOX_LIB_IPRT_GUEST_R3_SHARED) \
	$(VPOX_LIB_VBGL_R3_SHARED) \
	$(VPOX_LIB_IPRT_GUEST_R3_SHARED) \
	$(TEMPLATE_VPOXGUESTR3DLL_LIBS)

#
# Template for building normal R3 (dynamic) libraries for the guest additions, strict.
#
TEMPLATE_VPoxGuestR3Dll = VPox Guest User Dynamic Libraries w/ IPRT and VBGL.
TEMPLATE_VPoxGuestR3Dll_EXTENDS  = NewVPoxGuestR3Dll
TEMPLATE_VPoxGuestR3Dll_EXTENDS_BY = appending
ifeq ($(KBUILD_TARGET),win)
 TEMPLATE_VPoxGuestR3Dll_CFLAGS      += $(VPOX_VCC_WERR)
 TEMPLATE_VPoxGuestR3Dll_CXXFLAGS    += $(VPOX_VCC_WERR)
 TEMPLATE_VPoxGuestR3Dll_LDFLAGS     += $(VPOX_VCC_LD_WERR)
else
 TEMPLATE_VPoxGuestR3Dll_CFLAGS      += $(VPOX_GCC_WERR)
 TEMPLATE_VPoxGuestR3Dll_CXXFLAGS    += $(VPOX_GCC_WERR)
endif

#
# Variant of VPoxGuestR3Dll that requires Windows 2000 or later for x86, and W2K3 for AMD64.
#
TEMPLATE_VPoxGuestR3DllMinW2K = VPox Guest User Dynamic Libraries w/ IPRT and VBGL.
TEMPLATE_VPoxGuestR3DllMinW2K_EXTENDS  = VPoxGuestR3Dll
ifeq ($(KBUILD_TARGET),win)
 TEMPLATE_VPoxGuestR3DllMinW2K_LDFLAGS.win.x86 = $(filter-out -Section:.bss$(COMMA)RW!K,$(TEMPLATE_VPoxGuestR3Dll_LDFLAGS.win.x86))
 TEMPLATE_VPoxGuestR3DllMinW2K_POST_CMDS.win.x86 = $(subst $(VPOX_PE_SET_VERSION), $(VPOX_PE_SET_VERSION) --w2k,$(TEMPLATE_VPoxGuestR3Dll_POST_CMDS.win.x86))
 TEMPLATE_VPoxGuestR3DllMinW2K_POST_CMDS.win.amd64 = $(if $(eq $(tool_do),LINK_LIBRARY),,$(VPOX_PE_SET_VERSION) --w2k3 $(out)$$(NLTAB)$(TEMPLATE_VPoxGuestR3Dll_POST_CMDS.win.amd64))
 TEMPLATE_VPoxGuestR3DllMinW2K_LNK_DEPS.win.amd64  = $(if $(eq $(tool_do),LINK_LIBRARY),,$(VPOX_PE_SET_VERSION)) $(TEMPLATE_VPoxGuestR3Dll_LNK_DEPS.win.amd64)
endif

#
# Variant of VPoxGuestR3Dll that requires Windows Vista or later.
#
TEMPLATE_VPoxGuestR3DllMinVista = VPox Guest User Dynamic Libraries w/ IPRT and VBGL.
TEMPLATE_VPoxGuestR3DllMinVista_EXTENDS  = VPoxGuestR3Dll
ifeq ($(KBUILD_TARGET),win)
 TEMPLATE_VPoxGuestR3DllMinVista_LDFLAGS.win.x86 = $(filter-out -Section:.bss$(COMMA)RW!K,$(TEMPLATE_VPoxGuestR3Dll_LDFLAGS.win.x86))
 TEMPLATE_VPoxGuestR3DllMinVista_POST_CMDS.win.x86 = $(subst $(VPOX_PE_SET_VERSION), $(VPOX_PE_SET_VERSION) --vista,$(TEMPLATE_VPoxGuestR3Dll_POST_CMDS.win.x86))
 TEMPLATE_VPoxGuestR3DllMinVista_POST_CMDS.win.amd64 = $(if $(eq $(tool_do),LINK_LIBRARY),,$(VPOX_PE_SET_VERSION) --vista $(out)$$(NLTAB)$(TEMPLATE_VPoxGuestR3Dll_POST_CMDS.win.amd64))
 TEMPLATE_VPoxGuestR3DllMinVista_LNK_DEPS.win.amd64  = $(if $(eq $(tool_do),LINK_LIBRARY),,$(VPOX_PE_SET_VERSION)) $(TEMPLATE_VPoxGuestR3Dll_LNK_DEPS.win.amd64)
endif

#
# Template for building normal R3 (dynamic) libraries for the guest additions with Visual C++ 2013 or later, strict.
#
TEMPLATE_NewerVccVPoxGuestR3Dll          = VPOXGUESTR3DLL with the newer Visual C++ version (2013 or later).
TEMPLATE_NewerVccVPoxGuestR3Dll_EXTENDS  = VPOXGUESTR3DLL
ifeq ($(KBUILD_TARGET),win)
 TEMPLATE_NewerVccVPoxGuestR3Dll_TOOL.win.x86    = $(VPOX_NEWER_VCC_TOOL_STEM)X86
 TEMPLATE_NewerVccVPoxGuestR3Dll_TOOL.win.amd64  = $(VPOX_NEWER_VCC_TOOL_STEM)AMD64
 TEMPLATE_NewerVccVPoxGuestR3Dll_CXXFLAGS        = \
 	$(filter-out $(VPOX_VCC_WARN_ALL) $(VPOX_VCC_WERR), $(TEMPLATE_VPOXGUESTR3DLL_CXXFLAGS)) \
	$(VPOX_NEWER_VCC_WARN_ALL) $(VPOX_VCC_WERR)
 TEMPLATE_NewerVccVPoxGuestR3Dll_CFLAGS          = $(TEMPLATE_NewerVccVPOXGUESTR3DLL_CXXFLAGS)
# Hack begin
# Does not work when building x86 for amd64 build (No rule to make target /oldnames.lib).
# TEMPLATE_NewerVccVPoxGuestR3Dll_LIBS.x86        = \
# 	$(subst $(PATH_TOOL_$(TEMPLATE_VPOXGUESTR3DLL_TOOL.win.x86)_LIB),$(PATH_TOOL_$(TEMPLATE_NewerVccVPoxGuestR3Dll_TOOL.win.x86)_LIB), $(TEMPLATE_VPOXGUESTR3DLL_LIBS.x86))
# TEMPLATE_NewerVccVPoxGuestR3Dll_LIBS.amd64      = \
# 	$(subst $(PATH_TOOL_$(TEMPLATE_VPOXGUESTR3DLL_TOOL.win.amd64)_LIB),$(PATH_TOOL_$(TEMPLATE_NewerVccVPoxGuestR3Dll_TOOL.win.amd64)_LIB), $(TEMPLATE_VPOXGUESTR3DLL_LIBS.amd64))
# Directly assign TEMPLATE_NewerVccVPoxGuestR3Dll_LIBS.
 TEMPLATE_NewerVccVPoxGuestR3Dll_LIBS.x86           = \
 	$(PATH_TOOL_$(TEMPLATE_NewerVccVPoxGuestR3Dll_TOOL.win.x86)_LIB)/oldnames.lib \
 	$(PATH_TOOL_$(TEMPLATE_NewerVccVPoxGuestR3Dll_TOOL.win.x86)_LIB)/libcmt$(VPOX_VCC_CRT_TYPE).lib \
 	$(PATH_TOOL_$(TEMPLATE_NewerVccVPoxGuestR3Dll_TOOL.win.x86)_LIB)/libcpmt$(VPOX_VCC_CRT_TYPE).lib
 TEMPLATE_NewerVccVPoxGuestR3Dll_LIBS.amd64         = \
 	$(PATH_TOOL_$(TEMPLATE_NewerVccVPoxGuestR3Dll_TOOL.win.amd64)_LIB)/oldnames.lib \
 	$(PATH_TOOL_$(TEMPLATE_NewerVccVPoxGuestR3Dll_TOOL.win.amd64)_LIB)/libcmt$(VPOX_VCC_CRT_TYPE).lib \
 	$(PATH_TOOL_$(TEMPLATE_NewerVccVPoxGuestR3Dll_TOOL.win.amd64)_LIB)/libcpmt$(VPOX_VCC_CRT_TYPE).lib
# Hack end
endif

#
# Variant of NewerVccVPoxGuestR3Dll that requires Windows Vista or later.
#
TEMPLATE_NewerVccVPoxGuestR3DllMinVista = NewerVccVPoxGuestR3Dll with the newer Visual C++ version (2013 or later).
TEMPLATE_NewerVccVPoxGuestR3DllMinVista_EXTENDS  = NewerVccVPoxGuestR3Dll
ifeq ($(KBUILD_TARGET),win)
 TEMPLATE_NewerVccVPoxGuestR3DllMinVista_LDFLAGS.win.x86 = $(filter-out -Section:.bss$(COMMA)RW!K,$(TEMPLATE_NewerVccVPoxGuestR3Dll_LDFLAGS.win.x86))
 TEMPLATE_NewerVccVPoxGuestR3DllMinVista_POST_CMDS.win.x86 = $(subst $(VPOX_PE_SET_VERSION), $(VPOX_PE_SET_VERSION) --vista,$(TEMPLATE_NewerVccVPoxGuestR3Dll_POST_CMDS.win.x86))
 TEMPLATE_NewerVccVPoxGuestR3DllMinVista_POST_CMDS.win.amd64 = $(if $(eq $(tool_do),LINK_LIBRARY),,$(VPOX_PE_SET_VERSION) --vista $(out)$$(NLTAB)$(TEMPLATE_NewerVccVPoxGuestR3Dll_POST_CMDS.win.amd64))
 TEMPLATE_NewerVccVPoxGuestR3DllMinVista_LNK_DEPS.win.amd64  = $(if $(eq $(tool_do),LINK_LIBRARY),,$(VPOX_PE_SET_VERSION)) $(TEMPLATE_NewerVccVPoxGuestR3Dll_LNK_DEPS.win.amd64)
endif

#
# Template for building R3 (static) libraries for the guest additions, allows warnings.
#
## @todo rename to VPoxGuestR3LibWarn.
TEMPLATE_VPOXGUESTR3LIB           = VPox Guest User Libraries
TEMPLATE_VPOXGUESTR3LIB_EXTENDS   = VPOXGUESTR3EXE
TEMPLATE_VPOXGUESTR3LIB_INST      = $(INST_ADDITIONS_LIB)

#
# Template for building R3 (static) libraries for the guest additions, strict.
#
TEMPLATE_VPoxGuestR3Lib = VPox Guest User Dynamic Libraries w/ IPRT and VBGL.
TEMPLATE_VPoxGuestR3Lib_EXTENDS  = VPOXGUESTR3LIB
TEMPLATE_VPoxGuestR3Lib_EXTENDS_BY = appending
ifeq ($(KBUILD_TARGET),win)
 TEMPLATE_VPoxGuestR3Lib_CFLAGS      += $(VPOX_VCC_WERR)
 TEMPLATE_VPoxGuestR3Lib_CXXFLAGS    += $(VPOX_VCC_WERR)
 TEMPLATE_VPoxGuestR3Lib_LDFLAGS     += $(VPOX_VCC_LD_WERR)
else
 TEMPLATE_VPoxGuestR3Lib_CFLAGS      += $(VPOX_GCC_WERR)
 TEMPLATE_VPoxGuestR3Lib_CXXFLAGS    += $(VPOX_GCC_WERR)
endif

#
# Template for building R3 programs for the guest additions (no -pedantic)
#
TEMPLATE_VPOXGUESTR3NPEXE          = VPox Guest Program Non-pedantic
TEMPLATE_VPOXGUESTR3NPEXE_EXTENDS  = VPOXGUESTR3EXE
ifneq ($(KBUILD_TARGET),win) # gcc only
 TEMPLATE_VPOXGUESTR3NPEXE_CXXFLAGS = $(filter-out $(VPOX_GCC_WERR) $(VPOX_GCC_WARN_MASOCHISTIC) $(VPOX_GCC_PEDANTIC_CXX),$(TEMPLATE_VPOXGUESTR3EXE_CXXFLAGS)) \
 	-Wno-sign-compare
 TEMPLATE_VPOXGUESTR3NPEXE_CFLAGS   = $(filter-out $(VPOX_GCC_WERR) $(VPOX_GCC_WARN_MASOCHISTIC) $(VPOX_GCC_PEDANTIC_C)  ,$(TEMPLATE_VPOXGUESTR3EXE_CFLAGS)) \
 	-Wno-sign-compare
endif

#
# Template for building R3 (dynamic) libraries for the guest additions (no -pedantic)
#
TEMPLATE_VPOXGUESTR3NPDLL           = VPox Guest User Dynamic Libraries Non-pedantic
TEMPLATE_VPOXGUESTR3NPDLL_EXTENDS   = VPOXGUESTR3NPEXE
## @todo add a INSTFUN that separates dlls and libs.
ifn1of ($(KBUILD_TARGET), darwin os2 win)
 TEMPLATE_VPOXGUESTR3NPDLL_DEFS     = $(TEMPLATE_VPOXGUESTR3NPEXE_DEFS) PIC
 TEMPLATE_VPOXGUESTR3NPDLL_CFLAGS   = $(TEMPLATE_VPOXGUESTR3NPEXE_CFLAGS) -fPIC
 TEMPLATE_VPOXGUESTR3NPDLL_CXXFLAGS = $(TEMPLATE_VPOXGUESTR3NPEXE_CXXFLAGS) -fPIC -fno-exceptions
 TEMPLATE_VPOXGUESTR3NPDLL_LDFLAGS  = $(TEMPLATE_VPOXGUESTR3NPEXE_LDFLAGS) -fPIC
endif

#
# Template for building R3 (static) libraries for the guest additions (no -pedantic)
#
TEMPLATE_VPOXGUESTR3NPLIB           = VPox Guest User Libraries Non-pedantic
TEMPLATE_VPOXGUESTR3NPLIB_EXTENDS   = VPOXGUESTR3NPEXE
TEMPLATE_VPOXGUESTR3NPLIB_INST      = $(INST_ADDITIONS_LIB)


#
# Template for XFree86 guest modules (relocatable module, i.e. sysmod).
# This mostly about zapping the VPOXR3EXE linker flags and libraries.
#
TEMPLATE_VPOXGUESTR3XF86MOD       = VPox XFree86 Guest Module
TEMPLATE_VPOXGUESTR3XF86MOD_EXTENDS = VPOXGUESTR3EXE
TEMPLATE_VPOXGUESTR3XF86MOD_LIBS.$(KBUILD_TYPE)      = $(NO_SUCH_VARIABLE)
TEMPLATE_VPOXGUESTR3XF86MOD_LIBS.$(KBUILD_TARGET)    = $(NO_SUCH_VARIABLE)
TEMPLATE_VPOXGUESTR3XF86MOD_LDFLAGS.$(KBUILD_TARGET) = $(NO_SUCH_VARIABLE)
# The GNU_HASH ELF tag is not supported by older glibc dynamic linkers.
TEMPLATE_VPOXGUESTR3XF86MOD_LDFLAGS.linux = $(subst -Wl$(COMMA),,$(VPOX_LD_hash_style_sysv))
TEMPLATE_VPOXGUESTR3XF86MOD_LDFLAGS.$(KBUILD_TYPE)   = $(NO_SUCH_VARIABLE)
TEMPLATE_VPOXGUESTR3XF86MOD_LDFLAGS          = -r
if1of ($(KBUILD_TARGET), dragonfly freebsd linux netbsd openbsd) # the gnu ld guys.
 TEMPLATE_VPOXGUESTR3XF86MOD_LDFLAGS.release = -S
 TEMPLATE_VPOXGUESTR3XF86MOD_LDFLAGS.x86     = -m elf_i386
 TEMPLATE_VPOXGUESTR3XF86MOD_LDFLAGS.amd64   = -m elf_x86_64
endif
TEMPLATE_VPOXGUESTR3XF86MOD_CFLAGS  = $(TEMPLATE_VPOXGUESTR3EXE_CFLAGS) -fno-pie -fno-merge-constants -std=c99 -ffreestanding
TEMPLATE_VPOXGUESTR3XF86MOD_CXXFLAGS= $(TEMPLATE_VPOXGUESTR3EXE_CXXFLAGS) -fno-pie -fno-merge-constants -ffreestanding
TEMPLATE_VPOXGUESTR3XF86MOD_CFLAGS.linux  = $(VPOX_GCC_fno-stack-protector) # Remove symvers.h
TEMPLATE_VPOXGUESTR3XF86MOD_CXXFLAGS.linux = $(VPOX_GCC_fno-stack-protector) # Remove symvers.h
TEMPLATE_VPOXGUESTR3XF86MOD_SYSSUFF = .o
TEMPLATE_VPOXGUESTR3XF86MOD_LIBS  = \
	$(VPOX_LIB_VBGL_R3_XFREE86)
TEMPLATE_VPOXGUESTR3XF86MOD_DEFS  = $(TEMPLATE_VPOXGUESTR3DLL_DEFS) VPOX_GUESTR3XF86MOD RTMEM_NO_WRAP_TO_EF_APIS


#
# Template for XFree86 guest libraries.
#
TEMPLATE_VPOXGUESTR3XF86LIB         = VPox XFree86 Guest Library
TEMPLATE_VPOXGUESTR3XF86LIB_EXTENDS = VPOXGUESTR3XF86MOD
TEMPLATE_VPOXGUESTR3XF86LIB_INST    = $(INST_ADDITIONS_LIB)


#
# Template for X.org guest modules (shared libs).
# This mostly about zapping unnecessary LIBS from VPOXGUESTR3DLL and adding some flags.
#
TEMPLATE_VPOXGUESTR3XORGMOD       = VPox X.org Guest Module
TEMPLATE_VPOXGUESTR3XORGMOD_EXTENDS = VPOXGUESTR3DLL
TEMPLATE_VPOXGUESTR3XORGMOD_LIBS.$(KBUILD_TYPE)     = $(NO_SUCH_VARIABLE)
TEMPLATE_VPOXGUESTR3XORGMOD_LIBS.$(KBUILD_TARGET)   = $(NO_SUCH_VARIABLE)
TEMPLATE_VPOXGUESTR3XORGMOD_CFLAGS                  = $(TEMPLATE_VPOXGUESTR3DLL_CFLAGS) -std=c99
if1of ($(KBUILD_TARGET), linux)
 TEMPLATE_VPOXGUESTR3XORGMOD_CFLAGS                += -Wno-conversion -Wno-unused-parameter
endif
TEMPLATE_VPOXGUESTR3XORGMOD_DEFS = $(TEMPLATE_VPOXGUESTR3DLL_DEFS) VPOX_GUESTR3XORGMOD RTMEM_NO_WRAP_TO_EF_APIS
ifeq ($(KBUILD_TARGET_ARCH),amd64)
 TEMPLATE_VPOXGUESTR3XORGMOD_DEFS += _XSERVER64
endif
TEMPLATE_VPOXGUESTR3XORGMOD_LIBS = \
	$(VPOX_LIB_VBGL_R3_XORG)
TEMPLATE_VPOXGUESTR3XORGMOD_LIBS.freebsd += \
	iconv


#
# Template for X.Org guest libraries.
#
TEMPLATE_VPOXGUESTR3XORGLIB         = VPox X.Org Guest Library
TEMPLATE_VPOXGUESTR3XORGLIB_EXTENDS = VPOXGUESTR3XORGMOD
TEMPLATE_VPOXGUESTR3XORGLIB_INST    = $(INST_ADDITIONS_LIB)


#
# Template for building R0 drivers for the guest additions.
#
TEMPLATE_VPOXGUESTR0             = VPox Guest Driver
TEMPLATE_VPOXGUESTR0_EXTENDS     = VPOXR0DRV
TEMPLATE_VPOXGUESTR0_INST        = $(INST_ADDITIONS)
TEMPLATE_VPOXGUESTR0_SDKS.win.x86   = ReorderCompilerIncs $(VPOX_WINDDK_GST) $(VPOX_WINPSDK_GST)INCS
TEMPLATE_VPOXGUESTR0_SDKS.win.amd64 = ReorderCompilerIncs $(VPOX_WINDDK_GST) $(VPOX_WINPSDK_GST)INCS
TEMPLATE_VPOXGUESTR0_LIBS.win.x86   = \
	$(PATH_SDK_$(VPOX_WINDDK)_LIB)/int64.lib
TEMPLATE_VPOXGUESTR0_DEFS        = $(TEMPLATE_VPOXR0DRV_DEFS) IN_GUEST IN_GUEST_R0
TEMPLATE_VPOXGUESTR0_DEFS.linux  = RT_NO_EXPORT_SYMBOL
ifeq ($(KBUILD_TARGET),solaris)
 TEMPLATE_VPOXGUESTR0_LDFLAGS    = -r -dy
endif
ifn1of (darwin os2 win, $(KBUILD_TARGET))
 TEMPLATE_VPOXGUESTR0_CFLAGS     = $(patsubst %/VPox/SUPDrvMangling.h,%/VPox/VPoxGuestMangling.h,$(TEMPLATE_VPOXR0DRV_CFLAGS))
 TEMPLATE_VPOXGUESTR0_CXXFLAGS   = $(patsubst %/VPox/SUPDrvMangling.h,%/VPox/VPoxGuestMangling.h,$(TEMPLATE_VPOXR0DRV_CXXFLAGS))
endif


#
# Template for building R0 libraries for the guest additions.
#
TEMPLATE_VPOXGUESTR0LIB          = VPox Guest Driver Libraries
TEMPLATE_VPOXGUESTR0LIB_EXTENDS  = VPOXGUESTR0
TEMPLATE_VPOXGUESTR0LIB_INSTTYPE = stage
TEMPLATE_VPOXGUESTR0LIB_INSTTYPE.linux = stage
TEMPLATE_VPOXGUESTR0LIB_INST     = $(INST_ADDITIONS_LIB)
ifeq ($(KBUILD_TARGET),haiku)
 TEMPLATE_VPOXGUESTR0LIB_LDFLAGS = -r -dy
endif


#
# Guest additions libraries (all static).
#   The _MINI and _SHARED are both compiled as PIC and intended for linking into a .so/.dll/.dylib.
#
VPOX_LIB_IPRT_GUEST_R3           = $(VPOX_PATH_ADDITIONS_LIB)/RuntimeGuestR3$(VPOX_SUFF_LIB)
VPOX_LIB_IPRT_GUEST_R3_SHARED    = $(VPOX_PATH_ADDITIONS_LIB)/RuntimeGuestR3Shared$(VPOX_SUFF_LIB)
VPOX_LIB_IPRT_GUEST_R0           = $(VPOX_PATH_ADDITIONS_LIB)/RuntimeGuestR0$(VPOX_SUFF_LIB)
#ifeq ($(KBUILD_TARGET_ARCH),x86)
# VPOX_LIB_IPRT_GUEST_R0_NT4      = $(VPOX_PATH_ADDITIONS_LIB)/RuntimeGuestR0NT4$(VPOX_SUFF_LIB)
#else
 VPOX_LIB_IPRT_GUEST_R0_NT4      = $(VPOX_LIB_IPRT_GUEST_R0)
#endif
VPOX_LIB_VBGL_R3                 = $(VPOX_PATH_ADDITIONS_LIB)/VPoxGuestR3Lib$(VPOX_SUFF_LIB)
VPOX_LIB_VBGL_R3_XFREE86         = $(VPOX_PATH_ADDITIONS_LIB)/VPoxGuestR3LibXFree86$(VPOX_SUFF_LIB)
VPOX_LIB_VBGL_R3_XORG            = $(VPOX_PATH_ADDITIONS_LIB)/VPoxGuestR3LibXOrg$(VPOX_SUFF_LIB)
VPOX_LIB_VBGL_R3_SHARED          = $(VPOX_PATH_ADDITIONS_LIB)/VPoxGuestR3LibShared$(VPOX_SUFF_LIB)
VPOX_LIB_VBGL_R0BASE             = $(VPOX_PATH_ADDITIONS_LIB)/VPoxGuestR0LibBase$(VPOX_SUFF_LIB)
VPOX_LIB_VBGL_R0                 = $(VPOX_PATH_ADDITIONS_LIB)/VPoxGuestR0Lib$(VPOX_SUFF_LIB)
ifeq ($(KBUILD_TARGET),x86)
 VPOX_LIB_IPRT_GUEST_R3_X86      = $(VPOX_LIB_IPRT_GUEST_R3)
 VPOX_LIB_IPRT_GUEST_R3_SHARED_X86 = $(VPOX_LIB_IPRT_GUEST_R3_SHARED)
 VPOX_LIB_VBGL_R3_X86            = $(VPOX_LIB_VBGL_R3)
 VPOX_LIB_VBGL_R3_SHARED_X86     = $(VPOX_LIB_VBGL_R3_SHARED)
else
 VPOX_LIB_IPRT_GUEST_R3_X86      = $(VPOX_PATH_ADDITIONS_LIB)/RuntimeGuestR3-x86$(VPOX_SUFF_LIB)
 VPOX_LIB_IPRT_GUEST_R3_SHARED_X86 = $(VPOX_PATH_ADDITIONS_LIB)/RuntimeGuestR3Shared-x86$(VPOX_SUFF_LIB)
 VPOX_LIB_VBGL_R3_X86            = $(VPOX_PATH_ADDITIONS_LIB)/VPoxGuestR3Lib-x86$(VPOX_SUFF_LIB)
 VPOX_LIB_VBGL_R3_SHARED_X86     = $(VPOX_PATH_ADDITIONS_LIB)/VPoxGuestR3LibShared-x86$(VPOX_SUFF_LIB)
endif


#
# Check the publisher and version string.
#
# We are being very strict because the version string is visible in various
# APIs and logs and must be machine readable.
#
VPOX_VERSION_COMP_VALID_CHAR_SET = ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz()[]{}+-.,
ifneq ($(VPOX_BUILD_PUBLISHER),)
 if !defined(VPOX_BUILD_TAG) && $(length $(VPOX_BUILD_PUBLISHER)) > 10
  $(error VPox: VPOX_BUILD_PUBLISHER must not be longer than 10 characters!)
 else if defined(VPOX_BUILD_TAG) && $(length $(VPOX_BUILD_PUBLISHER)) > 48
  $(error VPox: VPOX_BUILD_PUBLISHER must not be longer than 48 characters!)
 endif
 if "$(substr $(VPOX_BUILD_PUBLISHER), 1, 1)" != "_"
  $(error VPox: VPOX_BUILD_PUBLISHER must start with an underscore!)
 endif
 if "$(translate $(substr $(VPOX_BUILD_PUBLISHER),2),$(VPOX_VERSION_COMP_VALID_CHAR_SET),)" != ""
  $(error VPox: VPOX_BUILD_PUBLISHER='$(VPOX_BUILD_PUBLISHER)' contains bad characters! Valid set is:$(NLTAB)$(VPOX_VERSION_COMP_VALID_CHAR_SET))
 endif
endif

if $(words $(VPOX_VERSION_STRING)) != 1
 $(error VPox: VPOX_VERSION_STRING='$(VPOX_VERSION_STRING)' contains spaces or is empty.)
endif
if "$(subst __,-,$(VPOX_VERSION_STRING))" != "$(VPOX_VERSION_STRING)"
 $(error VPox: VPOX_VERSION_STRING='$(VPOX_VERSION_STRING)' contains double underscores.)
endif

VPOX_VER_TMP1 := $(subst _,$(SP),$(VPOX_VERSION_STRING))

if $(words $(VPOX_VER_TMP1)) > 3
 $(error VPox: VPOX_VERSION_STRING='$(VPOX_VERSION_STRING)' contains too many parts (underscores), max 3!)
endif
if "$(translate $(word 1,$(VPOX_VER_TMP1)),0123456789,)" != ".."
 $(error VPox: The x.y.z part of VPOX_VERSION_STRING='$(VPOX_VERSION_STRING)' is malformed: '$(word 1,$(VPOX_VER_TMP1))')
endif
if "$(word 1,$(VPOX_VER_TMP1))" != "$(VPOX_VERSION_STRING_RAW)"
 $(error VPox: VPOX_VERSION_STRING='$(VPOX_VERSION_STRING)' does not start with VPOX_VERSION_STRING_RAW='$(VPOX_VERSION_STRING_RAW)')
endif

if $(words $(VPOX_VER_TMP1)) == 3 || ($(words $(VPOX_VER_TMP1)) == 2 && "$(VPOX_BUILD_PUBLISHER)" == "")
 if      "$(substr $(word 2,$(VPOX_VER_TMP1)),1,4)" == "BETA"
  VPOX_VER_TMP2 = 5
 else if "$(substr $(word 2,$(VPOX_VER_TMP1)),1,5)" == "ALPHA"
  VPOX_VER_TMP2 = 6
 else if "$(substr $(word 2,$(VPOX_VER_TMP1)),1,2)" == "RC"
  VPOX_VER_TMP2 = 3
 else
  $(error VPox: VPOX_VERSION_STRING='$(VPOX_VERSION_STRING)' uses an unknown build type: '$(word 2,$(VPOX_VER_TMP1))')
 endif
 if "$(translate $(substr $(word 2,$(VPOX_VER_TMP1)),$(VPOX_VER_TMP2)),0123456789)" != ""
  $(error VPox: VPOX_VERSION_STRING='$(VPOX_VERSION_STRING)' uses an unknown build type: '$(word 2,$(VPOX_VER_TMP1))')
 endif
endif

VPOX_VER_TMP1 :=
VPOX_VER_TMP2 :=


#
# Two targets to coordinate version number changes properly. Note that the
# only way to get a really consistent build is to run 'kmk' in the top-level
# directory. If you don't run it there, you get a consistent sub-tree only.
#
VPOX_BAD_CHAR_SET   = ,;:/\$(SP)$(TAB)$(HASH)=![]@%&''()*""<>?^{}|~
VPOX_VERSION_STAMP  = $(PATH_OUT)/version-stamp-raw-api-$(translate $(VPOX_VERSION_STRING)-$(VPOX_C_YEAR)-$(VPOX_VENDOR)-$(VPOX_PRODUCT)-$(VPOX_API_VERSION)-$(VPOX_BUILD_PUBLISHER)-$(USERNAME),$(VPOX_BAD_CHAR_SET),,_)
VPOX_VERSION_HEADER = $(PATH_OUT)/version-generated.h
VPOX_VERSION_MK     = $(PATH_OUT)/version-generated.mk

$(VPOX_VERSION_STAMP): | $(PATH_ROOT)/Config.kmk
	$(call MSG_GENERATE,,$@)
	$(QUIET)$(MKDIR) -p $(@D)
	$(QUIET)$(RM) -f $(wildcard $(PATH_OUT)/version-stamp-*)
	$(QUIET)$(APPEND) $@ $(VPOX_VERSION_STRING)

$(VPOX_VERSION_HEADER): $(VPOX_VERSION_STAMP)
	$(call MSG_GENERATE,,$@)
	$(QUIET)$(MKDIR) -p $(@D)
	$(QUIET)$(RM) -f $@ $@.tmp
	$(QUIET)$(APPEND) $@.tmp '#ifndef ___version_generated_h___'
	$(QUIET)$(APPEND) $@.tmp '#define ___version_generated_h___'
	$(QUIET)$(APPEND) $@.tmp ''
	$(QUIET)$(APPEND) $@.tmp '#define VPOX_VERSION_MAJOR $(VPOX_VERSION_MAJOR)'
	$(QUIET)$(APPEND) $@.tmp '#define VPOX_VERSION_MINOR $(VPOX_VERSION_MINOR)'
	$(QUIET)$(APPEND) $@.tmp '#define VPOX_VERSION_BUILD $(VPOX_VERSION_BUILD)'
ifneq ($(VPOX_VERSION_PRERELEASE),)
	$(QUIET)$(APPEND) $@.tmp '#define VPOX_VERSION_PRERELEASE "$(strip $(VPOX_VERSION_PRERELEASE))"'
endif
	$(QUIET)$(APPEND) $@.tmp '#define VPOX_VERSION_STRING_RAW "$(VPOX_VERSION_STRING_RAW)"'
	$(QUIET)$(APPEND) $@.tmp '#define VPOX_VERSION_STRING "$(VPOX_VERSION_STRING)"'
	$(QUIET)$(APPEND) $@.tmp '#define VPOX_API_VERSION_STRING "$(VPOX_API_VERSION)"'
	$(QUIET)$(APPEND) $@.tmp ''
ifdef VPOX_BUILD_SERVER_BUILD
	$(QUIET)$(APPEND) $@.tmp '#define VPOX_BUILD_SERVER_BUILD 1'
else
	$(QUIET)$(APPEND) $@.tmp '#define VPOX_PRIVATE_BUILD_DESC "Private build by $(USERNAME)"'
endif
	$(QUIET)$(APPEND) $@.tmp ''
	$(QUIET)$(APPEND) $@.tmp '#endif'
	$(QUIET)$(MV) -f $@.tmp $@


VPOX_PACKAGE_HEADER = $(PATH_OUT)/package-generated.h

$(VPOX_PACKAGE_HEADER):
	$(call MSG_GENERATE,,$@)
	$(QUIET)$(MKDIR) -p $(@D)
	$(QUIET)$(RM) -f $@ $@.tmp
	$(QUIET)$(APPEND) $@.tmp '#ifndef ___package_generated_h___'
	$(QUIET)$(APPEND) $@.tmp '#define ___package_generated_h___'
	$(QUIET)$(APPEND) $@.tmp ''
	$(QUIET)$(APPEND) $@.tmp '#define VPOX_PACKAGE_STRING "$(VPOX_PACKAGE_STRING)"'
	$(QUIET)$(APPEND) $@.tmp ''
	$(QUIET)$(APPEND) $@.tmp '#endif'
	$(QUIET)$(MV) -f $@.tmp $@

VPOX_PRODUCT_HEADER = $(PATH_OUT)/product-generated.h

$(VPOX_PRODUCT_HEADER): $(VPOX_VERSION_STAMP)
	$(call MSG_GENERATE,,$@)
	$(QUIET)$(MKDIR) -p $(@D)
	$(QUIET)$(RM) -f $@ $@.tmp
	$(QUIET)$(APPEND) $@.tmp '#ifndef ___product_generated_h___'
	$(QUIET)$(APPEND) $@.tmp '#define ___product_generated_h___'
	$(QUIET)$(APPEND) $@.tmp ''
	$(QUIET)$(APPEND) $@.tmp '#define VPOX_VENDOR "$(VPOX_VENDOR)"'
	$(QUIET)$(APPEND) $@.tmp '#define VPOX_VENDOR_SHORT "$(VPOX_VENDOR_SHORT)"'
	$(QUIET)$(APPEND) $@.tmp '#define VPOX_PRODUCT "$(VPOX_PRODUCT)"'
	$(QUIET)$(APPEND) $@.tmp '#define VPOX_BUILD_PUBLISHER "$(VPOX_BUILD_PUBLISHER)"'
	$(QUIET)$(APPEND) $@.tmp '#define VPOX_C_YEAR "$(VPOX_C_YEAR)"'
	$(QUIET)$(APPEND) $@.tmp ''
	$(QUIET)$(APPEND) $@.tmp '#endif'
	$(QUIET)$(MV) -f $@.tmp $@

#
# Used for external makefiles which cannot include Config.kmk
#
$(VPOX_VERSION_MK): $(VPOX_VERSION_STAMP)
	$(call MSG_GENERATE,,$@)
	$(QUIET)$(RM) -f $@ $@.tmp
	$(QUIET)$(MKDIR) -p $(@D)
	$(QUIET)$(APPEND) $@.tmp 'VPOX_VERSION_MAJOR = $(VPOX_VERSION_MAJOR)'
	$(QUIET)$(APPEND) $@.tmp 'VPOX_VERSION_MINOR = $(VPOX_VERSION_MINOR)'
	$(QUIET)$(APPEND) $@.tmp 'VPOX_VERSION_BUILD = $(VPOX_VERSION_BUILD)'
	$(QUIET)$(APPEND) $@.tmp 'VPOX_VERSION_STRING = $(VPOX_VERSION_STRING)'
ifneq ($(VPOX_VERSION_PRERELEASE),)
	$(QUIET)$(APPEND) $@.tmp 'VPOX_VERSION_PRERELEASE = $(strip $(VPOX_VERSION_PRERELEASE))'
endif
	$(QUIET)$(APPEND) $@.tmp 'VPOX_VENDOR = $(VPOX_VENDOR)'
	$(QUIET)$(APPEND) $@.tmp 'VPOX_VENDOR_SHORT = $(VPOX_VENDOR_SHORT)'
	$(QUIET)$(APPEND) $@.tmp 'VPOX_PRODUCT = $(VPOX_PRODUCT)'
	$(QUIET)$(APPEND) $@.tmp 'VPOX_C_YEAR = $(VPOX_C_YEAR)'
ifdef VPOX_BUILD_SERVER_BUILD
	$(QUIET)$(APPEND) $@.tmp 'VPOX_BUILD_SERVER_BUILD = 1'
else
	$(QUIET)$(APPEND) $@.tmp 'VPOX_PRIVATE_BUILD_DESC = Private build by $(USERNAME)'
endif
	$(QUIET)$(MV) -f $@.tmp $@

if !defined(VPOX_OSE) && !defined(VPOX_NOINC_LICENSE_VER_KMK)
 if1of ($(KBUILD_TARGET), freebsd linux netbsd openbsd solaris)
  # VPOX_LICENSE_VER is used in several Makefiles
  VPOX_LICENSE_VER_KMK = $(PATH_OUT)/license-version.kmk
$(VPOX_LICENSE_VER_KMK): $(VPOX_BRAND_LICENSE_HTML)
	$(call MSG_GENERATE,,$(VPOX_LICENSE_VER_KMK))
	$(QUIET)$(MKDIR) -p $(@D)
  ifdef VPOX_BRAND_LICENSE_VER
	$(QUIET)$(RM) -f '$@'
	$(APPEND) '$@' 'VPOX_LICENSE_VER=$(VPOX_BRAND_LICENSE_VER)'
  else
	$(QUIET)$(SED) -e "s/.*License version \([0-9.]*\) *[,&].*/VPOX_LICENSE_VER=\1/;t;d" --output $@ $(VPOX_BRAND_LICENSE_HTML)
  endif
  -include $(VPOX_LICENSE_VER_KMK)
  ifdef VPOX_LICENSE_VER
   VPOX_LICENSE_FILES = \
	 License-$(VPOX_LICENSE_VER).html \
	 $(foreach f,$(VPOX_INSTALLER_ADD_LANGUAGES),License-$(VPOX_LICENSE_VER)-$(f).html)
   VPOX_LICENSE_BINS = $(addprefix $(PATH_STAGE_BIN)/,$(VPOX_LICENSE_FILES))
  endif
 endif
endif


ifndef VPOX_NOINC_MISC
# Force building of the version header file as the first thing anywhere in
# the tree. This eliminates the need for manual dependencies on it.
## @todo there gotta be a better way of doing this.
Makefile.kmk: | $(VPOX_VERSION_HEADER) $(VPOX_VERSION_MK) $(VPOX_PRODUCT_HEADER) $(VPOX_PACKAGE_HEADER)
endif


#
# Subversion tree revision.
#
# The VPOX_SVN_REV contains our best guess.  Use svn info on the root of the
# tree to determine this it if .svn/wc.db or .svn/entries is found (the former
# also up to two directory levels higher to allow for checkouts of the entire
# repository), otherwise fall back on maximum value of Config.kmk and
# Version.kmk revision.
#
# Makefile rules using this information shall list $(VPOX_SVN_REV_KMK) as a
# prerequisite.
#
SVN                    ?= svn$(HOSTSUFF_EXE)
VPOX_SVN_REV_KMK        = $(PATH_OUT)/revision.kmk
ifndef VPOX_SVN_REV
 VPOX_SVN_REV_CONFIG_FALLBACK := $(patsubst %:,,  $Rev: 152435 $  )
 VPOX_SVN_REV_FALLBACK := $(if-expr $(VPOX_SVN_REV_CONFIG_FALLBACK) > $(VPOX_SVN_REV_VERSION_FALLBACK),$(VPOX_SVN_REV_CONFIG_FALLBACK),$(VPOX_SVN_REV_VERSION_FALLBACK))
 VPOX_SVN_DEP          := $(firstword $(wildcard $(PATH_ROOT)/.svn/wc.db $(abspath $(PATH_ROOT)/../.svn/wc.db) $(abspath $(PATH_ROOT)/../../.svn/wc.db) $(PATH_ROOT)/.svn/entries))
 ifeq ($(which $(SVN)),)
  VPOX_SVN_DEP         :=
 endif

# Rule for generating a timestamp and updating the real thing on change.
$(VPOX_SVN_REV_KMK).ts +| $(VPOX_SVN_REV_KMK): $(if $(VPOX_SVN_DEP), $(VPOX_SVN_DEP), $(PATH_ROOT)/Config.kmk)
	$(call MSG_GENERATE,,$(VPOX_SVN_REV_KMK))
	$(QUIET)$(RM) -f $@ $@.tmp
	$(QUIET)$(MKDIR) -p $(@D)
 ifneq ($(VPOX_SVN_DEP),)
	-$(REDIRECT) -E 'LC_ALL=C' -wo $@.tmp -- $(SVN) info $(PATH_ROOT)
	# Append fallback. Will be ignored if "svn info" provides meaningful data.
	$(QUIET)$(APPEND) $@.tmp 'Last Changed Rev: $(VPOX_SVN_REV_FALLBACK)'
	$(SED) -e '/^Last Changed Rev/!d'  -e 's/Last Changed Rev\: */export VPOX_SVN_REV=/; t a; :a q' --output $@ $@.tmp
	$(QUIET)$(RM) -f $@.tmp
 else
	$(QUIET)$(APPEND) $@ 'export VPOX_SVN_REV=$(VPOX_SVN_REV_FALLBACK)'
 endif
	$(QUIET)$(CP) --changed -fv $@ $(VPOX_SVN_REV_KMK)

 ifndef VPOX_NOINC_SVN_REV_KMK
  include $(VPOX_SVN_REV_KMK)
 endif
else
# allow to overwrite VPOX_SVN_REV externally (mainly for building .debs/.rpms)
$(VPOX_SVN_REV_KMK):
	$(call MSG_GENERATE,,$(VPOX_SVN_REV_KMK))
	$(QUIET)$(RM) -f $@
	$(QUIET)$(MKDIR) -p $(@D)
	$(QUIET)$(APPEND) $@ 'export VPOX_SVN_REV=$(VPOX_SVN_REV)'
	$(QUIET)echo '* $(VPOX_SVN_REV_KMK) was externally overwritten:'
	$(QUIET)$(CAT) $(VPOX_SVN_REV_KMK)
endif

# only needed for VPoxGuest for Linux/FreeBSD guests
VPOX_SVN_REV_HEADER = $(PATH_OUT)/revision-generated.h
$(VPOX_SVN_REV_HEADER): $(VPOX_SVN_REV_KMK)
	$(call MSG_GENERATE,,$@)
	$(QUIET)$(RM) -f $@ $@.tmp
	$(QUIET)$(MKDIR) -p $(@D)
	$(QUIET)$(APPEND) $@.tmp '#define VPOX_SVN_REV $(VPOX_SVN_REV)'
	$(QUIET)$(MV) -f $@.tmp $@

#
# Shared definitions of the XIDL file to use as a source for
# generating various other files (VPoxSVC, webservice, docs, front-ends, ...)
#

# Real XIDL source file; from this we strip the <desc> elements to generate
# a second XIDL file, from which the COM/XPCOM IDL files are then generated:
VPOX_XIDL_FILE_SRC     = $(PATH_ROOT)/src/VPox/Main/idl/VirtualPox.xidl
# second XIDL file to use as source for COM/XPCOM IDL (with stripped docs):
VPOX_XIDL_FILE         = $(PATH_OUT)/obj/VirtualPox_stripped.xidl


#
# VPOX_SEP needs to be quoted when used on the shell command line.
#
if1of ($(KBUILD_TARGET), os2 win)
 VPOX_SEP = $(SEMICOLON)
else
 VPOX_SEP = $(COLON)
endif

# Java compiler options, needs some version checking.
if defined(VPOX_JAVA_VERSION) && $(VPOX_JAVA_VERSION) >= 110000
 VPOX_JAVA_WS_PATH ?= /usr/share/java
 VPOX_JAVA_WS_EXTRA_JARS ?= $(VPOX_JAVA_WS_PATH)/jws-api.jar$(VPOX_SEP)$(VPOX_JAVA_WS_PATH)/jaxb-api.jar$(VPOX_SEP)$(VPOX_JAVA_WS_PATH)/jaxws-api.jar
else if defined(VPOX_JAVA_VERSION) && $(VPOX_JAVA_VERSION) >= 10900
 VPOX_JAVA_WS_OPTS ?= --add-modules java.xml.ws
endif
if defined(VPOX_JAVA_VERSION) && $(VPOX_JAVA_VERSION) >= 110000
 VPOX_JAVAC_OPTS   = -encoding UTF-8 -source 9 -target 9 -Xlint:unchecked
else if defined(VPOX_JAVA_VERSION) && $(VPOX_JAVA_VERSION) >= 90000
 VPOX_JAVAC_OPTS   = -encoding UTF-8 -source 6 -target 6 -Xlint:unchecked
else
 VPOX_JAVAC_OPTS   = -encoding UTF-8 -source 1.5 -target 1.5 -Xlint:unchecked
endif
VPOX_JAVADOC_OPTS = -encoding UTF-8


#
# Legacy.
#
## @todo try remove this.
ifneq ($(LOCALCFG),)
 include $(LOCALCFG)
endif


#
# For efficiently build serveral build types / archs.
#
both-debug-release both-release-debug: \
		build-release-$(KBUILD_TARGET_ARCH) \
		build-debug-$(KBUILD_TARGET_ARCH)
both-x86-amd64     both-amd64-x86: \
		build-$(KBUILD_TYPE)-x86 \
		build-$(KBUILD_TYPE)-x86
both-types-archs both-archs-types: \
		build-debug-x86 \
		build-release-x86 \
		build-debug-amd64 \
		build-release-amd64

build-release-x86:
	+$(MAKE) KBUILD_TYPE=release KBUILD_TARGET_ARCH=x86

build-debug-x86:
	+$(MAKE) KBUILD_TYPE=debug KBUILD_TARGET_ARCH=x86

build-release-amd64:
	+$(MAKE) KBUILD_TYPE=release KBUILD_TARGET_ARCH=amd64

build-debug-amd64:
	+$(MAKE) KBUILD_TYPE=debug KBUILD_TARGET_ARCH=amd64


#
# Some extra goals.
#
.PHONY: up update st stat status
up update::
	$(SVN) up

up2 update2::
	$(SVN) up --ignore-externals

st stat status:
	$(SVN) status
